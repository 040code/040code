<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="https://040code.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://040code.github.io//" rel="alternate" type="text/html" /><updated>2018-09-21T09:44:33+00:00</updated><id>https://040code.github.io//</id><title type="html">040 Code</title><subtitle>A developers blog</subtitle><entry><title type="html">Full Stack Fest 2018</title><link href="https://040code.github.io//2018/09/18/fsf-frontend/" rel="alternate" type="text/html" title="Full Stack Fest 2018" /><published>2018-09-18T00:00:00+00:00</published><updated>2018-09-18T00:00:00+00:00</updated><id>https://040code.github.io//2018/09/18/fsf-frontend</id><content type="html" xml:base="https://040code.github.io//2018/09/18/fsf-frontend/">&lt;h1 id=&quot;full-stack-fest-2018&quot;&gt;Full Stack Fest 2018&lt;/h1&gt;

&lt;p&gt;This week we (Jeroen, Niek, Gertjan, Eric and Kike) are enjoying &lt;a href=&quot;https://2018.fullstackfest.com/&quot;&gt;Full Stack Fest 2018 Barcelona&lt;/a&gt;,
a week-long full stack development conference with a focus on solving current problems with new &amp;amp; inspiring perspectives.&lt;/p&gt;

&lt;p&gt;This conference is split up in two parts. The first two days were focussed on Backend development. You can read our post about it &lt;a href=&quot;https://040code.github.io/2018/09/05/fsf-backend/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this quite short blog we just summarizing briefly the talks for the second part, the front-end part. It’s  &lt;strong&gt;our opinion&lt;/strong&gt; about the talks. We have rated all talks, the rating is subjective as well.&lt;/p&gt;

&lt;p&gt;First of all we would like to thank &lt;a href=&quot;https://twitter.com/raganwald&quot;&gt;Reginald Braithwaite&lt;/a&gt; for hosting the sessions.&lt;/p&gt;

&lt;h2 id=&quot;day-one&quot;&gt;Day one&lt;/h2&gt;

&lt;h3 id=&quot;building-peer-to-peer-apps-with-the-beaker-browser&quot;&gt;Building peer-to-peer apps with the Beaker Browser&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;dat://taravancil.com/about/&quot;&gt;Tara Vancil&lt;/a&gt;, during the backend days we already are informed about the lack of freedom is our social networks, and how this could be solved with decentralized social networks. Tara showed that the web has the same problem. Do you remember Geocities? Yepz these sites are gone. And deploying or customizing web apps is still hard. Would it not be great we can fix it just in the browser the app we loved the most. Tara showed how easy you can run, customize and deploy a decentralized web app.&lt;/p&gt;

&lt;h3 id=&quot;to-push-or-not-to-push---the-future-of-http2-server-push&quot;&gt;To push, or not to push?! - The future of HTTP/2 server push&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Patrick Hamann &lt;a href=&quot;https://twitter.com/patrickhamann&quot;&gt;@patrickhamann&lt;/a&gt;, resource loading is still hard, performance in the browser is tightly coupled to latency, connection costs are high, and scipt execution is expensive. Patrick explained how to use resources wisely, make a difference between critical resources. resources in the users viewport, and non critical resources. By using preload, push and async push together with a strategy of critical resource a hugh step can be made for a high performing web app. See the slides &lt;a href=&quot;https://noti.st/patrickhamann/9GvEed/to-push-or-not-to-push&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-future-of-front-end-performance&quot;&gt;The Future of Front-End Performance&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/thegreengreek&quot;&gt;Sia Karamalegos&lt;/a&gt;, a great talk on performance of the front-end. How much impact does it has on your business. Staggering numbers were shown about AliExpress load time reducing and how that correlates to an increase conversion for new customers.
Apps become bigger and bigger. Make sure you check your apps on size / speed by using tools like &lt;a href=&quot;https://webpagetest.org&quot;&gt;webpagetest.org&lt;/a&gt;. Optimize your images. Most of the web are images, but the most expensive bytes are javascript. Prioritize the code your shipping.
&lt;a href=&quot;https://speakerdeck.com/siakaramalegos/the-future-of-front-end-performance&quot;&gt;Slides&lt;/a&gt; and &lt;a href=&quot;https://github.com/siakaramalegos/sia_speaks&quot;&gt;more info&lt;/a&gt; are available.&lt;/p&gt;

&lt;h3 id=&quot;native-javascript-modules--import-browsers-nodejs-export-production&quot;&gt;Native JavaScript modules- import {Browsers, NodeJs}; export {production};&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/malyw&quot;&gt;Serg Hospodarets&lt;/a&gt;, great news for modern JavaScript development. Most browsers now support Native JavaScript modules ESM. This will change our way we are bundling our JavaScript using Webpack, Rollup and other bundlers. It’s also available in node and the extensions is called Micheal Jackson Solution aka .mjs
Dynamically loading javascript modules in combination with HTTP/2 can save a lot of load time.
&lt;a href=&quot;https://slides.com/malyw/native-js-modules&quot;&gt;Simular slides&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;unity--html5--isomorphic-game-engine&quot;&gt;Unity + HTML5 = Isomorphic Game Engine?&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Lerenzo Malcom &lt;a href=&quot;https://twitter.com/lerenzom&quot;&gt;@lerenzom&lt;/a&gt;, showed how to combine the world of Unity and the browser. Last year A-Frame was a big topic that address the same solution space but Lerenzo showed how to combine Unity in the browser instead of A-Frame. After discussing why unity and not A-Fram he spend attention how to setup bi-directional messaging, and finally gives some WebGL examples. Sorry we are not that AR/VR boys but with this talk Lerenzo did an awesome job, please see the slides (including animations) &lt;a href=&quot;https://docs.google.com/presentation/d/1LTNFqURDAeDYZTD3cjpZ3XMQoD8rDNm1Z4LEDuKo64o/edit&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;state-of-the-art-web-user-interfaces-with-state-machines&quot;&gt;State of the Art Web User Interfaces with State Machines&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;David Khourshid (&lt;a href=&quot;https://twitter.com/davidkpiano&quot;&gt;@davidkpiano&lt;/a&gt;), the front end is complex, it is difficult to understand, difficult to read, contain bugs, hard to enhance and new features make it even worse. What if we model our front end as an finite state machine (FSM). Nothing new in Computer Science, states machines are already introduces in “automata theory”, Specifying a the front end action (flow) in a state machine increase the predictability and even make it possible to automate testing. Just calculate you the shortest path via Dijkstra algorithm. David showed his open source framework xstate which is available on &lt;a href=&quot;https://github.com/davidkpiano/xstate#readme&quot;&gt;GitHub&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/xstate&quot;&gt;npm&lt;/a&gt;. Slides are are &lt;a href=&quot;https://slides.com/davidkhourshid/statecharts-fsf&quot;&gt;here&lt;/a&gt; available&lt;/p&gt;

&lt;h3 id=&quot;a-front-end-devs-hobbyist-approach-into-machine-learning&quot;&gt;A Front-end dev’s hobbyist approach into Machine Learning&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/studioswong&quot;&gt;Susanna Wong&lt;/a&gt;, machine Learning is hard. It’s almost impossible to explain this in just one talk. Especially when you combine it with all kind of background information. We were very impressed by the architecture of the buildings, but unfortunately the talk was too much out of our reach.&lt;/p&gt;

&lt;h3 id=&quot;building-a-modern-memex&quot;&gt;Building a Modern Memex&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Andrew Louis &lt;a href=&quot;https://twitter.com/hyfen&quot;&gt;@hyfen&lt;/a&gt;, Imagine you can manage all your data with a single device…. An idea that goes back to the 1945 when Vanneva Bush discribed the &lt;a href=&quot;https://en.wikipedia.org/wiki/Memex&quot;&gt;Memex&lt;/a&gt;. Andrew build his own Memex and demo the awesome combination fo all the data he collected over the years. Absolutely crazy to see that he is able to search back in time which podcast he was listing when driving from A to B. To be able to combine all your data from Google, Spotifiy, Maps, Whatsapp and so on, probably you need a complex system. But Andrew handles it all just with Rails, Ember, Electron, Node and Postgres. And how cool it is all &lt;a href=&quot;https://hyfen.net/memex/&quot;&gt;open source&lt;/a&gt;. &lt;a href=&quot;https://speakerdeck.com/hyfen/building-a-modern-memex&quot;&gt;Slides&lt;/a&gt; are here.&lt;/p&gt;

&lt;h3 id=&quot;everything-in-sketchnotes&quot;&gt;Everything in sketchnotes..&lt;/h3&gt;
&lt;p&gt;A big shoutout to Christin Westermann (&lt;a href=&quot;https://twitter.com/_c16n_&quot;&gt;@&lt;em&gt;c16n&lt;/em&gt;&lt;/a&gt;) for creating these sketchnotes!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-09_fullstackfest/fullstackfest-2018-05.jpg&quot; alt=&quot;fullstackfest-2018-05&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-09_fullstackfest/fullstackfest-2018-06.jpg&quot; alt=&quot;fullstackfest-2018-06&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-2&quot;&gt;Day 2&lt;/h2&gt;

&lt;h3 id=&quot;accessibility-vs-latest-web-apis-cant-we-just-get-along&quot;&gt;Accessibility vs latest Web APIs. Can’t we just get along?&lt;/h3&gt;
&lt;p&gt;rating: :star: :star:&lt;/p&gt;

&lt;p&gt;Mauricio Palma (&lt;a href=&quot;https://twitter.com/palmaswell&quot;&gt;@palmaswell&lt;/a&gt;) showed pasionated how important it is to make the web accessible for everyone, also for the ones with a disability. For example, he show cased how to use the Google speech API. A quote to remember from Maricio: “If we use our own abilities as a baseline, we make things that are easy for some people to use, but difficult for everyone.”&lt;/p&gt;

&lt;h3 id=&quot;the-web-authentication-api---imagine-a-world-without-passwords&quot;&gt;The Web Authentication API - Imagine a World Without Passwords&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;By Suby Raman (&lt;a href=&quot;https://twitter.com/@subyraman&quot;&gt;@subyraman&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Passwords were invented for a good reason. The world has changed and unfortunately, passwords are not sufficiently secure enough anymore. There are a lot of problems attached to the concept of passwords. The Web Authentication API allows us to authenticate our users using public key cryptography. This prevents malicious users to gain access to your data even if they have the public key. Modern computers have dedicated hardware to perform authentication, like touchID, faceID, camera’s, usb-tokens. This can now be used in our webapplications. This is very much in line with what we are want to achieve in our own &lt;a href=&quot;https://github.com/philips-software/cogito&quot;&gt;project&lt;/a&gt;. &lt;a href=&quot;https://bit.ly/suby-fsf&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;killing-the-checkout-or-how-i-learned-to-stop-worrying-and-love-payment-request&quot;&gt;Killing the checkout or: How I learned to stop worrying and love Payment Request&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;As member of the W3C Web Payments Working Group, Krystian Czesak (&lt;a href=&quot;https://www.twitter.com/@krystostrerone&quot;&gt;@krystostrerone&lt;/a&gt;), is heavily involved in setting a web standard on Payment Requests. The Response code 402 Payment Required is already there for a long time, but is never implemented. Lots of attempts are made, but none of them succeeded till now.. Currently the checkout procedure on most applications is not so user friendly. The Web Payments is initiated to improve this user experience. All modern browsers support it. All information about you is stored in your browser and not on each page. There’s an API available to use that information, so the user only has to add the information once and it can be used in every application. Chrome even supports Interledger. The presentation has a lot of information how to implement a client for this. See the slides for more info. &lt;a href=&quot;https://speakerdeck.com/krystosterone/killing-the-checkout-or-how-i-learned-to-stop-worrying-and-love-payment-request&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-real-world-pwa&quot;&gt;A Real World PWA&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Zack Argyle, &lt;a href=&quot;https://twitter.com/ZackArgyle&quot;&gt;@ZackArgyle&lt;/a&gt; stared with the story of Pinterest and what will happen with your uses once you decide to make a blocking page and only support a app. Smoothly continuing with the story how important it is to have a reactive app and what that means. A progressive web app is according to Zack: “A site that utilizes progressive enhancements, meaning that modern browsers will get a better experience than older browsers”. He explained how he used the principle of the 3R’s to build a progressive app. By Reduce, make it light. Use for example &lt;a href=&quot;https://www.npmjs.com/package/webpack-bundle-analyzer&quot;&gt;the webpack analyzer&lt;/a&gt;. Reuse, caching, server workers. Cache via a worker is faster then the browser cache. And Review, measure performance! Slides are available &lt;a href=&quot;https://speakerdeck.com/zackargyle/a-real-world-pwa&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;purifying-typescript&quot;&gt;Purifying Typescript&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Timothy Clifford, &lt;a href=&quot;https://twitter.com/timothyclifford&quot;&gt;@timothyclifford&lt;/a&gt;. Cool to see that we can do functional programming with JavaScript a language written in 10 days back in 1995 an nowadays the most populair language. We really liked the talk and clear examples how to program functional with TypeScript in JavaScript. Maybe the talk was little to much basic introduction to functional programming, but Timothy succeeds in his mission statement: “Understand how to apply functional programming techniques with TypeScript”. &lt;a href=&quot;https://github.com/timothyclifford/purifying-typescript/raw/master/Functional%20Typescript%20-%20Tim%20Clifford.pdf&quot;&gt;Slides&lt;/a&gt; and &lt;a href=&quot;https://github.com/timothyclifford/purifying-typescript&quot;&gt;code&lt;/a&gt; are shared via GitHub.&lt;/p&gt;

&lt;h3 id=&quot;dynamic-css-layouts--beyond&quot;&gt;Dynamic CSS: Layouts &amp;amp; Beyond&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;This talk by -Tara Vancil-, I mean Miriam Suzanne (&lt;a href=&quot;https://twitter.com/mirisuzanne&quot;&gt;@mirisuzanne&lt;/a&gt;), was really fantastic. She integrated lots of photos from previous talks on the same day. But not only that was remarkable. The knowledge on CSS is outstanding. She showed us the history of how we used to do CSS, from tables to SASS, to flexbox and Houdini. But all of these methods needed some wicked tricks to work in some cases. Now there is something new and this is promising. CSS Grid. This is the future of layouts, so take a look at this. In the slides you will see several examples of how to use it. F.e. &lt;a href=&quot;https://gridbyexample.com/&quot;&gt;https://gridbyexample.com/&lt;/a&gt; and the the  &lt;a href=&quot;http://talks.oddbird.net/dynamic-css/fullstack18/&quot;&gt;Slides&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;lightning-talks&quot;&gt;Lightning talks&lt;/h3&gt;

&lt;p&gt;1
first one: @EleanorClarinet
Nice corrolation between learning music and learning to code.
Don’t be a “Mozart pianist”, be a musician
Don’t be a “React developer”, be an engineer&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1Al7AUbzCwFW7qxi69DiWcpxbcKQOV29uxUDrbnhJD6c&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2
Isac. Rocket fuel for Ember.js and javascript teams.
Splanky about jazz shows in Smalls NYC.&lt;/p&gt;

&lt;p&gt;3
2013 it was already possible to do a lot of reactive stuff with imba.io&lt;/p&gt;

&lt;p&gt;4
Robert Nickel about Mob Programming.
We love Mob Programming, but it’s hard. See &lt;a href=&quot;https://docs.google.com/presentation/d/1HwfNfWzRSPMSIrTi41yRaRPme3xdI6dD18vwxi2kfJo/edit#slide=id.g40d1a107b1_0_138&quot;&gt;slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5
Andreaverlicchie.eu
Better navigation in markup&lt;/p&gt;

&lt;p&gt;6
Berkay –&amp;gt; Sharing
How to share components between multiple react projects&lt;/p&gt;

&lt;h3 id=&quot;webxr-if-x--how&quot;&gt;WebXR, if X = how?&lt;/h3&gt;
&lt;p&gt;rating: :star: :star:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/diekus&quot;&gt;Diego González&lt;/a&gt; and Indira Knight introduced Extended reality, XR or should we say AR + VR in the browser. Physical and virtual worlds are merging, XR is coming to the browser, and the browser is coming to XR devices. The frameworks ((A-Frame &amp;amp;&amp;amp; ThreeJS) || BabylonJS) &amp;amp;&amp;amp; WebGl where demoed in the browser, both in a 2d and 3d view. For more details see the &lt;a href=&quot;https://www.slideshare.net/DiegoGonzlezZiga/webxr-if-x-how&quot;&gt;slides&lt;/a&gt; for more references.&lt;/p&gt;

&lt;h2 id=&quot;thanks-to-codegram&quot;&gt;Thanks to Codegram&lt;/h2&gt;

&lt;p&gt;We would like to conclude our post with a big applause for &lt;a href=&quot;https://www.codegram.com/&quot;&gt;codegram&lt;/a&gt;, the Full Stack Fest was awesome again. Please never change the single track philosophy. And did we already mentioned the food is the best we ever had on a conference.&lt;/p&gt;

&lt;div style=&quot;position:relative; width:100%; height:0px; padding-bottom:56.25%;&quot;&gt;
    &lt;iframe style=&quot;position:absolute; left:0; top:0; width:100%; height:100%&quot; src=&quot;https://www.youtube.com/embed/YIRvXmJyRxQ?list=PLe9psSNJBf75O6abYvvjxhm36_QU9H-f2?rel=0&quot; frameborder=&quot;0&quot; allow=&quot;encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jeroen&quot;, &quot;last_name&quot;=&gt;&quot;Knoops&quot;, &quot;github&quot;=&gt;&quot;JeroenKnoops&quot;, &quot;twitter&quot;=&gt;&quot;johnnybusca&quot;, &quot;linkedin&quot;=&gt;&quot;jeroenknoops&quot;, &quot;permalink&quot;=&gt;&quot;/author/jeroen/&quot;, &quot;header-img&quot;=&gt;&quot;img/vanmoll.jpg&quot;, &quot;avatar&quot;=&gt;&quot;jeroen.png&quot;, &quot;email&quot;=&gt;&quot;jeroen.knoops@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;Jeroen Knoops is a full stack developer. He has worked in corporate environments for many years. He also had the pleasure to work for a small tech startup. All of his work is driven by innovation.\n\n Some keywords: Akai MPC, Urfaust, Richard Dawkins, Zed Shaw, TB-303, Erik Satie, Kapsalon, The Apemen, Piano, Hans Rosling, Haus Arafna, Apple ][, BRNS, Ravi Shankar, Lego geen playmobil, TR-909, Netflix, Tuscany, Kraftwerk, Quadrupel, Frikandel Speciaal, avdi, Moonlizards, Sandi Metz, Pixies, Strijp, Henrik Kniberg, Hazes, Public Enemy, Tesla, Funkmaster Flex, Hakan Forss, Bruce Willis, GitHub, Tony Touch, Hef, Mobb Deep, Funkdoobiest, good food, Noah's ark, Turing, Sugababes, VPRO's DutchMasters, Drums, Jet Li, Craft Beers, Synths, Bowling, La Musica della Mafia, UDS, Unsequenced, Christopher Hitchens, Slapshot en David Anderson.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-09-06-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-08-fsf-fontend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-10-01-micro-hack-zappa-io.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-08-08-brew-some-code.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-09-04-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-09-18-fsf-frontend.md collection=posts&gt;]}</name><email>jeroen.knoops@gmail.com</email></author><category term="fullstack" /><summary type="html">Full Stack Fest 2018</summary></entry><entry><title type="html">Full Stack Fest 2018</title><link href="https://040code.github.io//2018/09/05/fsf-backend/" rel="alternate" type="text/html" title="Full Stack Fest 2018" /><published>2018-09-05T00:00:00+00:00</published><updated>2018-09-05T00:00:00+00:00</updated><id>https://040code.github.io//2018/09/05/fsf-backend</id><content type="html" xml:base="https://040code.github.io//2018/09/05/fsf-backend/">&lt;h1 id=&quot;full-stack-fest-2018&quot;&gt;Full Stack Fest 2018&lt;/h1&gt;

&lt;p&gt;This week we (Jeroen, Niek, Gertjan, Eric and Kike) are enjoying &lt;a href=&quot;https://2018.fullstackfest.com/&quot;&gt;Full Stack Fest 2018 Barcelona&lt;/a&gt;,
a week-long full stack development conference with a focus on solving current problems with new &amp;amp; inspiring perspectives.&lt;/p&gt;

&lt;p&gt;In this quite short blog we just summarizing briefly the talks and &lt;strong&gt;our opinion&lt;/strong&gt; about the talks. We have rated all talks, the rating is subjective as well.&lt;/p&gt;

&lt;p&gt;This conference is split up in two parts. The first two days were focussed on Frontend development. You can read our post about it &lt;a href=&quot;https://040code.github.io/2018/09/18/fsf-frontend/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all we would like to thank &lt;a href=&quot;https://twitter.com/xbill82&quot;&gt;Luca Marchesini&lt;/a&gt; for hosting the sessions.&lt;/p&gt;

&lt;h2 id=&quot;day-one&quot;&gt;Day one&lt;/h2&gt;

&lt;h3 id=&quot;reinvent-the-social-web&quot;&gt;Reinvent the social web&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;André Staltz (&lt;a href=&quot;https://twitter.com/andrestaltz&quot;&gt;@andrestaltz&lt;/a&gt;) explained the problems we have with the current generation of social networks. Are the realy open, free, innovative? Can we trust and respect people in the network. He explained passionated how we can change the future with decentralized networks such as &lt;a href=&quot;https://www.scuttlebutt.nz/&quot;&gt;scuttlebutt&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;open-gateway---decentralized-iot&quot;&gt;Open Gateway - Decentralized IoT&lt;/h3&gt;
&lt;p&gt;Rating:&lt;/p&gt;

&lt;p&gt;Kalyan Dikshit (&lt;a href=&quot;https://twitter.com/decode_dev&quot;&gt;@decode_dev&lt;/a&gt;) presents about the open gateway initiative from Mozilla. Not our topic.&lt;/p&gt;

&lt;h3 id=&quot;build-and-deploy-a-blockchain-web-app-with-hyperledger-fabric-and-hyperledger-composer&quot;&gt;Build and deploy a Blockchain web-app with Hyperledger Fabric and Hyperledger Composer&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Hyperledger is something we’re looking into right now, so this talk was very relevant. Horea Porutiu (&lt;a href=&quot;https://twitter.com/horeaporutiu&quot;&gt;@horeaporutiu&lt;/a&gt;) showed the basic things about hyperledger and that’s great for this audience. Great balance between technical information, examples and real applications of the chain. Their work with &lt;a href=&quot;https://www.brooklynroasting.com/&quot;&gt;Brooklyn Roasting Company&lt;/a&gt; was a good example how to use the blockchain. It shows an audit trail on your coffee.&lt;/p&gt;

&lt;h3 id=&quot;a-game-of-theories-why-languages-do-what-they-do&quot;&gt;A Game of Theories: Why languages do what they do&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Rae Krantz (&lt;a href=&quot;https://twitter.com/rustbeltrae&quot;&gt;@rustbeltrae&lt;/a&gt;) quickly compared the ugly and beauty of Ruby, Python, Go, Clojure, JavaScript, Erlang, Rust and Elixir. Yeah we never will do Clojure and from tomorrow we only do Rust and Elixir. Awesome session. Best quote of the day: “JavaScript was written in the time of Netscape when Java was popular.” :)&lt;/p&gt;

&lt;h3 id=&quot;the-future-of-chatbots-in-the-travel-industry&quot;&gt;The Future of ChatBots in the Travel Industry&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Prabh Simran Singh Baweja&lt;/p&gt;

&lt;p&gt;Designing a chatbot is not that easy as it sounds. “Book me a hotel for this weekend.” What kind of hotel? Where? Weekend, is it friday and saturnday or is it saturday and sunday? How to combine data in a good way so people are not annoyed. Nice insights on how bookings.com is building these bots.
Look at &lt;a href=&quot;https://speakerdeck.com/prabh27/the-future-of-chatbots-in-the-travel-industry&quot;&gt;his slides&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;avoiding-digital-bias&quot;&gt;Avoiding Digital Bias&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Adam L Smith (&lt;a href=&quot;https://twitter.com/adamleonsmith&quot;&gt;@adamleonsmith&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;In modern worlds we use large datasets to tune our models. This is not without danger. Our datasets are often biased. Good tips on how to test if the models are digitally bias, by changing some of the fields like gender. Never use stock images. Nice example was shown if you google on CTO. This is not a good representation of the world. Enough food for thoughts!&lt;/p&gt;

&lt;h3 id=&quot;everything-i-always-wanted-to-know-about-crypto-but-never-thought-id-understand&quot;&gt;Everything I always wanted to know about crypto, but never thought I’d understand&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Sasha Romijn (&lt;a href=&quot;https://twitter.com/mxsash&quot;&gt;@mxsash&lt;/a&gt;) gave a fast introduction to cryptographic basic concepts that every developer should know. Quote: “Export in cypher builder should ring an alarm bell”
A good overview of the magical world of Crypto. If you want to learn more about this, I would certainly recommend a free &lt;a href=&quot;https://www.coursera.org/learn/crypto&quot;&gt;coursera course on this topic&lt;/a&gt; given by Dan Boneh.&lt;/p&gt;

&lt;h3 id=&quot;onion-adventures-how-to-use-onion-services-and-the-tor-network-in-your-web-endeavors&quot;&gt;Onion adventures: how to use onion services and the Tor network in your web endeavors&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Respect for Silvia Puglisi (&lt;a href=&quot;https://twitter.com/nopressure&quot;&gt;@nopressure&lt;/a&gt;) for giving this talk when she has the flu. Very good to see all the activity around Tor. Important to keep on bringing the message it’s not that obvious to have freedom of speech and expression. /me installing TOR.&lt;/p&gt;

&lt;h3 id=&quot;everything-in-sketchnotes&quot;&gt;Everything in sketchnotes..&lt;/h3&gt;
&lt;p&gt;A big shoutout to Christin Westermann (&lt;a href=&quot;https://twitter.com/_c16n_&quot;&gt;@&lt;em&gt;c16n&lt;/em&gt;&lt;/a&gt;) for creating these sketchnotes!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-09_fullstackfest/fullstackfest-2018-01.jpg&quot; alt=&quot;fullstackfest-2018-01&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-09_fullstackfest/fullstackfest-2018-02.jpg&quot; alt=&quot;fullstackfest-2018-02&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-2&quot;&gt;Day 2&lt;/h2&gt;

&lt;h3 id=&quot;observability-for-emerging-infra-what-got-you-here-wont-get-you-there&quot;&gt;Observability for Emerging Infra: What Got You Here Won’t Get You There&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Charity Majors (&lt;a href=&quot;@https://twitter.com/mipsytipsy&quot;&gt;@mipsytipsy&lt;/a&gt;) gave a very good talk on how to look at current systems. In the current era, you cannot simply say: “Our application is up..” What does that mean? What’s up? Move away from the known-unknowns which can be monitored with dashboards, but look at the real problems users experience. Focus on the unknown-unknowns and make sure you can react and analyse your applications fast. Don’t aggregate data, because you will lose important details about problems. Come up with good sampling strategies. Build observability in from day one! Cool shirt, “I test in prod”. Quote: “What is unknown, we must leave uncoded.”&lt;/p&gt;

&lt;h3 id=&quot;do-you-need-a-service-mesh&quot;&gt;Do you need a Service Mesh?&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;A great presentation given by Matt Turner (&lt;a href=&quot;https://twitter.com/mt165pro&quot;&gt;@mt165pro&lt;/a&gt;) about Service Mesh. He demo-ed the principles of Service Mash by using &lt;a href=&quot;https://istio.io/&quot;&gt;istio.io&lt;/a&gt;. He used kubernetes to demo some of the configuration you can setup with only proxy-ing between different services. Very powerful concept. I’m wondering how this can be used in an infrastructure-as-code architecture.&lt;/p&gt;

&lt;h3 id=&quot;http-and-json-for-your-grpc-services&quot;&gt;HTTP and JSON for your gRPC Services&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Michael Hamrah (&lt;a href=&quot;https://twitter.com/mhamrah&quot;&gt;@mhamrah&lt;/a&gt;) gRPCed all the things. First feeling was Oh no we go to do again CORBA, and there are similairities between gRPC and CORBA. In this talk Michael explained how you can build high performance application and left the all the plumbing code to the gRPC framweork. Just simply define an interface via IDL and only take care of the real business code. It was also nice to see how you can combine gRPC via &lt;a href=&quot;https://github.com/google/rejoiner&quot;&gt;rejoiner&lt;/a&gt; with GraphQL. Slides are available &lt;a href=&quot;https://speakerdeck.com/mhamrah/grpc-all-the-things&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;software-engineering---a-philosophical-activity&quot;&gt;Software Engineering - A philosophical activity&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Tom Enden (&lt;a href=&quot;https://twitter.com/tom_enden&quot;&gt;@tom_enden&lt;/a&gt;): Did you know that Plato invented OOP and the Prototype pattern is inspired by Nominalism which also dates back to Plato. Tom showed the parallels between philosophy and software engineering. According the pragmatic programmer we should learn at least one language every year. Since different languages solved things in different ways. And Tractatus says the limits of my language means the limit of the world. So looking on philosophy we can inspire our selves for new ideas. &lt;a href=&quot;https://www.slideshare.net/TomEnden/software-engineering-as-a-philosophical-activity&quot;&gt;The slides&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;take-a-client-hint&quot;&gt;Take a (Client) Hint!&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Jeremy Wagner (&lt;a href=&quot;https://twitter.com/malchata&quot;&gt;@malchata&lt;/a&gt;) explained nicely the power of client hints. Having a fast internet and reliable internet connection is still not common. For example a survey by Pew Research shows that one-third of American adults do not subscribe to any internet access faster than dial-up at their home. So building responsive clients on slow or unreliable networks still counts. Client hints comes in different types. By opting in (header &lt;code class=&quot;highlighter-rouge&quot;&gt;ACCEPT-CH&lt;/code&gt;) a client can inform that it understands client hints, Device hints enables for example responsive images and netwrok hints can inform the server about the speed of the network of the client. The slides are &lt;a href=&quot;https://jlwagner.net/talks/take-a-client-hint/&quot;&gt;here&lt;/a&gt; available.&lt;/p&gt;

&lt;h3 id=&quot;lost-in-transaction-strategies-to-deal-with-in-consistency-in-distributed-systems&quot;&gt;Lost in transaction? Strategies to deal with (in-)consistency in distributed systems&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Bernd Rücker (&lt;a href=&quot;https://twitter.com/berndruecker&quot;&gt;@berndruecker&lt;/a&gt;) is a (work-)flow automation enthusiast. He explained the strategies to deal with the temporary inconsistency and how you can convert it to consistency again using the starbucks as example. One can use different approaches to it. Chorography vs orchestration.
These kind of problems can be solved by using a BPMN product like Camunda. System become complexer every day and this will become a bigger problem everyday. And what should we never forget: Zucchini and idempotency.&lt;/p&gt;

&lt;p&gt;This talk triggered a lot of thoughts for me personally. This is one of the areas where blockchain might actually solve things. Use smartcontracts to atomically commit transactions all at the same time. Fortunately he already wrote a blog post about the topic. Great speaker!
&lt;a href=&quot;https://blog.bernd-ruecker.com/&quot;&gt;Bernd Ruecker’s blog&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;lightning-talks&quot;&gt;Lightning talks&lt;/h3&gt;
&lt;p&gt;Antiona Librada (&lt;a href=&quot;https://twitter.com/antoniolibrada&quot;&gt;@antoniolibrada&lt;/a&gt;) showed us how he improved a complex ci build pipeline which took &amp;gt; 45 minutes to run by using 2 lambdas and Amazon Code Build. The outcome was a more stable, cheaper and faster build pipeline. They increased the number of daily deployments drastically.&lt;/p&gt;

&lt;p&gt;Peter van der Meulen (&lt;a href=&quot;https://twitter.com/HendrikPetertje&quot;&gt;@HendrikPetertje&lt;/a&gt;) showed us his terminal. This shows again how important improving your daily workflow is. Some highights: Spotify in Vim, thefuck, circleci-cli, wee-slack. For more info: &lt;a href=&quot;https://git.picodevelopment.nl/explore/snippets&quot;&gt;snippets&lt;/a&gt; and &lt;a href=&quot;https://git.picodevelopment.nl/explore/projects&quot;&gt;projects&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aaron Bassett (&lt;a href=&quot;https://twitter.com/aaronbassett&quot;&gt;@aaronbassett&lt;/a&gt;) showed us some amazing (and probably illegal) things about SMS. &lt;a href=&quot;https://speakerdeck.com/aaronbassett/stupid-and-possibly-illegal-stuff-you-can-do-with-sms-but-probably-shouldnt&quot;&gt;Here&lt;/a&gt; you can find his slides. Really scary.&lt;/p&gt;

&lt;p&gt;Two nice talks on our power as developers to shape the world. Let’s do this right this time.&lt;/p&gt;

&lt;h3 id=&quot;cats-the-musical-algorithmic-song-meow-ification&quot;&gt;Cats, The Musical! Algorithmic Song Meow-ification&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Awesome to see how Beth Haubert (&lt;a href=&quot;https://twitter.com/haubertdashery&quot;&gt;@haubertdashery&lt;/a&gt;) passionated hacked her way around to generated a cat meow song from songs using ruby. It was really fun to see, how the program evolved! Especially because at the end, the result was really terrible..&lt;/p&gt;

&lt;h3 id=&quot;everything-in-sketchnotes-1&quot;&gt;Everything in sketchnotes..&lt;/h3&gt;

&lt;p&gt;A big shoutout to Christin Westermann &lt;a href=&quot;https://twitter.com/_c16n_&quot;&gt;@&lt;em&gt;c16n&lt;/em&gt;&lt;/a&gt; for creating these sketchnotes!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-09_fullstackfest/fullstackfest-2018-03.jpg&quot; alt=&quot;fullstackfest-2018-03&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-09_fullstackfest/fullstackfest-2018-04.jpg&quot; alt=&quot;fullstackfest-2018-04&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-09_fullstackfest/fullstackfest-2018-05.jpg&quot; alt=&quot;fullstackfest-2018-05&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jeroen&quot;, &quot;last_name&quot;=&gt;&quot;Knoops&quot;, &quot;github&quot;=&gt;&quot;JeroenKnoops&quot;, &quot;twitter&quot;=&gt;&quot;johnnybusca&quot;, &quot;linkedin&quot;=&gt;&quot;jeroenknoops&quot;, &quot;permalink&quot;=&gt;&quot;/author/jeroen/&quot;, &quot;header-img&quot;=&gt;&quot;img/vanmoll.jpg&quot;, &quot;avatar&quot;=&gt;&quot;jeroen.png&quot;, &quot;email&quot;=&gt;&quot;jeroen.knoops@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;Jeroen Knoops is a full stack developer. He has worked in corporate environments for many years. He also had the pleasure to work for a small tech startup. All of his work is driven by innovation.\n\n Some keywords: Akai MPC, Urfaust, Richard Dawkins, Zed Shaw, TB-303, Erik Satie, Kapsalon, The Apemen, Piano, Hans Rosling, Haus Arafna, Apple ][, BRNS, Ravi Shankar, Lego geen playmobil, TR-909, Netflix, Tuscany, Kraftwerk, Quadrupel, Frikandel Speciaal, avdi, Moonlizards, Sandi Metz, Pixies, Strijp, Henrik Kniberg, Hazes, Public Enemy, Tesla, Funkmaster Flex, Hakan Forss, Bruce Willis, GitHub, Tony Touch, Hef, Mobb Deep, Funkdoobiest, good food, Noah's ark, Turing, Sugababes, VPRO's DutchMasters, Drums, Jet Li, Craft Beers, Synths, Bowling, La Musica della Mafia, UDS, Unsequenced, Christopher Hitchens, Slapshot en David Anderson.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-09-06-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-08-fsf-fontend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-10-01-micro-hack-zappa-io.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-08-08-brew-some-code.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-09-04-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-09-18-fsf-frontend.md collection=posts&gt;]}</name><email>jeroen.knoops@gmail.com</email></author><category term="iot" /><category term="cloud" /><category term="fullstack" /><category term="microservices" /><category term="security" /><summary type="html">Full Stack Fest 2018</summary></entry><entry><title type="html">Maze Generation</title><link href="https://040code.github.io//2018/08/22/mazes/" rel="alternate" type="text/html" title="Maze Generation" /><published>2018-08-22T00:00:00+00:00</published><updated>2018-08-22T00:00:00+00:00</updated><id>https://040code.github.io//2018/08/22/mazes</id><content type="html" xml:base="https://040code.github.io//2018/08/22/mazes/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;During my summer holiday, in between long walks and nice food &amp;amp; drinks, I felt
like writing some code for fun. Unfortunately, I didn’t bring my laptop.
Luckily, &lt;a href=&quot;https://twitter.com/mfikes&quot;&gt;Mike Fikes&lt;/a&gt; created a &lt;a href=&quot;https://itunes.apple.com/us/app/replete/id1013465639&quot;&gt;ClojureScript REPL
for mobile devices&lt;/a&gt; to
write some Clojure(script) without a laptop close at hand.&lt;/p&gt;

&lt;p&gt;A REPL, or a Read Eval Print Loop, reads your input, evaluates it, prints the
result and waits for new inputs to read. In the meantime, the code you wrote
lives in REPL memory. So if I define a function in the REPL, it will be read and
evaluated and in my next input I can call this function, because it lives in
REPL space.&lt;/p&gt;

&lt;p&gt;So, back to this REPL on my phone. Permanently saving work is not possible in
this REPL, there are no debugging capabilities, no code completion, no test
runners … just a REPL: 35 characters wide in portrait mode, 79 characters wide
in landscape mode. To give you an idea of my ‘Integrated Development
Environment’ and the resulting mazes, I recorded a 30 seconds screen cast:&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/286153487&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;At home, I created a gist containing all 70 lines of &lt;a href=&quot;https://gist.github.com/mmzsource/ee88b93a3829f98fcb6188f2f2162fcf&quot;&gt;maze
code&lt;/a&gt; (56
lines according to the command-line tool cloc). In this blog I’m going to explain
the concepts and code.&lt;/p&gt;

&lt;h2 id=&quot;grids-cells-and-neighbours&quot;&gt;Grids, Cells and Neighbours&lt;/h2&gt;

&lt;p&gt;First of all, we’ll need a grid and a coordinate system to point to individual
cells in the grid. The reason is that most maze generators expect to be able to
traverse a grid and lookup information about cells and neighbours of cells.&lt;/p&gt;

&lt;p&gt;A grid can be modeled as a vector of vectors, representing rows and columns:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(def grid
  [[1 2 3]
   [4 5 6]
   [7 8 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A cell can be pinpointed by its [row col] coordinate which matches perfectly
with the &lt;code class=&quot;highlighter-rouge&quot;&gt;get-in&lt;/code&gt; function in clojure. This &lt;code class=&quot;highlighter-rouge&quot;&gt;get-in&lt;/code&gt; function is used to find
items in nested data structures. For instance, &lt;code class=&quot;highlighter-rouge&quot;&gt;(get-in grid [2 1])&lt;/code&gt; will result
in the value &lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To find the neighbours of a cell, I created a couple of helper functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn north-of [[row col]] [(dec row) col])
(defn south-of [[row col]] [(inc row) col])
(defn west-of  [[row col]] [row (dec col)])
(defn east-of  [[row col]] [row (inc col)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function argument is destructured (taken apart and named) and the
&lt;code class=&quot;highlighter-rouge&quot;&gt;north-of&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;south-of&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;west-of&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;east-of&lt;/code&gt; neighbour coordinate is
calculated by &lt;code class=&quot;highlighter-rouge&quot;&gt;inc&lt;/code&gt;rementing or &lt;code class=&quot;highlighter-rouge&quot;&gt;dec&lt;/code&gt;rementing the row or column number. For
instance, &lt;code class=&quot;highlighter-rouge&quot;&gt;(north-of [1 1])&lt;/code&gt; results in the value &lt;code class=&quot;highlighter-rouge&quot;&gt;[0 1]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;juxt&lt;/code&gt; function we can now calculate all neighbours in one go. &lt;code class=&quot;highlighter-rouge&quot;&gt;juxt&lt;/code&gt;
takes a variable number of functions as arguments and returns a new function.
This new function returns a vector containing the result of applying each
function to the arguments provided. So for instance &lt;code class=&quot;highlighter-rouge&quot;&gt;((juxt north-of south-of
west-of east-of) [1 1])&lt;/code&gt; results in the value &lt;code class=&quot;highlighter-rouge&quot;&gt;[[0 1] [2 1] [1 0] [1 2]]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, these functions don’t care about the grid. &lt;code class=&quot;highlighter-rouge&quot;&gt;((juxt north-of
south-of west-of east-of) [0 0])&lt;/code&gt; will happily return &lt;code class=&quot;highlighter-rouge&quot;&gt;[[-1 0] [1 0] [0 -1] [0
1]]&lt;/code&gt; containing cell coordinates inside AND outside the grid. Therefore, in
order to calculate all neighbours &lt;strong&gt;in&lt;/strong&gt; the grid, we need to filter out the
ones that are not part of the grid. This results in the following &lt;code class=&quot;highlighter-rouge&quot;&gt;neighbours&lt;/code&gt;
function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn neighbours [grid cell]
  (filter #(get-in grid %) ((juxt north-of south-of west-of east-of) cell)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;mazes-and-cells&quot;&gt;Mazes and Cells&lt;/h2&gt;

&lt;p&gt;Now working with the grid is easy, let’s move on to the maze. A maze is
basically a grid, augmented with some information to determine if borders
between cells are open or closed. That information can be easily stored in the
cells themselves.&lt;/p&gt;

&lt;p&gt;I liked the approach &lt;a href=&quot;http://fn-code.blogspot.com/2015/04/a-maze-ing-mazes-with-clojure.html&quot;&gt;Mark
Bastian&lt;/a&gt;
took: in a cell, simply list the coordinates of neighbours the cell is connected
to. We can even list the coordinates in a set &lt;code class=&quot;highlighter-rouge&quot;&gt;#{}&lt;/code&gt;, since duplicating neighbour
coordinates is useless. A 2x2 ‘maze’ with all borders closed looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;[[#{} #{}]
 [#{} #{}]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A 2x2 ‘maze’ with an open border between the 2 cells on the left looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;[[#{[1 0]} #{}]
 [#{[0 0]} #{}]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The two connected cells reference each other. It would be convenient to have a
function that updates the grid when a border needs to be removed between 2
cells:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn remove-border [grid c1 c2]
  (-&amp;gt; grid
      (update-in c1 conj c2)
      (update-in c2 conj c1)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;maze-generation&quot;&gt;Maze Generation&lt;/h2&gt;

&lt;p&gt;Now it’s time for the maze generation. Luckily I had a copy of the &lt;a href=&quot;https://www.amazon.com/Mazes-Programmers-Twisty-Little-Passages/dp/1680500554&quot;&gt;‘Mazes for
Programmers
book’&lt;/a&gt;
on my phone. Because I like the texture of the mazes coming out of the recursive
backtracker algorithm, I decided to implement that one.&lt;/p&gt;

&lt;p&gt;The algorithm can start on any cell on the grid and I decided to start on &lt;code class=&quot;highlighter-rouge&quot;&gt;[0
0]&lt;/code&gt; every single time. Every cell that is visited by the algorithm is pushed on
a stack which I have called the &lt;code class=&quot;highlighter-rouge&quot;&gt;backtrackstack&lt;/code&gt;. The cell on top of the stack
is considered the current cell.&lt;/p&gt;

&lt;p&gt;From the current cell, a path is created (&lt;code class=&quot;highlighter-rouge&quot;&gt;remove-border&lt;/code&gt;) to a randomly
selected, previously unvisited neighbour. An unvisited neighbour can easily be
detected, since it’s simply an empty set &lt;code class=&quot;highlighter-rouge&quot;&gt;#{}&lt;/code&gt;. That previously unvisited cell
(&lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; in my code) is also pushed unto the stack. This process repeats
continuously until a cell is visited that has no unvisited neighbours. At that
point, that dead-end cell is popped of the stack, making the previous cell the
current cell. Again, the algorithm will check if this cell has unvisited
neighbours and will either create a path to that unvisited neighbour or pop
another cell from the &lt;code class=&quot;highlighter-rouge&quot;&gt;backtrackstack&lt;/code&gt;. This will continue until every cell has
been visited and the &lt;code class=&quot;highlighter-rouge&quot;&gt;backtrackstack&lt;/code&gt; is empty.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn find-unvisited-neighbours [grid cell]
  (let [n (neighbours grid cell)]
    (filter #(empty? (get-in grid %)) n)))

(defn generate-maze [rows cols]
  (loop [maze           (create-grid rows cols)
         backtrackstack '([0 0])]
    (if (empty? backtrackstack)
      (print-maze maze)
      (let [unvn (find-unvisited-neighbours maze (first backtrackstack))]
        (if (empty? unvn)
          (recur maze (rest backtrackstack))
          (let [next (rand-nth unvn)]
            (recur
             (remove-border maze (first backtrackstack) next)
             (conj backtrackstack next))))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fingers crossed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt; (generate-maze 4 4)

[[#{[1 0]} #{[0 2]} #{[0 3] [0 1]} #{[1 3] [0 2]}]
 [#{[0 0] [2 0]} #{[2 1] [1 2]} #{[1 1] [1 3]} #{[2 3] [0 3] [1 2]}]
 [#{[1 0] [3 0]} #{[2 2] [1 1]} #{[2 1] [3 2]} #{[3 3] [1 3]}]
 [#{[2 0] [3 1]} #{[3 0] [3 2]} #{[2 2] [3 1]} #{[2 3]}]]

 (generate-maze 4 4)

[[#{[0 1]} #{[0 0] [0 2]} #{[1 2] [0 1]} #{[1 3]}]
 [#{[1 1] [2 0]} #{[1 0] [1 2]} #{[1 1] [0 2]} #{[2 3] [0 3]}]
 [#{[1 0] [2 1]} #{[2 0] [3 1]} #{[2 3]} #{[2 2] [3 3] [1 3]}]
 [#{[3 1]} #{[3 0] [2 1] [3 2]} #{[3 3] [3 1]} #{[2 3] [3 2]}]]

 (generate-maze 6 4)

[[#{[1 0]} #{[0 2]} #{[0 3] [0 1]} #{[1 3] [0 2]}]
 [#{[0 0] [2 0]} #{[2 1] [1 2]} #{[1 1] [1 3]} #{[2 3] [0 3] [1 2]}]
 [#{[1 0] [3 0]} #{[1 1] [3 1]} #{[3 2]} #{[3 3] [1 3]}]
 [#{[2 0] [3 1]} #{[3 0] [2 1]} #{[2 2] [4 2]} #{[4 3] [2 3]}]
 [#{[4 1] [5 0]} #{[4 0]} #{[4 3] [5 2] [3 2]} #{[3 3] [4 2]}]
 [#{[5 1] [4 0]} #{[5 2] [5 0]} #{[4 2] [5 3] [5 1]} #{[5 2]}]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice! Now the only thing left is printing a more human friendly view of this
maze.&lt;/p&gt;

&lt;h2 id=&quot;maze-printing&quot;&gt;Maze Printing&lt;/h2&gt;

&lt;p&gt;First, the top of the maze is printed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ascii&quot;&gt;`+---+---+---+`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, for every row the left border is printed &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; and 2 passes over the cells
have to be made. The first pass determines if there should be a border between
the current cell and its &lt;code class=&quot;highlighter-rouge&quot;&gt;east-of&lt;/code&gt; neighbour, resulting in something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ascii&quot;&gt;+---+---+---+---+
|           |   |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second pass over the row adds a &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; and then determines if there should be a
border between the current cell and its &lt;code class=&quot;highlighter-rouge&quot;&gt;south-of&lt;/code&gt; neighbour, for instance
resulting in this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ascii&quot;&gt;+---+---+---+---+
|           |   |
+---+---+   +   +
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After repeating this for all rows, a maze like this is printed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ascii&quot;&gt;+---+---+---+---+
|           |   |
+---+---+   +   +
|       |       |
+   +   +---+   +
|   |       |   |
+   +---+   +   +
|       |       |
+---+---+---+---+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn east-open-border? [maze cell]
  (contains? (get-in maze (east-of cell)) cell))

(defn south-open-border? [maze cell]
  (contains? (get-in maze (south-of cell)) cell))

(defn print-cell-body [maze cell]
  (if (east-open-border? maze cell)
    &quot;    &quot;
    &quot;   |&quot;))

(defn print-cell-bottom [maze cell]
  (if (south-open-border? maze cell)
    &quot;   +&quot;
    &quot;---+&quot;))

(defn print-maze [maze]
  (let [result (atom [])
        rows   (range (count maze))
        cols   (range (count (get-in maze [0])))]
    (swap! result conj &quot;+&quot; (repeat (count cols) &quot;---+&quot;) &quot;\n&quot;)
    (doseq [row rows]
      (swap! result conj &quot;|&quot;)
      (doseq [col cols]
        (swap! result conj (print-cell-body maze [row col])))
      (swap! result conj &quot;\n&quot; &quot;+&quot;)
      (doseq [col cols]
        (swap! result conj (print-cell-bottom maze [row col])))
      (swap! result conj &quot;\n&quot;))
    (println (s/join (flatten @result)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we can print all the mazes we want:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(generate-maze 4 4)

+---+---+---+---+
|   |           |
+   +   +   +---+
|   |   |       |
+   +---+---+   +
|   |       |   |
+   +   +   +   +
|       |       |
+---+---+---+---+

(generate-maze 4 4)

+---+---+---+---+
|       |       |
+---+   +   +   +
|   |   |   |   |
+   +   +---+   +
|   |       |   |
+   +---+   +   +
|               |
+---+---+---+---+

(generate-maze 8 18)

+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|   |               |   |       |                   |       |           |
+   +   +   +---+   +   +   +   +   +---+   +---+   +   +   +---+---+   +
|   |   |   |   |   |   |   |       |   |   |           |           |   |
+   +---+   +   +   +   +   +---+---+   +   +---+---+---+---+---+   +   +
|       |   |       |   |   |           |           |   |           |   |
+---+   +   +   +---+   +   +   +---+---+   +---+   +   +   +---+---+   +
|   |       |   |       |   |   |       |   |       |       |           |
+   +---+---+   +   +   +   +   +   +   +---+   +---+   +---+   +   +   +
|           |   |   |   |       |   |           |   |   |   |   |   |   |
+   +---+---+   +   +   +   +---+   +---+---+---+   +   +   +   +   +   +
|   |           |   |       |       |   |           |   |       |   |   |
+   +   +---+---+---+---+   +   +---+   +   +---+   +   +---+   +   +   +
|   |   |               |   |       |   |       |   |       |   |   |   |
+   +   +---+   +---+   +---+---+   +   +---+   +   +---+   +---+   +   +
|               |                   |           |                   |   |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So there you have it: a maze generator in ~ 30 lines of code with a 30 lines of
code ascii view on top of it, build with nothing but a REPL on a phone. I really
enjoyed the puzzle and the small (and large) successes while working in the
REPL. I hope you enjoyed this recap.&lt;/p&gt;

&lt;p&gt;I’d like to thanks &lt;a href=&quot;https://twitter.com/mfikes&quot;&gt;Mike Fikes&lt;/a&gt; for his excellent
ClojureScript REPL, &lt;a href=&quot;https://twitter.com/mark_bastian&quot;&gt;Mark Bastian&lt;/a&gt; for the
inspiration for the maze data structure, &lt;a href=&quot;https://twitter.com/jamis&quot;&gt;Jamis Buck&lt;/a&gt;
for his lovely ‘Mazes for programmers’ book and &lt;a href=&quot;https://twitter.com/gertgoet&quot;&gt;Gert
Goet&lt;/a&gt; for reviewing an earlier version of this
blog. Faults and not-so-idiomatic Clojure code remaining are my own.&lt;/p&gt;

&lt;p&gt;Back home, I’m happy to be working in Emacs with the excellent Clojure CIDER
plugin again. Which reminds me that during my holiday I visited a picturesque
CIDER factory in France. Cheers!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2018-08-22-mazes/CIDER.png&quot; alt=&quot;CIDER factory&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please share your comments, suggestions and thoughts about this blog post on
&lt;a href=&quot;https://twitter.com/mmz_&quot;&gt;twitter.com/mmz_&lt;/a&gt;. Thanks for reading and Happy
Coding!&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Mazes-Programmers-Twisty-Little-Passages/dp/1680500554&quot;&gt;‘Mazes for Programmers
book’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/replete/id1013465639&quot;&gt;ClojureScript REPL
for mobile devices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mmzsource/ee88b93a3829f98fcb6188f2f2162fcf&quot;&gt;Maze generation
code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://clojure.org/guides/repl/introduction&quot;&gt;Excellent ‘Programming at the REPL’
documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Maarten&quot;, &quot;last_name&quot;=&gt;&quot;Metz&quot;, &quot;github&quot;=&gt;&quot;mmzsource&quot;, &quot;twitter&quot;=&gt;&quot;MMz_&quot;, &quot;linkedin&quot;=&gt;&quot;maartenmetz&quot;, &quot;permalink&quot;=&gt;&quot;/author/maarten/&quot;, &quot;header-img&quot;=&gt;&quot;img/htc.jpg&quot;, &quot;avatar&quot;=&gt;&quot;maarten.png&quot;, &quot;email&quot;=&gt;&quot;mmz.source@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;Maarten Metz works as a senior software designer at Philips Research and has almost 2 decades of professional coding experience. He holds a Master degree in Human Computer Interaction from the Technical University in Eindhoven. His knowledge and experience range from requirements analysis to system maintenance and everything in between. \n\n His professional interests include interaction design, software requirements, – architecture, – design, – construction, – test automation and everything else that makes a system work. He has held presentations and workshops on various topics including Clojure, lean software development, problem solving, professional development, CQRS and mining code repositories.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-07-01-bezier-in-clojure.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-07-12-bezier-in-clojurescript.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-03-04-verlet-integration.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-08-22-mazes.md collection=posts&gt;]}</name><email>mmz.source@gmail.com</email></author><category term="clojure" /><category term="functional" /><summary type="html">Introduction</summary></entry><entry><title type="html">Microhack Brew your code</title><link href="https://040code.github.io//2018/08/08/brew-some-code/" rel="alternate" type="text/html" title="Microhack Brew your code" /><published>2018-08-08T00:00:00+00:00</published><updated>2018-08-08T00:00:00+00:00</updated><id>https://040code.github.io//2018/08/08/brew-some-code</id><content type="html" xml:base="https://040code.github.io//2018/08/08/brew-some-code/">&lt;p&gt;Working on a Mac made my work a lot more fun. Especially when I was introduced to &lt;a href=&quot;https://brew.sh/&quot;&gt;homebrew&lt;/a&gt;, the missing package manager for macOS.&lt;/p&gt;

&lt;p&gt;MacPorts was fine, but it felt clumsy. Every tool seems to be switched to Homebrew and life was good.. Except when you encounter that one tool you need but is not available in brew….&lt;/p&gt;

&lt;h2 id=&quot;meet-gits&quot;&gt;Meet Gits&lt;/h2&gt;
&lt;p&gt;An example of this is the great shell script made by Roy Lines: &lt;a href=&quot;https://github.com/roylines/gits&quot;&gt;gits&lt;/a&gt;.
A shell script to share contribution between two git accounts when pair programming.&lt;/p&gt;

&lt;p&gt;Unfortunately you have to install it by getting a remote bash script and add it in your /usr/local/bin directory with root rights.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo wget https://raw.github.com/roylines/gits/master/gits.sh -O /usr/local/bin/gits
$ sudo chmod ugo+x /usr/local/bin/gits
$ gits
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When I see something like this, it’s another hurdle for using great scripts. It’s a good practice to check these scripts, before putting them into your bash with execution rights. Sometimes, I’m to lazy to do that..
Also I always tend to forget these scripts, so they are never updated and never removed. Your system becomes a mess.&lt;/p&gt;

&lt;p&gt;More people did not like that. An &lt;a href=&quot;https://github.com/roylines/gits/issues/6&quot;&gt;issue&lt;/a&gt; was raised with a question whether it could be installed with homebrew..&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How can it install it on mac? I would prefer to use homebrew.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, let’s help Adam!&lt;/p&gt;

&lt;h2 id=&quot;create-our-own-tap&quot;&gt;Create our own tap&lt;/h2&gt;

&lt;h3 id=&quot;correct-format&quot;&gt;Correct format&lt;/h3&gt;

&lt;p&gt;First step is to change the structure of your script so it can be used for brew.
Scripts need to be in the &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/&lt;/code&gt; directory so that is the first thing we need to do.&lt;/p&gt;

&lt;p&gt;Simply moving the script to the &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt; directory..&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/JeroenKnoops/gits/commit/4de9197fe1e24b751af2a1fe214b4259bf256c49&quot;&gt;https://github.com/JeroenKnoops/gits/commit/4de9197fe1e24b751af2a1fe214b4259bf256c49&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;release-the-script&quot;&gt;Release the script&lt;/h3&gt;

&lt;p&gt;You have to create a release of your script. You can do that by &lt;a href=&quot;https://github.com/JeroenKnoops/gits/releases&quot;&gt;drafting a new release&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have a release, we need the SHA-256 checksum of the release to ensure a proper version of the download.
Browse to the release and copy the name of the tar-file (in our case: &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/JeroenKnoops/gits/archive/0.1.0.tar.gz&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Download the tar and generate the SHA-256.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget https://github.com/JeroenKnoops/gits/archive/0.1.0.tar.gz
$ shasum -a 256 0.1.0.tar.gz
13b778bf5a7f92285f54179cd88bea4b39f661a3de47a7ff0a84b9aa5d865962  0.1.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will need this SHA-256 for our formula.&lt;/p&gt;

&lt;h3 id=&quot;define-the-formula&quot;&gt;Define the Formula&lt;/h3&gt;

&lt;p&gt;We have to define the formula. This can be done by creating a repo called &lt;a href=&quot;https://github.com/JeroenKnoops/homebrew-tap&quot;&gt;homebrew-tap&lt;/a&gt; in your own github repo.
It’s best practice to put some information in the README of this repo about the Formulas which are defined.&lt;/p&gt;

&lt;p&gt;In our case:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## homebrew-tap
Homebrew tap with formula for installing the following:

- [gits](https://github.com/jeroenknoops/gits)


#### Add this tap
`brew tap jeroenknoops/tap`


#### Install
- gits: `brew install gits`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;/Formula&lt;/code&gt; directory you must create a ruby file with the definition, in our case: &lt;a href=&quot;https://github.com/JeroenKnoops/homebrew-tap/blob/master/Formula/gits.rb&quot;&gt;gits.rb&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Gits &amp;lt; Formula
  desc &quot;A shell script to share contribution between two git accounts when pair programming.&quot;
  homepage &quot;https://github.com/jeroenknoops/gits&quot;
  url &quot;https://github.com/JeroenKnoops/gits/archive/0.1.0.tar.gz&quot;
  version &quot;0.1.0&quot;
  sha256 &quot;13b778bf5a7f92285f54179cd88bea4b39f661a3de47a7ff0a84b9aa5d865962&quot;

  def install
    bin.install &quot;bin/gits&quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Push the repo to github and we’re ready to go.&lt;/p&gt;

&lt;h3 id=&quot;test-it&quot;&gt;Test it&lt;/h3&gt;
&lt;p&gt;Now people can use the script by installing it with homebrew.
It’s still in my private homebrew-tap, so people first have to tap into our private tap.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew tap jeroenknoops/tap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that they can install gits with &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install gits&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;i-do-not-want-to-tap-into-someones-tap&quot;&gt;I do not want to tap into someone’s tap&lt;/h2&gt;

&lt;p&gt;To even raise the level of trust of the script / tool and install convenience, you can also put the Formula directly into the &lt;a href=&quot;https://github.com/Homebrew/homebrew-core&quot;&gt;homebrew-core&lt;/a&gt;. Now people don’t need to tap into someones private tap.
This will require some extra steps, like adding tests.&lt;/p&gt;

&lt;p&gt;Brew has a way to test your formula by doing: &lt;code class=&quot;highlighter-rouge&quot;&gt;brew audit --new-formula gits&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will show you what you still need to do, before you can submit it to homebrew. You can also find more information on that in the &lt;a href=&quot;https://docs.brew.sh/Formula-Cookbook&quot;&gt;Formula-Cookbook&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;improvements&quot;&gt;Improvements&lt;/h2&gt;

&lt;p&gt;There are more improvements I should make to release it to homebrew. F.e. add dependencies to &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;.
For now I’m not going to dive into that. Homebrew has good documentation on that: https://docs.brew.sh/Formula-Cookbook&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I really liked the way homebrew is set up. I like the way they name things, like &lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;tap&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bottle&lt;/code&gt;. By adding my own &lt;code class=&quot;highlighter-rouge&quot;&gt;bottle&lt;/code&gt; I’ve learned how homebrew is working and now I even feel more confident in using it. I like the fact that only bottles with tests and with the proper dependencies check can be added in the core homebrew formulas.&lt;/p&gt;

&lt;h3 id=&quot;homebrew-cask&quot;&gt;Homebrew cask&lt;/h3&gt;
&lt;p&gt;Homebrew has another great feature, called &lt;a href=&quot;https://github.com/Homebrew/homebrew-cask&quot;&gt;homebrew cask&lt;/a&gt;. No more: “To install, drag this icon..”. Now you can install tools like &lt;code class=&quot;highlighter-rouge&quot;&gt;atom&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;1password&lt;/code&gt; by simply calling: &lt;code class=&quot;highlighter-rouge&quot;&gt;brew cask install atom&lt;/code&gt;…&lt;/p&gt;

&lt;h2 id=&quot;more-info&quot;&gt;More info&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.brew.sh/How-to-Create-and-Maintain-a-Tap&quot;&gt;https://docs.brew.sh/How-to-Create-and-Maintain-a-Tap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.brew.sh/Formula-Cookbook&quot;&gt;https://docs.brew.sh/Formula-Cookbook&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Homebrew/homebrew-cask&quot;&gt;https://github.com/Homebrew/homebrew-cask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jeroen&quot;, &quot;last_name&quot;=&gt;&quot;Knoops&quot;, &quot;github&quot;=&gt;&quot;JeroenKnoops&quot;, &quot;twitter&quot;=&gt;&quot;johnnybusca&quot;, &quot;linkedin&quot;=&gt;&quot;jeroenknoops&quot;, &quot;permalink&quot;=&gt;&quot;/author/jeroen/&quot;, &quot;header-img&quot;=&gt;&quot;img/vanmoll.jpg&quot;, &quot;avatar&quot;=&gt;&quot;jeroen.png&quot;, &quot;email&quot;=&gt;&quot;jeroen.knoops@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;Jeroen Knoops is a full stack developer. He has worked in corporate environments for many years. He also had the pleasure to work for a small tech startup. All of his work is driven by innovation.\n\n Some keywords: Akai MPC, Urfaust, Richard Dawkins, Zed Shaw, TB-303, Erik Satie, Kapsalon, The Apemen, Piano, Hans Rosling, Haus Arafna, Apple ][, BRNS, Ravi Shankar, Lego geen playmobil, TR-909, Netflix, Tuscany, Kraftwerk, Quadrupel, Frikandel Speciaal, avdi, Moonlizards, Sandi Metz, Pixies, Strijp, Henrik Kniberg, Hazes, Public Enemy, Tesla, Funkmaster Flex, Hakan Forss, Bruce Willis, GitHub, Tony Touch, Hef, Mobb Deep, Funkdoobiest, good food, Noah's ark, Turing, Sugababes, VPRO's DutchMasters, Drums, Jet Li, Craft Beers, Synths, Bowling, La Musica della Mafia, UDS, Unsequenced, Christopher Hitchens, Slapshot en David Anderson.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-09-06-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-08-fsf-fontend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-10-01-micro-hack-zappa-io.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-08-08-brew-some-code.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-09-04-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-09-18-fsf-frontend.md collection=posts&gt;]}</name><email>jeroen.knoops@gmail.com</email></author><category term="microhack" /><category term="mac" /><category term="brew" /><summary type="html">Working on a Mac made my work a lot more fun. Especially when I was introduced to homebrew, the missing package manager for macOS.</summary></entry><entry><title type="html">Immutable Infrastructure</title><link href="https://040code.github.io//2018/05/26/talk-taipei/" rel="alternate" type="text/html" title="Immutable Infrastructure" /><published>2018-05-26T00:00:00+00:00</published><updated>2018-05-26T00:00:00+00:00</updated><id>https://040code.github.io//2018/05/26/talk-taipei</id><content type="html" xml:base="https://040code.github.io//2018/05/26/talk-taipei/">&lt;p&gt;The Docker slogan ‘Build, Ship, and Run’ advertises easy set up of immutable software builds, but it is not always that easy. Setting up immutable builds with Docker is pretty straight forward and shipping is just a matter of pushing the image to a repository. The next step is building the cloud infrastructure to run the containers. In the talk at
the Cloud Native Meetup in Taipei I have shown how to create an immutable infrastructure on AWS with Terraform. The example belows shows how you can run your micro services in docker containers on AWS.&lt;/p&gt;

&lt;p&gt;In this talk I briefly touch upon building immutable software. But the main focus of the talk will be on creating an immutable infrastructure. In this talk I will show you how to create an immutable infrastructure on AWS with Terraform. I will use a real world example to explain and show live how easy you can get micro services live on AWS and continuously apply changes to the same cloud environment..&lt;/p&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;
&lt;p&gt;Below the slides that I used for the talk, the slides are available as well on
&lt;a href=&quot;https://immutable-infrastructure.gitlab.io/taipei-2018/&quot;&gt;GitLab&lt;/a&gt;. You can easy navigate through the slides with the spacebar.&lt;/p&gt;

&lt;div style=&quot;position:relative; width:100%; height:0px; padding-bottom:56.25%;&quot;&gt;
    &lt;iframe style=&quot;position:absolute; left:0; top:0; width:100%; height:100%&quot; src=&quot;https://immutable-infrastructure.gitlab.io/taipei-2018/&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;To get started with Terraform the best starting points are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.terraform.io/intro/examples/&quot;&gt;Terraform.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/npalm/tf-helloworld-demo&quot;&gt;Hello World example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;h3 id=&quot;hello-world&quot;&gt;Hello World&lt;/h3&gt;
&lt;p&gt;During the talk, I demonstrated a hello world example, see the link above. This examples shows some basics of terraform by creating a ec2 instance and security group to server a simple web application. The example only works in the AWS region &lt;code class=&quot;highlighter-rouge&quot;&gt;eu-west-1&lt;/code&gt; since the AMI used is only available in this region.&lt;/p&gt;

&lt;h3 id=&quot;ecs-demo&quot;&gt;ECS demo&lt;/h3&gt;
&lt;p&gt;The second example I have shown, is creating an immutable infrastructure to server docker containers. The picture below descibes briefly the enviroment that will be cretaed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/20170919-immutable-infra/ecs-black.png&quot; alt=&quot;ecs-diagram&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The example also creates log groups in cloudwatch to capture the logging of the ecs agent and the running containers (services).&lt;/p&gt;

&lt;h4 id=&quot;setup&quot;&gt;Setup&lt;/h4&gt;
&lt;p&gt;Before you can start, you need an AWS account with sufficient rights (admin), and you should create a &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; to be able to access your account programmatically.&lt;/p&gt;

&lt;p&gt;Clone the repository containing the ECS &lt;a href=&quot;https://github.com/npalm/tf-ecs-demo.git&quot;&gt;sample&lt;/a&gt; terraform code. To create the infrastructure step-by-step you can check out the tags &lt;code class=&quot;highlighter-rouge&quot;&gt;vpc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ecs&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/npalm/tf-ecs-demo.git
git checkout taipei-vpc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You should also have Terraform installed (&lt;code class=&quot;highlighter-rouge&quot;&gt;home brew install terraform&lt;/code&gt;) and
tfenv to manage your terraform installation. Alternatively use a docker container to run the terraform commands, for example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it --env-file &amp;lt;AWS_KEYS_FILE&amp;gt; -v $(pwd):/data -w /data \
  hashicorp/terraform:0.10.4 &amp;lt;terraform command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In this example you can swithc the reqion by changing the region variable
&lt;code class=&quot;highlighter-rouge&quot;&gt;aws_region&lt;/code&gt; to your own choice. Or set the following environment variable: &lt;code class=&quot;highlighter-rouge&quot;&gt;export TF_VAR_aws_region=ap-northeast-1&lt;/code&gt;
for Tokyo.&lt;/p&gt;

&lt;h4 id=&quot;create-network-layers-vpc&quot;&gt;Create network layers (VPC)&lt;/h4&gt;
&lt;p&gt;In the next steps we will create the network layers.&lt;/p&gt;

&lt;p&gt;First, we initialize and plan our changes.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;terraform init
terraform plan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Terraform should print on the console that 19 needs to be added and 0 to change or destroyed. Next we apply the change be executing &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;add-ecs-cluster&quot;&gt;Add ECS cluster&lt;/h4&gt;
&lt;p&gt;Now we have the network layer created, we will add the ECS cluster. By default the bastion host is disabled, the bastion can be enabled by updating the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;enable_bastion&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform.tfvars&lt;/code&gt; file. Time to plan and apply the new resources for ECS.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout taipei-ecs-1
terraform plan
terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once terraform is ready it will print the url of two applications on the console. One application, is a simple micro service that just prints the AWS availabilty zone where it is running, the other is a &lt;a href=&quot;/2017/05/20/nextbuild-graphql/&quot;&gt;graphql micro service&lt;/a&gt;. It will take a few minutes before the services are available.&lt;/p&gt;

&lt;h4 id=&quot;adding-your-own-service&quot;&gt;Adding your own service.&lt;/h4&gt;
&lt;p&gt;Time to have some more fun. Edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;main.tf&lt;/code&gt; and start making changes. Remove all the services, add your own service. By default for each service an application load balancer (ALB) is created. Add for each services that you want to deploy a configuration as below and update the variables as required.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module &quot;your-service&quot; {
  source = &quot;ecs-service&quot;

  service_name   = &quot;&amp;lt;service-name&amp;gt;&quot;
  image_url      = &quot;&amp;lt;docker-image&amp;gt;&quot;
  container_port = &amp;lt;port in the container where the service is listening&amp;gt;
  desired_count  = &amp;lt;number of instances&amp;gt;

  aws_region  = &quot;${var.aws_region}&quot;
  environment = &quot;${var.environment}&quot;

  vpc_id  = &quot;${module.vpc.vpc_id}&quot;
  subnets = &quot;${module.vpc.public_subnets}&quot;

  cluster_id            = &quot;${module.ecs-cluster.cluster_id}&quot;
  ecs_service_role_name = &quot;${module.ecs-cluster.ecs_service_role_name}&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now plan and apply your changes, Terraform will inform you that a few resources will be destroyed (the removed services) and a few will be added.&lt;/p&gt;

&lt;h3 id=&quot;clean-up&quot;&gt;Clean up&lt;/h3&gt;
&lt;p&gt;Once done you can easily clean-up all created resources in AWS, just run &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform destroy&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;serverless-containers&quot;&gt;Serverless containers.&lt;/h3&gt;
&lt;p&gt;Since a few months Amazon support running containers without managing your
ec2 instances, aka Serverless Containers. This services is called Fargate. I
have written a &lt;a href=&quot;https://040code.github.io/2018/01/30/fargate_with_terraform/&quot;&gt;blog
post&lt;/a&gt; about
how to run you containers serveless with terraform. Creating a mix of both
ways of running of containers is explained as well. Be aware that Fargate is
still only avaialable in &lt;code class=&quot;highlighter-rouge&quot;&gt;us-east-1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Niek&quot;, &quot;last_name&quot;=&gt;&quot;Palm&quot;, &quot;github&quot;=&gt;&quot;npalm&quot;, &quot;twitter&quot;=&gt;&quot;niekos77&quot;, &quot;linkedin&quot;=&gt;&quot;niekpalm&quot;, &quot;permalink&quot;=&gt;&quot;/author/niek/&quot;, &quot;header-img&quot;=&gt;&quot;img/noodle_niek.jpg&quot;, &quot;avatar&quot;=&gt;&quot;niek.jpg&quot;, &quot;email&quot;=&gt;&quot;dev.npalm@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;I am developing for more than a decade software, mainly based on open source stacks. Currently I am having a full stack focus with my strengths on the backend related services, cloud and continuous delivery. Technologies that me keep busy now a days are: AWS, Terraform, Spring Cloud, React, React Native, Continuous Deliver, Docker, Elastic Search and much more. \n\n But cool technologies are not my only passions. I love to just crab by backpack and go around. Creating some nice meals and exploring the creative area of a cook is one of my favourite hobbies. Drinking a great craft beer is something that I love too. And from time to time the body needs some real exercise so I like to have a run or do a hike.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-04-20-discovery-agent.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-04-21-gitlab-perodic-build.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-07-docker-multi-stage-builds.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-20-nextbuild-graphql.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-06-18-terraform-aws-vpc.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-06-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-08-fsf-fontend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-19-talk-immutable-infrastructure.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-10-19-graphql-geecon.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-11-24-runners-on-the-spot.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-01-30-fargate_with_terraform.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-02-14-service-discovery.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-05-26-talk-taipei.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-09-04-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-09-18-fsf-frontend.md collection=posts&gt;]}</name><email>dev.npalm@gmail.com</email></author><category term="terraform" /><category term="aws" /><category term="docker" /><category term="microservices" /><summary type="html">The Docker slogan ‘Build, Ship, and Run’ advertises easy set up of immutable software builds, but it is not always that easy. Setting up immutable builds with Docker is pretty straight forward and shipping is just a matter of pushing the image to a repository. The next step is building the cloud infrastructure to run the containers. In the talk at the Cloud Native Meetup in Taipei I have shown how to create an immutable infrastructure on AWS with Terraform. The example belows shows how you can run your micro services in docker containers on AWS.</summary></entry><entry><title type="html">Verlet Integration</title><link href="https://040code.github.io//2018/03/04/verlet-integration/" rel="alternate" type="text/html" title="Verlet Integration" /><published>2018-03-04T00:00:00+00:00</published><updated>2018-03-04T00:00:00+00:00</updated><id>https://040code.github.io//2018/03/04/verlet-integration</id><content type="html" xml:base="https://040code.github.io//2018/03/04/verlet-integration/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this post we’re going to dive into physics simulation with Clojure. The
ideas in this post were mostly inspired by &lt;a href=&quot;http://graphics.cs.cmu.edu/nsp/course/15-869/2006/papers/jakobsen.htm&quot;&gt;this paper by Thomas
Jakobsen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My motivations for working on this toy project were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Experimenting with a very mutable domain in a language with immutability at
its core&lt;/li&gt;
  &lt;li&gt;Having some fun by making a lot happen on screen without writing lots of code&lt;/li&gt;
  &lt;li&gt;Coding using emacs &amp;amp; &lt;a href=&quot;https://github.com/clojure-emacs/cider&quot;&gt;CIDER&lt;/a&gt; (The
&lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;lojure &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt;nteractive &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt;evelopment &lt;code class=&quot;highlighter-rouge&quot;&gt;E&lt;/code&gt;nvironment that &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;ocks)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source code can be found &lt;a href=&quot;https://github.com/mmzsource/verlet&quot;&gt;here&lt;/a&gt;.
The result:&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/258632942&quot; width=&quot;640&quot; height=&quot;732&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;one-main--to-bind-them-all&quot;&gt;One &lt;code class=&quot;highlighter-rouge&quot;&gt;main-&lt;/code&gt; to bind them all&lt;/h2&gt;

&lt;p&gt;This code uses the &lt;a href=&quot;https://github.com/quil/quil&quot;&gt;Quil library&lt;/a&gt; to render points
and lines. In the &lt;code class=&quot;highlighter-rouge&quot;&gt;main-&lt;/code&gt; function, the &lt;code class=&quot;highlighter-rouge&quot;&gt;sketch&lt;/code&gt; macro from the Quil library is
used to bind the physics domain to the UI.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn -main []
  (quil/sketch
    :host           -main
    :title          &quot;Verlet Integration&quot;
    :size           [width height]
    :setup          setup
    :update         update-state
    :draw           draw
    :key-pressed    key-pressed
    :mouse-pressed  mouse-pressed
    :mouse-dragged  mouse-dragged
    :mouse-released mouse-released
    :features       [:exit-on-close]
    :middleware     [quil-mw/fun-mode]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The sketch macro basically asks the developer to configure which ‘handler
functions’ it should call when certain events occur. For instance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a key is pressed -&amp;gt; call &lt;code class=&quot;highlighter-rouge&quot;&gt;key-pressed&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;the mouse is pressed -&amp;gt; call &lt;code class=&quot;highlighter-rouge&quot;&gt;mouse-pressed&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;the state of your program has to be updated -&amp;gt; call &lt;code class=&quot;highlighter-rouge&quot;&gt;update-state&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;it’s time to draw the new state -&amp;gt; call &lt;code class=&quot;highlighter-rouge&quot;&gt;draw&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because I configured Quil to run in functional mode &lt;code class=&quot;highlighter-rouge&quot;&gt;(quil-mw/fun-mode)&lt;/code&gt;, Quil:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Uses the return value from the &lt;code class=&quot;highlighter-rouge&quot;&gt;:setup&lt;/code&gt; function as the initial &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Passes the &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; to each handler function to update it&lt;/li&gt;
  &lt;li&gt;Additionally passes a keyboard- and mouse &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt; argument to keyboard - and
mouse handler functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The handler function signatures therefore look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn draw          [state]       ...)
(defn update-state  [state]       ...)
(defn key-pressed   [state event] ...)
(defn mouse-pressed [state event] ...)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;world-state&quot;&gt;World state&lt;/h2&gt;

&lt;p&gt;What does a snapshot of this world state look like? &lt;code class=&quot;highlighter-rouge&quot;&gt;key-pressed&lt;/code&gt; gives some
hints:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn key-pressed
  [state event]
  (let [raw-key   (:raw-key event)
        new-state (cond
                   (= \b raw-key) (load-world (load-a-file &quot;blocks.edn&quot;))
                   (= \c raw-key) (load-world (load-a-file &quot;cloth.edn&quot;))
                   (= \p raw-key) (load-world (load-a-file &quot;points.edn&quot;))
                   (= \s raw-key) (load-world (load-a-file &quot;sticks.edn&quot;))
                   (= \i raw-key) (show-info-message)
                   (= \q raw-key) (quil/exit)
                   :else state)]
    new-state))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So on pressing a key, a certain world is loaded. Let’s look into the ‘sticks’
world:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;{:points {:p0 {:x  10 :y   1 :oldx   0 :oldy   0}
          :p1 {:x 100 :y 100 :oldx 100 :oldy 100}
          :p2 {:x   0 :y 500 :oldx   0 :oldy 525}
          :p3 {:x  25 :y 475 :oldx   0 :oldy 525}
          :p4 {:x 250 :y 200 :oldx 250 :oldy 200 :pinned true}
          :p5 {:x 350 :y 100 :oldx 350 :oldy 100}}
 :sticks [{:links  [:p0 :p1] :length 138}
          {:links  [:p2 :p3] :length  40}
          {:links  [:p4 :p5] :length 140}]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing special here. Just a map containing &lt;code class=&quot;highlighter-rouge&quot;&gt;:points&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:sticks&lt;/code&gt;. We’ll dive
into the particulars of points and sticks soon.&lt;/p&gt;

&lt;h2 id=&quot;physics-simulation&quot;&gt;Physics Simulation&lt;/h2&gt;

&lt;p&gt;This physics simulation deals with Points, and Sticks connecting Points. The
Points are the things that seem to have direction and speed, are influenced by
gravity and lose speed because of friction or because of bouncing against world
borders. The Sticks try to keep their 2 Points apart according to the configured
Stick length. The simulation loop boils down to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Update Points&lt;/li&gt;
  &lt;li&gt;Apply Stick constraints&lt;/li&gt;
  &lt;li&gt;Apply world constraints&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn update-state
  [state]
  (-&amp;gt;&amp;gt; state
       (update-points)
       (apply-stick-constraints)
       (apply-world-constraints)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code can be read like this: ‘with &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;, first &lt;code class=&quot;highlighter-rouge&quot;&gt;update-points&lt;/code&gt;, then
&lt;code class=&quot;highlighter-rouge&quot;&gt;apply-stick-constraints&lt;/code&gt;, and finally &lt;code class=&quot;highlighter-rouge&quot;&gt;apply-world-constrains&lt;/code&gt;’.&lt;/p&gt;

&lt;h3 id=&quot;points&quot;&gt;Points&lt;/h3&gt;

&lt;p&gt;Points are the main abstraction in this code. I decided to use a record to name
them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defrecord Point [x y oldx oldy pinned])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A Point stores its current coordinates and the coordinates it had in the
previous world state. On top of that it has a &lt;code class=&quot;highlighter-rouge&quot;&gt;pinned&lt;/code&gt; property which indicates
if a Point is pinned in space and - as a result - stays on the same coordinate.
A pinned Point can be unpinned by clicking it with the mouse pointer.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;update-point&lt;/code&gt; function calculates the velocity of the Point and adds some
gravity in the mix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn update-point
  [{:keys [x y oldx oldy pinned] :as point}]
  (if pinned
    point
    (let [vx (velocity x oldx)
          vy (velocity y oldy)]
      (-&amp;gt;Point (+ x vx) (+ y vy gravity) x y pinned))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reading superficially, this code says: if the Point is pinned then return the
same Point. Otherwise, calculate it’s velocity (based on the current - and
previous x &amp;amp; y coordinates), add some gravity in the y direction and return the
newly calculated Point.&lt;/p&gt;

&lt;p&gt;The function uses
&lt;a href=&quot;https://gist.github.com/john2x/e1dca953548bfdfb9844&quot;&gt;destructuring&lt;/a&gt; to name all
the arguments of the incoming Point. With destructuring, you can bind the
values in a data structure without explicitly querying the data structure. So
instead of getting each and every value out of Point and binding it to a ‘new’
name…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(let [x      (:x      point)
      y      (:y      point)
      oldx   (:oldx   point)
      oldy   (:oldy   point)
      pinned (:pinned point)]
  ...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… you can very effectively tell the function that it will receive a map &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt;
with keys &lt;code class=&quot;highlighter-rouge&quot;&gt;x y oldx oldy pinned&lt;/code&gt; and that this function should have those
variables available under the same name:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldy&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code in my repository has some additional type hints, because I wanted the
simulation to run smooth on my laptop and wanted to learn a bit more about type
hinting and compiler optimizations.&lt;/p&gt;

&lt;p&gt;And that’s it with regard to Points. In a couple of lines of code Points are
already moving and reacting to gravity in the simulation.&lt;/p&gt;

&lt;h3 id=&quot;world-constraints&quot;&gt;World constraints&lt;/h3&gt;

&lt;p&gt;It’s time for Points to meet the harsh reality of life. Walls are harder than
Points and therefore Points should bounce off of them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn hit-floor?       [y] (&amp;gt; y height))
(defn hit-ceiling?     [y] (&amp;lt; y 0))
(defn hit-left-wall?   [x] (&amp;lt; x 0))
(defn hit-right-wall?  [x] (&amp;gt; x width))


(defn apply-world-constraint
  [{:keys [x y oldx oldy pinned] :as point}]
  (let [vxb (* (velocity x oldx) bounce)
        vyb (* (velocity y oldy) bounce)]
    (cond
      (hit-ceiling?    y) (let [miry (- oldy)]
                             (-&amp;gt;Point (+ oldx vxb) (+ miry (- vyb)) oldx miry pinned))
      (hit-floor?      y) (let [miry (+ height height (- oldy))]
                             (-&amp;gt;Point  (+ oldx vxb) (- miry vyb) oldx miry pinned))
      (hit-left-wall?  x) (let [mirx (- oldx)]
                             (-&amp;gt;Point (+ mirx (- vxb)) (+ oldy vyb) mirx oldy pinned))
      (hit-right-wall? x) (let [mirx (+ width width (- oldx))]
                             (-&amp;gt;Point (- mirx vxb) (+ oldy vyb) mirx oldy pinned))
      ;; else: free movement
      :else point)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To explain what happens here, a picture might help.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/verlet-physics/world-constraints.png&quot; alt=&quot;apply world constraints diagram&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imagine a Point moved from A to B in the last Point update. This means a Point
record is persisted with its &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; being the coordinates of B and &lt;code class=&quot;highlighter-rouge&quot;&gt;oldx&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;oldy&lt;/code&gt; being the coordinates of A. If a wall line crossed the imaginary line
A-B, the Point history should be rewritten. In essence, line A-B is mirrored in
the wall it hits, giving rise to another imaginary line C-D where C mirrors A
and D mirrors B. The &lt;code class=&quot;highlighter-rouge&quot;&gt;miry&lt;/code&gt; (mirror-y) and &lt;code class=&quot;highlighter-rouge&quot;&gt;mirx&lt;/code&gt; (mirror-x) variables in the
code contain C coordinates mirroring A coordinates.&lt;/p&gt;

&lt;p&gt;The simulation will take a little velocity loss into account when bouncing at
walls. Therefore, D’ is calculated by using the x and y velocities (vx and vy)
multiplied by a bounce factor (leading to the &lt;code class=&quot;highlighter-rouge&quot;&gt;vxb&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;vyb&lt;/code&gt; variables in the
code).&lt;/p&gt;

&lt;p&gt;When the world state is drawn, the Point will fly off in exactly the right
direction. Additionally, because of the history rewrite, subsequent Point
updates will keep moving the Point in the right direction.&lt;/p&gt;

&lt;p&gt;The picture shows the situation when hitting the ceiling. Hitting the floor and
the walls works similar. And that’s all the math and code you need to simulate
Points moving in a bounded space. Now let’s add Sticks to the simulation.&lt;/p&gt;

&lt;h3 id=&quot;stick-constraints&quot;&gt;Stick constraints&lt;/h3&gt;

&lt;p&gt;Not only walls are restricting Points from free movement; Sticks also constrain
them. A Stick connects 2 Points and has a configured length. The goal of the
Stick constraint is to move the Points at the end of the Stick to the configured
length of the Stick.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/verlet-physics/stick-constraints.png&quot; alt=&quot;apply stick constraints diagram&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of trying to calculate the solution that satisfies all Stick constraints
at once, this code simply looks at one Stick at a time and ‘solves’ the
constraint problem by repeatedly solving Stick constraints in isolation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn apply-stick-constraint
  [{length :length :as stick}
   {p0x :x p0y :y oldp0x :oldx oldp0y :oldy pinp0 :pinned :as p0}
   {p1x :x p1y :y oldp1x :oldx oldp1y :oldy pinp1 :pinned :as p1}]
  (let [{:keys [dx dy distance]} (distance-map p0 p1)
        difference (- length distance)
        fraction   (/ (/ difference distance) 2)
        offsetX    (* dx fraction)
        offsetY    (* dy fraction)
        p0-new     (-&amp;gt;Point (- p0x offsetX) (- p0y offsetY) oldp0x oldp0y pinp0)
        p1-new     (-&amp;gt;Point (+ p1x offsetX) (+ p1y offsetY) oldp1x oldp1y pinp1)]
    [(if pinp0 p0 p0-new) (if pinp1 p1 p1-new)]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apply-stick-constraint&lt;/code&gt; takes a Stick and 2 Points (P0 and P1) as arguments.
These arguments are heavily destructured. To understand what happens precisely,
the next picture might be helpful:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/verlet-physics/stick-math.png&quot; alt=&quot;stick math diagram&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let P0 and P1 be two Points with a Stick S between them. P0 and P1 have already
been updated by the &lt;code class=&quot;highlighter-rouge&quot;&gt;update-point&lt;/code&gt; function and their new (x,y) coordinates are
(40,50) and (70,90) respectively. This means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dx = 30&lt;/li&gt;
  &lt;li&gt;dy = 40&lt;/li&gt;
  &lt;li&gt;distance = 50&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the Stick between P0 and P1 was configured to have a &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt; of 150, and
we want P0 and P1 to be adjusted by the same amount, P0 &lt;em&gt;should&lt;/em&gt; be located at
Point S0 (10,10) and P1 &lt;em&gt;should&lt;/em&gt; be located at Point S1 (100,130). This is
exactly what &lt;code class=&quot;highlighter-rouge&quot;&gt;apply-stick-constraint&lt;/code&gt; achieves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;difference&lt;/code&gt; in the configured &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt; of the Stick and the &lt;code class=&quot;highlighter-rouge&quot;&gt;distance&lt;/code&gt; of P0
and P1 is 100&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;fraction&lt;/code&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;distance&lt;/code&gt; between P0 and P1 that needs to be added to
P0 AND to P1 is 1. So by extending the &lt;code class=&quot;highlighter-rouge&quot;&gt;distance&lt;/code&gt; P0 and P1 with exactly 50
(&lt;code class=&quot;highlighter-rouge&quot;&gt;distance&lt;/code&gt; times &lt;code class=&quot;highlighter-rouge&quot;&gt;fraction&lt;/code&gt;) in both directions, we’ll solve the Stick
constraint.&lt;/li&gt;
  &lt;li&gt;This is done by using &lt;code class=&quot;highlighter-rouge&quot;&gt;offsetX&lt;/code&gt; on P0x and P1x and using &lt;code class=&quot;highlighter-rouge&quot;&gt;offsetY&lt;/code&gt; on P0y and
P1y&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conceptually a scaled helper triangle is used to move P0 and an identical scaled
helper triangle is used to move P1. The scale of this triangle is determined by
the &lt;code class=&quot;highlighter-rouge&quot;&gt;fraction&lt;/code&gt; which in this case is 1. These triangles are depicted in red.&lt;/p&gt;

&lt;p&gt;Each Stick in the world is updated before a new world frame is drawn. It is very
well possible that the neatly placed P0 and P1 are moved to different
coordinates by another Stick constraint before the complete update is over. This
sometimes results in wiggly behavior, although in most cases, the simulation
is perceived to behave naturally.&lt;/p&gt;

&lt;h2 id=&quot;drawing&quot;&gt;Drawing&lt;/h2&gt;

&lt;p&gt;Finally, the Points and Sticks have to be drawn on screen:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn draw
  [state]
  (quil/background 255)
  (if (:info-message state)
    (quil/text info-message 20 20)
    (do
      (doseq [point (vals (:points state))]
        (quil/ellipse (:x point) (:y point) 7 7))
      (doseq [stick (:sticks state)]
        (let [points (:points state)
              p0     ((first (:links stick)) points)
              p1     ((last  (:links stick)) points)]
          (quil/line (:x p0) (:y p0) (:x p1) (:y p1)))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start by clearing the screen. If there is an &lt;code class=&quot;highlighter-rouge&quot;&gt;:info-message&lt;/code&gt; entry in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;, draw the &lt;code class=&quot;highlighter-rouge&quot;&gt;info-message&lt;/code&gt;. Otherwise draw all Points in &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; as a
quil/ellipse and draw all Sticks as a quil/line. And that’s all folks!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As always, it was a pleasure working with Clojure. It turns out to be easy to
work in a very mutable domain with mostly pure functions, also thanks to the
excellent Quil library.&lt;/p&gt;

&lt;p&gt;My current version of &lt;a href=&quot;https://github.com/AlDanial/cloc&quot;&gt;cloc&lt;/a&gt; tells me that
core.clj is 230 lines long, but it counts the function documentation as code.
Therefore, I ran a new &lt;code class=&quot;highlighter-rouge&quot;&gt;cloc&lt;/code&gt; command without the doc strings. It then counts
159 lines of clojure, approximately half of which are dedicated to UI
interaction and the other half to physics simulation. Not bad at all!&lt;/p&gt;

&lt;p&gt;I’m glad I decided to ‘bite the bullet’ and learn Emacs and CIDER. I now use
Emacs for all my Clojure(script) development. In addition, I use Emacs for most
of my text editing these days including writing and planning.&lt;/p&gt;

&lt;p&gt;I’d like to thank Michiel Borkent a.k.a.
&lt;a href=&quot;https://twitter.com/borkdude&quot;&gt;@borkdude&lt;/a&gt; for reviewing an earlier version of
the code and giving me very helpful feedback. Faults and not-so-idiomatic
Clojure code remaining are my own.&lt;/p&gt;

&lt;p&gt;Please share your comments, suggestions and thoughts about this blog post on
&lt;a href=&quot;https://twitter.com/mmz_&quot;&gt;twitter.com/mmz_&lt;/a&gt;. Thanks for reading and Happy
Coding!&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://graphics.cs.cmu.edu/nsp/course/15-869/2006/papers/jakobsen.htm&quot;&gt;Verlet integration
paper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mmzsource/verlet&quot;&gt;My verlet integration code in clojure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/quil/quil&quot;&gt;Quil library&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/clojure-emacs/cider&quot;&gt;Emacs CIDER plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/AlDanial/cloc&quot;&gt;Cloc - counting lines of code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Maarten&quot;, &quot;last_name&quot;=&gt;&quot;Metz&quot;, &quot;github&quot;=&gt;&quot;mmzsource&quot;, &quot;twitter&quot;=&gt;&quot;MMz_&quot;, &quot;linkedin&quot;=&gt;&quot;maartenmetz&quot;, &quot;permalink&quot;=&gt;&quot;/author/maarten/&quot;, &quot;header-img&quot;=&gt;&quot;img/htc.jpg&quot;, &quot;avatar&quot;=&gt;&quot;maarten.png&quot;, &quot;email&quot;=&gt;&quot;mmz.source@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;Maarten Metz works as a senior software designer at Philips Research and has almost 2 decades of professional coding experience. He holds a Master degree in Human Computer Interaction from the Technical University in Eindhoven. His knowledge and experience range from requirements analysis to system maintenance and everything in between. \n\n His professional interests include interaction design, software requirements, – architecture, – design, – construction, – test automation and everything else that makes a system work. He has held presentations and workshops on various topics including Clojure, lean software development, problem solving, professional development, CQRS and mining code repositories.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-07-01-bezier-in-clojure.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-07-12-bezier-in-clojurescript.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-03-04-verlet-integration.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-08-22-mazes.md collection=posts&gt;]}</name><email>mmz.source@gmail.com</email></author><category term="clojure" /><category term="functional" /><summary type="html">Introduction</summary></entry><entry><title type="html">Service Discovery on AWS</title><link href="https://040code.github.io//2018/02/14/service-discovery/" rel="alternate" type="text/html" title="Service Discovery on AWS" /><published>2018-02-14T00:00:00+00:00</published><updated>2018-02-14T00:00:00+00:00</updated><id>https://040code.github.io//2018/02/14/service-discovery</id><content type="html" xml:base="https://040code.github.io//2018/02/14/service-discovery/">&lt;p&gt;Last year I wrote a &lt;a href=&quot;/2017/04/20/discovery-agent/&quot;&gt;post&lt;/a&gt; how to implement service discovery for Spring Boot applications running in Docker containers on AWS ECS. At that time the Amazon ECS agent does not have support to discover the docker exposed ports inside the container. In November 2017 Amazon released a feature in the &lt;a href=&quot;https://github.com/aws/amazon-ecs-agent/releases/tag/v1.15.0&quot;&gt;ECS agent 1.15&lt;/a&gt; to retrieve container meta data in the container. This feature makes the discovery agent obsolete.&lt;/p&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The problem&lt;/h3&gt;
&lt;p&gt;Looking back to the last years problem. A Spring service running in a container needs its external ip address and port to register to Eureka for service discovery. A service running in a container does not know the external exposed port and docker does not support a way to obtain the port mapping. We could inject the ip address but for the port that would not work. Since the port is unknown at start time. Of course, this in only valid when using random ports. But fixing the port can eventually cause port conflicts. Besides that, you are not able to scale the container on the same host. Therefore, it makes sense to use automatic port assignment.&lt;/p&gt;

&lt;p&gt;At that time I have solved this problem by adding an agent that can be called via a REST interface to lookup the exposed port based on the container id and internal port. The agent returns the external port, and the service can use this information to register itself to Eureka. This approach worked well but since the ECS agent is now shipped with a feature to retrieve the meta data we do not need longer an extra agent anymore.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/ecs1.png&quot; height=&quot;80%&quot; width=&quot;80%&quot; alt=&quot;ECS&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;
&lt;p&gt;The approach to register the container to the discovery service remains the same. During container startup, the start script obtains the external ip address, and docker exposed port. The discovered information will be passed to the Spring Boot application using environment variables. At application start the Spring service discovery client uses the environment variables to register the application to Eureka.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2018-02-14-service-discovery/sequence.png&quot; height=&quot;100%&quot; width=&quot;98%&quot; alt=&quot;Sequence Diagram&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we are able retrieve information about the container (in the container) we need to enable the feature on the ECS instance. For more details about this feature see the &lt;a href=&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-metadata.html&quot;&gt;Amazon documentation&lt;/a&gt;. To enable the meta data in the container you need to set &lt;code class=&quot;highlighter-rouge&quot;&gt;ECS_ENABLE_CONTAINER_METADATA&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;. This can be easily done by adding the line below the user data script.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo ECS_ENABLE_CONTAINER_METADATA=true &amp;gt;&amp;gt; /etc/ecs/ecs.config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now each created container by ECS on the EC2 instances will have the meta data available in the file assigned to the environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;ECS_CONTAINER_METADATA_FILE&lt;/code&gt;. An example of the meta data looks like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;Cluster&quot;: &quot;ecs-cluster&quot;,
  &quot;ContainerInstanceARN&quot;: &quot;arn:aws:ecs:eu-west-1:1234445678:some-id&quot;,
  &quot;TaskARN&quot;: &quot;arn:aws:ecs:eu-west-1:1234445678:some-other-id&quot;,
  &quot;ContainerID&quot;: &quot;container-id&quot;,
  &quot;ContainerName&quot;: &quot;my-service&quot;,
  &quot;DockerContainerName&quot;: &quot;docker-container-name&quot;,
  &quot;ImageID&quot;: &quot;image-id&quot;,
  &quot;ImageName&quot;: &quot;docker-image&quot;,
  &quot;PortMappings&quot;: [
    {
      &quot;ContainerPort&quot;: 8080,
      &quot;HostPort&quot;: 320001,
      &quot;BindIp&quot;: &quot;0.0.0.0&quot;,
      &quot;Protocol&quot;: &quot;tcp&quot;
    }
  ],
  &quot;Networks&quot;: [
    {
      &quot;NetworkMode&quot;: &quot;default&quot;,
      &quot;IPv4Addresses&quot;: [
        &quot;172.17.0.2&quot;
      ]
    }
  ],
  &quot;MetadataFileStatus&quot;: &quot;READY&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we fetch the ip address and port during container start. The ip address we still get through the standard amazon info endpoint.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export EUREKA_INSTANCE_IP_ADDRESS=$(curl --retry 5 --connect-timeout 3 -s 169.254.169.254/latest/meta-data/local-ipv4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We extract the port mapping from the metadata using &lt;code class=&quot;highlighter-rouge&quot;&gt;jq&lt;/code&gt;. We assume the service will run in the container on port 8080. Otherwise you can make this configurable as well.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export EUREKE_INSTANCE_NON_SECURE_PORT=$(cat ${ECS_CONTAINER_METADATA_FILE} | jq -c -r &quot;.PortMappings[] | select(.ContainerPort == 8080) | .HostPort&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;By using the Spring properties as environment variables, we can inject the information to the Spring application. Alternatively, you can use other names and assign the values in the &lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt; file, see the example below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eureka:
  instance:
    preferIpAddress: true
    ip-address: ${EXTERNAL_IP}
    non-secure-port: ${EXTERNAL_PORT}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this approach the discovery agent becomes obsolete and we can retrieve the information for discovery through standard Amazon features. The example I have described in this post is just one way to implement service discovery in ECS, many alternatives are available.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Niek&quot;, &quot;last_name&quot;=&gt;&quot;Palm&quot;, &quot;github&quot;=&gt;&quot;npalm&quot;, &quot;twitter&quot;=&gt;&quot;niekos77&quot;, &quot;linkedin&quot;=&gt;&quot;niekpalm&quot;, &quot;permalink&quot;=&gt;&quot;/author/niek/&quot;, &quot;header-img&quot;=&gt;&quot;img/noodle_niek.jpg&quot;, &quot;avatar&quot;=&gt;&quot;niek.jpg&quot;, &quot;email&quot;=&gt;&quot;dev.npalm@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;I am developing for more than a decade software, mainly based on open source stacks. Currently I am having a full stack focus with my strengths on the backend related services, cloud and continuous delivery. Technologies that me keep busy now a days are: AWS, Terraform, Spring Cloud, React, React Native, Continuous Deliver, Docker, Elastic Search and much more. \n\n But cool technologies are not my only passions. I love to just crab by backpack and go around. Creating some nice meals and exploring the creative area of a cook is one of my favourite hobbies. Drinking a great craft beer is something that I love too. And from time to time the body needs some real exercise so I like to have a run or do a hike.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-04-20-discovery-agent.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-04-21-gitlab-perodic-build.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-07-docker-multi-stage-builds.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-20-nextbuild-graphql.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-06-18-terraform-aws-vpc.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-06-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-08-fsf-fontend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-19-talk-immutable-infrastructure.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-10-19-graphql-geecon.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-11-24-runners-on-the-spot.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-01-30-fargate_with_terraform.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-02-14-service-discovery.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-05-26-talk-taipei.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-09-04-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-09-18-fsf-frontend.md collection=posts&gt;]}</name><email>dev.npalm@gmail.com</email></author><category term="aws" /><category term="spring" /><category term="docker" /><summary type="html">Last year I wrote a post how to implement service discovery for Spring Boot applications running in Docker containers on AWS ECS. At that time the Amazon ECS agent does not have support to discover the docker exposed ports inside the container. In November 2017 Amazon released a feature in the ECS agent 1.15 to retrieve container meta data in the container. This feature makes the discovery agent obsolete.</summary></entry><entry><title type="html">MicroHack Fargate</title><link href="https://040code.github.io//2018/01/30/fargate_with_terraform/" rel="alternate" type="text/html" title="MicroHack Fargate" /><published>2018-01-30T00:00:00+00:00</published><updated>2018-01-30T00:00:00+00:00</updated><id>https://040code.github.io//2018/01/30/fargate_with_terraform</id><content type="html" xml:base="https://040code.github.io//2018/01/30/fargate_with_terraform/">&lt;p&gt;Last December at the AWS re:invent, AWS announced the new container service platform Fargate. Fargate is integrated to ECS. The key difference is that Fargate does not require you to have EC2 instances running to host your containers, which means we have serverless containers. A drawback is that Fargate is not globally available yet, today Fargate is only available in &lt;code class=&quot;highlighter-rouge&quot;&gt;us-east-1&lt;/code&gt;, see also the &lt;a href=&quot;https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/&quot;&gt;list&lt;/a&gt; of supported regions. Later in December Fargate also become available in &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt; so time to see how it works.&lt;/p&gt;

&lt;p&gt;In this post I will show how to deploy containers to Fargate using Terraform. As example docker image I will use the blog itself. The complete example in available on &lt;a href=&quot;https://github.com/npalm/blog_terraform_aws_fargate&quot;&gt;GitHub&lt;/a&gt;. First I show how you can deploy a container using Terraform to Fargate. In case you would like to experiment with AWS console instead of Terraform you should be able to execute the same steps direct in AWS. Only the VPC part could be a bit tricky, but even that part can be skipped and replaced with the default VPC. In that case you don’t have private subnets available.&lt;/p&gt;

&lt;p&gt;Finally I will discuss how a deployment with Fargate in ECS compares to a deployment with EC2 in ECS. And show what steps have to be taken to move the deployment from Fargate to EC2 instances.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Before you start you need to have programmatically access to an AWS account and Terraform (0.11+) installed. The tool &lt;a href=&quot;http://brewformulas.org/Tfenv&quot;&gt;tfenv&lt;/a&gt; let you manage multiple terraform version on your system.&lt;/p&gt;

&lt;h2 id=&quot;deploy-serverless-containers-on-fargate&quot;&gt;Deploy serverless containers on Fargate&lt;/h2&gt;
&lt;p&gt;Before we can create our containers, we have to create a few infrastructural components. For this example we create an own VPC including public and private subnets. An ECS cluster for our containers, and a CloudWatch log group for centralized logging. The diagram below shows an abstract view of the deployment we are going to create, this view contains two in instead of the 3 availability zones we use.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2018-01-30-fargate_with_terraform/img/ecs-fargate-diagram.png&quot; alt=&quot;Fargate&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We start with defining the VPC, we choose &lt;code class=&quot;highlighter-rouge&quot;&gt;us-east-1&lt;/code&gt; since Fargate is only available in this region. In the blog post &lt;a href=&quot;/2017/06/18/terraform-aws-vpc/&quot;&gt;Coding a VPC in Terraform&lt;/a&gt; you find more details about how this VPC module is structured.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;provider &quot;aws&quot; {
  region  = &quot;us-east-1&quot;
  version = &quot;1.7.1&quot;
}

provider &quot;template&quot; {
  version = &quot;1.0&quot;
}

module &quot;vpc&quot; {
  source  = &quot;npalm/vpc/aws&quot; // https://registry.terraform.io/modules/npalm/vpc/aws
  version = &quot;1.1.0&quot;

  environment = &quot;blog&quot;
  aws_region  = &quot;us-east-1&quot;

  create_private_hosted_zone = &quot;false&quot;

  // us-east-1 is the only region that supports Fargate
  availability_zones = {
    us-east-1 = [&quot;us-east-1a&quot;, &quot;us-east-1b&quot;, &quot;us-east-1c&quot;]
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we define the ECS cluster, and CloudWatch log group. Since we will deploy to Fargate we don’t have to attache EC2 instances to our cluster.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;aws_ecs_cluster&quot; &quot;cluster&quot; {
  name = &quot;blog-ecs-cluster&quot;
}

resource &quot;aws_cloudwatch_log_group&quot; &quot;log_group&quot; {
  name = &quot;blog&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now the first part is defined we execute a &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; and inpect the results.&lt;/p&gt;

&lt;asciinema-player src=&quot;/assets/2018-01-30-fargate_with_terraform/asciinema/fargate-terraform-1.json&quot; cols=&quot;166&quot; rows=&quot;15&quot; autoplay=&quot;true&quot; loop=&quot;true&quot; speed=&quot;1.5&quot;&gt;
&lt;/asciinema-player&gt;

&lt;p&gt;The next step is to deploy the docker image with the blog. In ECS you deploy a docker container with a task. And your task will be managed by a service. First we create the task definition which contains the container deployment definition as well. Fargate is using &lt;a href=&quot;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html&quot;&gt;awsvpc as networking mode&lt;/a&gt;, in this mode each task definiton gets its own private ip address. This network mode requires a role for the task execution. In case you create your definition through the Amazon console a service linked role will be created for you. We will create this role also via code.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;data &quot;aws_iam_policy_document&quot; &quot;ecs_tasks_execution_role&quot; {
  statement {
    actions = [&quot;sts:AssumeRole&quot;]

    principals {
      type        = &quot;Service&quot;
      identifiers = [&quot;ecs-tasks.amazonaws.com&quot;]
    }
  }
}

resource &quot;aws_iam_role&quot; &quot;ecs_tasks_execution_role&quot; {
  name               = &quot;blog-ecs-task-execution-role&quot;
  assume_role_policy = &quot;${data.aws_iam_policy_document.ecs_tasks_execution_role.json}&quot;
}

resource &quot;aws_iam_role_policy_attachment&quot; &quot;ecs_tasks_execution_role&quot; {
  role       = &quot;${aws_iam_role.ecs_tasks_execution_role.name}&quot;
  policy_arn = &quot;arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy&quot;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have defined the execution rol for the task, next we define the task definion. This task definition consist of two parts. First we define a container definition via a &lt;code class=&quot;highlighter-rouge&quot;&gt;template_file&lt;/code&gt;. In this container definition you see container port 80 is mapped to host port 80, the task will get its own private IP. And after that we define the task definition self. The following settings are required for a task that will run in Fargate: requires_compatibilities, network_mode, cpu and memory.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;data &quot;template_file&quot; &quot;blog&quot; {
  template = &amp;lt;&amp;lt;EOF
  [
    {
      &quot;essential&quot;: true,
      &quot;image&quot;: &quot;npalm/040code.github.io:latest&quot;,
      &quot;name&quot;: &quot;blog&quot;,
      &quot;portMappings&quot;: [
        {
          &quot;hostPort&quot;: 80,
          &quot;protocol&quot;: &quot;tcp&quot;,
          &quot;containerPort&quot;: 80
        }
      ],
      &quot;logConfiguration&quot;: {
        &quot;logDriver&quot;: &quot;awslogs&quot;,
        &quot;options&quot;: {
          &quot;awslogs-group&quot;: &quot;blog&quot;,
          &quot;awslogs-region&quot;: &quot;us-east-1&quot;,
          &quot;awslogs-stream-prefix&quot;: &quot;040code&quot;
        }
      }
    }
  ]

  EOF
}

resource &quot;aws_ecs_task_definition&quot; &quot;task&quot; {
  family                   = &quot;blog-blog&quot;
  container_definitions    = &quot;${data.template_file.blog.rendered}&quot;
  network_mode             = &quot;awsvpc&quot;
  cpu                      = &quot;256&quot;
  memory                   = &quot;512&quot;
  requires_compatibilities = [&quot;FARGATE&quot;]
  execution_role_arn       = &quot;${aws_iam_role.ecs_tasks_execution_role.arn}&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Time to verify the code is working by executing a &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt;&lt;/p&gt;

&lt;asciinema-player src=&quot;/assets/2018-01-30-fargate_with_terraform/asciinema/fargate-terraform-2.json&quot; cols=&quot;166&quot; rows=&quot;15&quot; autoplay=&quot;true&quot; loop=&quot;true&quot; speed=&quot;1.0&quot;&gt;
&lt;/asciinema-player&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2018-01-30-fargate_with_terraform/img/container-definition.png&quot; alt=&quot;Fargate&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have still nothing running but you can already see the different parts in de AWS console. We have now a VPC, CloudWatch log group, ECS cluster and task definition available. The next logical step in de AWS console would be to create the service, and find out at the latest step that you need to create a load balancer first. So in code we will define the load balancer first. The load balancer will route traffic via HTTP to the container.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;aws_security_group&quot; &quot;alb_sg&quot; {
  name   = &quot;blog-blog-alb-sg&quot;
  vpc_id = &quot;${module.vpc.vpc_id}&quot;

  ingress {
    protocol    = &quot;tcp&quot;
    from_port   = 80
    to_port     = 80
    cidr_blocks = [&quot;0.0.0.0/0&quot;]
  }

  egress {
    from_port = 0
    to_port   = 0
    protocol  = &quot;-1&quot;

    cidr_blocks = [&quot;0.0.0.0/0&quot;]
  }
}

resource &quot;aws_alb&quot; &quot;main&quot; {
  internal        = &quot;false&quot;
  subnets         = [&quot;${module.vpc.public_subnets}&quot;]
  security_groups = [&quot;${aws_security_group.alb_sg.id}&quot;]
}

resource &quot;aws_alb_listener&quot; &quot;main&quot; {
  load_balancer_arn = &quot;${aws_alb.main.id}&quot;
  port              = 80
  protocol          = &quot;HTTP&quot;

  default_action {
    target_group_arn = &quot;${aws_alb_target_group.main.id}&quot;
    type             = &quot;forward&quot;
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We connect a target group to the load balancer. The same target group will be used later in the service, the service can register itself to the target group with the actual IP address once up and running. For the target group we have to specify the target type &lt;code class=&quot;highlighter-rouge&quot;&gt;ip&lt;/code&gt; and not &lt;code class=&quot;highlighter-rouge&quot;&gt;instance&lt;/code&gt; since containers running in Fargate will get their own IP. Actually this not Fargate but &lt;code class=&quot;highlighter-rouge&quot;&gt;awsvpc&lt;/code&gt; behavior.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;aws_alb_target_group&quot; &quot;main&quot; {
  port        = &quot;80&quot;
  protocol    = &quot;HTTP&quot;
  vpc_id      = &quot;${module.vpc.vpc_id}&quot;
  target_type = &quot;ip&quot;
}

output &quot;blog_url&quot; {
  value = &quot;http://${aws_alb.main.dns_name}&quot;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Again we verify our new code by executing a &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt;.&lt;/p&gt;

&lt;asciinema-player src=&quot;/assets/2018-01-30-fargate_with_terraform/asciinema/fargate-terraform-3.json&quot; cols=&quot;166&quot; rows=&quot;15&quot; autoplay=&quot;true&quot; loop=&quot;true&quot; speed=&quot;1.5&quot;&gt;
&lt;/asciinema-player&gt;

&lt;p&gt;We are almost there, next we define the service. A task running in in network mode &lt;code class=&quot;highlighter-rouge&quot;&gt;awsvpc&lt;/code&gt;, requires a service that defines a network configuration. In the networking configuration we define a security group to control access to our containers, and we define the subnets in which the containers are hosted.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;aws_security_group&quot; &quot;awsvpc_sg&quot; {
  name   = &quot;blog-awsvpc-cluster-sg&quot;
  vpc_id = &quot;${module.vpc.vpc_id}&quot;

  ingress {
    protocol  = &quot;tcp&quot;
    from_port = 0
    to_port   = 65535

    cidr_blocks = [
      &quot;${module.vpc.vpc_cidr}&quot;,
    ]
  }

  egress {
    from_port   = 0
    to_port     = 65535
    protocol    = &quot;tcp&quot;
    cidr_blocks = [&quot;0.0.0.0/0&quot;]
  }

  tags {
    Name        = &quot;blog-ecs-cluster-sg&quot;
    Environment = &quot;blog&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The last resource to create is the service. In the service we connect the task, load balancer and security group together. By setting the launch type to &lt;code class=&quot;highlighter-rouge&quot;&gt;FARGATE&lt;/code&gt; we tell Amazon to deploy the container to Fargate.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
resource &quot;aws_ecs_service&quot; &quot;service&quot; {
  name            = &quot;blog&quot;
  cluster         = &quot;${aws_ecs_cluster.cluster.id}&quot;
  task_definition = &quot;${aws_ecs_task_definition.task.arn}&quot;
  desired_count   = 1

  load_balancer = {
    target_group_arn = &quot;${aws_alb_target_group.main.arn}&quot;
    container_name   = &quot;blog&quot;
    container_port   = 80
  }

  launch_type = &quot;FARGATE&quot;

  network_configuration {
    security_groups = [&quot;${aws_security_group.awsvpc_sg.id}&quot;]
    subnets         = [&quot;${module.vpc.private_subnets}&quot;]
  }

  depends_on = [&quot;aws_alb_listener.main&quot;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That is the last part of coding, run &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; and inspect the result.&lt;/p&gt;

&lt;asciinema-player src=&quot;/assets/2018-01-30-fargate_with_terraform/asciinema/fargate-terraform-4.json&quot; cols=&quot;166&quot; rows=&quot;15&quot; autoplay=&quot;true&quot; loop=&quot;true&quot; speed=&quot;1.5&quot;&gt;
&lt;/asciinema-player&gt;

&lt;p&gt;That is all, we have now our blog running as serverless container in AWS Fargate.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2018-01-30-fargate_with_terraform/img/ecs-fargate.png&quot; alt=&quot;Fargate&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;mixing-ec2-and-fargate-on-ecs&quot;&gt;Mixing EC2 and Fargate on ECS&lt;/h2&gt;
&lt;p&gt;Great we have now our container running in ECS with Fargate but what if we would like to move the container to a dedicated EC2 instances in ECS. Or what if we need that are not available in in Fargate, such as a volume mount? How difficult would it be to move our containers to an ECS cluster with dedicated EC2 instances? Time to do an experiment to see how difficult is is.&lt;/p&gt;

&lt;p&gt;First we refactor the above code to some &lt;a href=&quot;https://github.com/npalm/terraform-aws-ecs-service&quot;&gt;generic ecs service modules&lt;/a&gt; to be able to define our services with just a few lines of code. This module replaces all code of defining the load balancer, service and task. It still requires a VPC, ECS cluster, CloudWatch logging group, awsvpc security group and execution role. In the code you see a similar deployment of the blog but now with a generic ECS service module.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;locals {
  fg_container_name = &quot;blog&quot;
  fg_container_port = &quot;80&quot;
}

data &quot;template_file&quot; &quot;blog&quot; {
  template = &quot;${file(&quot;${path.root}/task-definition/blog.json&quot;)}&quot;

  vars {
    container_name   = &quot;${local.fg_container_name}&quot;
    container_port   = &quot;${local.fg_container_port}&quot;
    log_group_name   = &quot;${aws_cloudwatch_log_group.log_group.name}&quot;
    log_group_region = &quot;${var.aws_region}&quot;
    log_group_prefix = &quot;blog&quot;
  }
}

module &quot;blog-fg&quot; {
  source = &quot;npalm/ecs-service/aws&quot; // https://registry.terraform.io/modules/npalm/ecs-service/aws

  service_launch_type  = &quot;FARGATE&quot;
  service_name          = &quot;${local.fg_container_name}&quot;

  vpc_id       = &quot;${module.vpc.vpc_id}&quot;
  vpc_cidr     = &quot;${module.vpc.vpc_cidr}&quot;
  lb_subnetids = &quot;${module.vpc.public_subnets}&quot;
  ecs_cluster_id = &quot;${aws_ecs_cluster.cluster.id}&quot;
  lb_internal = false

  task_definition = &quot;${data.template_file.blog.rendered}&quot;
  task_cpu        = &quot;256&quot;
  task_memory     = &quot;512&quot;

  awsvpc_task_execution_role_arn = &quot;${aws_iam_role.ecs_tasks_execution_role.arn}&quot;
  awsvpc_service_security_groups = [&quot;${aws_security_group.awsvpc_sg.id}&quot;]
  awsvpc_service_subnetids       = &quot;${module.vpc.private_subnets}&quot;

  lb_target_group = {
    container_name = &quot;${local.fg_container_name}&quot;
    container_port = &quot;${local.fg_container_port}&quot;
  }

  lb_listener = {
    port     = 80
    protocol = &quot;HTTP&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We still have our container not running in ECS on EC2 instances. For that we first have to create EC2 instances that will be attached to the same ECS cluster. For more details about create the EC2 instances see the &lt;a href=&quot;https://github.com/npalm/terraform-aws-ecs-instances&quot;&gt;ecs instance repo&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;locals {
  key_name = &quot;blog&quot;
  environment = &quot;dev&quot;
}

resource &quot;aws_key_pair&quot; &quot;key&quot; {
  key_name   = &quot;${local.key_name}&quot;
  public_key = &quot;${file(&quot;id_rsa&quot;)}&quot;
}

module &quot;ecs_instances&quot; {
  source  = &quot;npalm/ecs-instances/aws&quot; // https://registry.terraform.io/modules/npalm/ecs-instances/aws

  ecs_cluster_name = &quot;${aws_ecs_cluster.cluster.name}&quot;
  aws_region       = &quot;${local.aws_region}&quot;
  environment      = &quot;${local.environment}&quot;
  key_name         = &quot;${local.key_name}&quot;
  vpc_id           = &quot;${module.vpc.vpc_id}&quot;
  vpc_cidr         = &quot;${module.vpc.vpc_cidr}&quot;
  subnets          = &quot;${module.vpc.private_subnets}&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we have our EC2 instances available we only have to copy the the blog module above and change the launch type to &lt;code class=&quot;highlighter-rouge&quot;&gt;EC2&lt;/code&gt;, and our container will be deployed to a dedicated EC2 instance.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
module &quot;blog-ec&quot; {
  source = &quot;npalm/ecs-service/aws&quot; // https://registry.terraform.io/modules/npalm/ecs-service/aws

  service_launch_type  = &quot;FARGATE&quot;
  service_name          = &quot;blog-ec2&quot;

  ... SAME AS ABOVE ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That is all, all sample code is available at &lt;a href=&quot;https://github.com/npalm/blog_terraform_aws_fargate&quot;&gt;GitHub&lt;/a&gt; see subdir &lt;code class=&quot;highlighter-rouge&quot;&gt;fargate-ec2&lt;/code&gt;. Time to run a &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; to see if it works.&lt;/p&gt;

&lt;asciinema-player src=&quot;/assets/2018-01-30-fargate_with_terraform/asciinema/fargate-ec2.json&quot; cols=&quot;166&quot; rows=&quot;15&quot; autoplay=&quot;true&quot; loop=&quot;true&quot; speed=&quot;1.5&quot;&gt;
&lt;/asciinema-player&gt;

&lt;p&gt;In the output you will find the two endpoint links to the blogs. After a few minutes both links will be active. You can also see the service running on the Amazon console, simply navigate to the ECS console and select the cluster. You should see now one service on Fargate and the second one on EC2.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2018-01-30-fargate_with_terraform/img/ecs-fargate-2.png&quot; alt=&quot;Fargate&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Niek&quot;, &quot;last_name&quot;=&gt;&quot;Palm&quot;, &quot;github&quot;=&gt;&quot;npalm&quot;, &quot;twitter&quot;=&gt;&quot;niekos77&quot;, &quot;linkedin&quot;=&gt;&quot;niekpalm&quot;, &quot;permalink&quot;=&gt;&quot;/author/niek/&quot;, &quot;header-img&quot;=&gt;&quot;img/noodle_niek.jpg&quot;, &quot;avatar&quot;=&gt;&quot;niek.jpg&quot;, &quot;email&quot;=&gt;&quot;dev.npalm@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;I am developing for more than a decade software, mainly based on open source stacks. Currently I am having a full stack focus with my strengths on the backend related services, cloud and continuous delivery. Technologies that me keep busy now a days are: AWS, Terraform, Spring Cloud, React, React Native, Continuous Deliver, Docker, Elastic Search and much more. \n\n But cool technologies are not my only passions. I love to just crab by backpack and go around. Creating some nice meals and exploring the creative area of a cook is one of my favourite hobbies. Drinking a great craft beer is something that I love too. And from time to time the body needs some real exercise so I like to have a run or do a hike.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-04-20-discovery-agent.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-04-21-gitlab-perodic-build.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-07-docker-multi-stage-builds.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-20-nextbuild-graphql.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-06-18-terraform-aws-vpc.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-06-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-08-fsf-fontend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-19-talk-immutable-infrastructure.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-10-19-graphql-geecon.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-11-24-runners-on-the-spot.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-01-30-fargate_with_terraform.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-02-14-service-discovery.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-05-26-talk-taipei.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-09-04-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-09-18-fsf-frontend.md collection=posts&gt;]}</name><email>dev.npalm@gmail.com</email></author><category term="aws" /><category term="terraform" /><category term="docker" /><category term="microhack" /><summary type="html">Last December at the AWS re:invent, AWS announced the new container service platform Fargate. Fargate is integrated to ECS. The key difference is that Fargate does not require you to have EC2 instances running to host your containers, which means we have serverless containers. A drawback is that Fargate is not globally available yet, today Fargate is only available in us-east-1, see also the list of supported regions. Later in December Fargate also become available in Terraform so time to see how it works.</summary></entry><entry><title type="html">Runners on the Spot</title><link href="https://040code.github.io//2017/12/09/runners-on-the-spot/" rel="alternate" type="text/html" title="Runners on the Spot" /><published>2017-12-09T00:00:00+00:00</published><updated>2017-12-09T00:00:00+00:00</updated><id>https://040code.github.io//2017/12/09/runners-on-the-spot</id><content type="html" xml:base="https://040code.github.io//2017/12/09/runners-on-the-spot/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://about.gitlab.com/features/gitlab-ci-cd/&quot;&gt;GitLab CI&lt;/a&gt; is a first class citizen in GitLab to enable continuous integration and delivery to your project. Builds are orchestrated via &lt;a href=&quot;https://docs.gitlab.com/runner/&quot;&gt;GitLab Runners&lt;/a&gt;, which are agents registered to your GitLab account. An agent runs builds using a local shell or a container. Runnings these builds requires a well-defined infrastructure, both with respect to the type of server and the server capacity. Would it not be great if you can scale the infrastructure based on your needs? Indeed, GitLabs runner supports out of the box auto scaling using docker machine, which is discussed in the GitLab blog article: &lt;a href=&quot;https://about.gitlab.com/2017/11/23/autoscale-ci-runners/&quot;&gt;Autoscale GitLab CI runners and save 90% on EC2 costs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The GitLab blog article nicely explains how to create your infrastructure in a manual way. However, we rather automate all things. Thus, we will automate the set up described in the blog article. In this post I will discuss how to create the infrastructure needed to run the build on AWS spot instances with &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Hashicorp Terraform&lt;/a&gt;. The GitLab Runner module discussed in the post is available in the &lt;a href=&quot;https://registry.terraform.io/modules/npalm/gitlab-runner/aws/0.1.0&quot;&gt;Terraform Registery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2017-12-09_runners-on-the-spot/img/gitlab-runner.png&quot; alt=&quot;GitLab Runner&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Before we start, we need to briefly discuss the GitLab runners. To execute the builds, GitLab uses an agent to orchestrate the build with a docker machine. A docker machine creates instances with docker engine to run docker containers. The first step for setting up a runner is to register a new runner. Because GitLab currently does not provide a fully automated way for this, we will do this manually.&lt;/p&gt;

&lt;p&gt;Open you GitLab project and lookup the token to register a runner. Be aware that there are project tokens and a GitLab global token. Next, we use a docker container to register a runner. The command will ask a few details.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it --rm gitlab/gitlab-runner register
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;asciinema-player src=&quot;/assets/2017-12-09_runners-on-the-spot/asciinema/register.json&quot; cols=&quot;166&quot; rows=&quot;15&quot; autoplay=&quot;true&quot; loop=&quot;true&quot; speed=&quot;1.5&quot;&gt;
&lt;/asciinema-player&gt;

&lt;p&gt;Provide the requested details and consult the GitLab manual for more details. Once done, you should see a new runner registered at your project or globally. Open the runner settings in edit mode and record the token. This token is needed later for connecting the agent.&lt;/p&gt;

&lt;h2 id=&quot;creating-infrastructure-for-the-runners&quot;&gt;Creating infrastructure for the runners&lt;/h2&gt;
&lt;p&gt;Now the runner is configured in GitLab, we can start creating the infrastructure on AWS. For setting up the network layers, we use &lt;a href=&quot;http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Scenario2.html&quot;&gt;Amazon networking scenario 2&lt;/a&gt; to build a VPC with a public and private subnets. For more details see this &lt;a href=&quot;/2017/06/18/terraform-aws-vpc/&quot;&gt;post&lt;/a&gt; about creating a VPC in terraform. You can also simply use the &lt;a href=&quot;https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws/1.7.0&quot;&gt;official terraform module&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
module &quot;vpc&quot; {
  source  = &quot;terraform-aws-modules/vpc/aws&quot;
  version = &quot;1.5.1&quot;

  name = &quot;vpc-${var.environment}&quot;
  cidr = &quot;10.0.0.0/16&quot;

  azs             = [&quot;eu-west-1a&quot;, &quot;eu-west-1b&quot;, &quot;eu-west-1c&quot;]
  private_subnets = [&quot;10.0.1.0/24&quot;, &quot;10.0.2.0/24&quot;, &quot;10.0.3.0/24&quot;]
  public_subnets  = [&quot;10.0.101.0/24&quot;, &quot;10.0.102.0/24&quot;, &quot;10.0.103.0/24&quot;]

  enable_nat_gateway = true

  tags = {
    Environment = &quot;${var.environment}&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we create a &lt;code class=&quot;highlighter-rouge&quot;&gt;t2.micro&lt;/code&gt; instance using an autoscaling group in the private network. On this instance we install and configure the GitLab runner. Configuration of GitLab runners is done via the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.toml&lt;/code&gt; file. Below the parameterized version of this configuration file. In the Terraform module you will find that the configuration file is loaded via a data template.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;concurrent = ${runner_concurrent}
check_interval = 0

[[runners]]
  name = &quot;${runners_name}&quot;
  url = &quot;${gitlab_url}&quot;
  token = &quot;${runners_token}&quot;
  executor = &quot;docker+machine&quot;
  limit = ${runners_limit}
  [runners.docker]
    tls_verify = false
    image = &quot;docker:17.11.0-ce&quot;
    privileged = ${runners_privilled}
    disable_cache = false
    volumes = [&quot;/cache&quot;]
    shm_size = 0
  [runners.cache]
    Type = &quot;s3&quot;
    ServerAddress = &quot;s3-${aws_region}.amazonaws.com&quot;
    AccessKey = &quot;${bucket_user_access_key}&quot;
    SecretKey = &quot;${bucket_user_secret_key}&quot;
    BucketName = &quot;${bucket_name}&quot;
    Insecure = false
  [runners.machine]
    IdleCount = ${runners_idle_count}
    IdleTime = ${runners_idle_time}
    MachineDriver = &quot;amazonec2&quot;
    MachineName = &quot;runner-%s&quot;
    MachineOptions = [
      &quot;amazonec2-access-key=${access_key}&quot;,
      &quot;amazonec2-secret-key=${secret_key}&quot;,
      &quot;amazonec2-instance-type=${instance_type}&quot;,
      &quot;amazonec2-region=${aws_region}&quot;,
      &quot;amazonec2-vpc-id=${vpc_id}&quot;,
      &quot;amazonec2-subnet-id=${subnet_id}&quot;,
      &quot;amazonec2-private-address-only=true&quot;,
      &quot;amazonec2-request-spot-instance=true&quot;,
      &quot;amazonec2-spot-price=${spot_price_bid}&quot;,
      &quot;amazonec2-security-group=${security_group_name}&quot;
    ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All variables can be configured and most of them have default values. Only the name of the runner, the token and the GitLab URL need to be configured. The configuration contains a shared cache in S3 which will expire at the end of the next day (after creation) by default. Files will be deleted via S3 lifecycle management once expired, but the number of expiration days can be changed to your needs. You can find all the available variables in the &lt;code class=&quot;highlighter-rouge&quot;&gt;variables.tf&lt;/code&gt; file of the module. Next we add the module to our Terraform file and define a minimal set of variables.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module &quot;gitlab-runner&quot; {
  source = &quot;npalm/gitlab-runner/aws&quot;

  aws_region     = &quot;&amp;lt;region-to-use&amp;gt;&quot;
  environment    = &quot;ci-runners&quot;
  ssh_public_key = &quot;&amp;lt;contains-public-key&quot;

  vpc_id                  = &quot;${module.vpc.vpc_id}&quot;
  subnet_id_gitlab_runner = &quot;${element(module.vpc.private_subnets, 0)}&quot;
  subnet_id_runners       = &quot;${element(module.vpc.private_subnets, 0)}&quot;

  # Values below are created during the registration process of the runner.
  runner_name       = &quot;&amp;lt;name-of-the-runner&quot;
  runner_gitlab_url = &quot;&amp;lt;gitlab-url&amp;gt;&quot;
  runner_token      = &quot;&amp;lt;token-of-the-runner&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The complete example is in &lt;a href=&quot;https://github.com/npalm/terraform-aws-gitlab-runner/tree/master/example&quot;&gt;GitHub&lt;/a&gt;. Now it is time to execute the scripts to create the actual infrastructure. Be aware that you need to configure AWS keys and have Terraform installed. The steps below should guide you through the setup.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/npalm/terraform-aws-gitlab-runner.git
cd tf-aws-gitlab-runner/example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The example directory contains the example as described above, so the properties for your newly registered runner in GitLab need to be configured. Please register a runner in GitLab (see docker command above) and update the &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform.tfvars&lt;/code&gt; file. That is all, now execute the Terraform code.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# genere SSH key pair
./init.sh

# initialize terraform
terraform init

# apply, or plan first
terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;asciinema-player src=&quot;/assets/2017-12-09_runners-on-the-spot/asciinema/terraform.json&quot; cols=&quot;166&quot; rows=&quot;15&quot; autoplay=&quot;true&quot; loop=&quot;true&quot; speed=&quot;1.5&quot;&gt;
&lt;/asciinema-player&gt;

&lt;p&gt;After a few minutes the runner should be running and you should see it in your AWS console.
&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2017-12-09_runners-on-the-spot/img/ec2.png&quot; alt=&quot;Running EC2 instances&quot; /&gt;
&lt;/a&gt;
&lt;br /&gt;
The runner should be active as well in GitLab. Check the runner pages which should now indicate the latest moment of contact.
&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2017-12-09_runners-on-the-spot/img/runner.png&quot; alt=&quot;GitLab Runner details&quot; /&gt;
&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The modules also enable CloudWatch logging, all &lt;code class=&quot;highlighter-rouge&quot;&gt;systemd&lt;/code&gt; logging is streamed. Go to CloudWatch to inspect the logging and you will see that the installation process was logged as well.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2017-12-09_runners-on-the-spot/img/cloudwatch.png&quot; alt=&quot;CloudWatch logging&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;verify&quot;&gt;Verify&lt;/h2&gt;

&lt;p&gt;Finally we can verify that the runner is working properly by executing a build. The &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt; below is an example to verify the runner is working properly. The build contains two stages. In the first stage an ascii art image is generated, stored in a file which is cached in S3. In the second stage the file is retrieved from the build cache.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
stages:
  - build
  - verify

cache:
  key: &quot;$CI_BUILD_REF&quot;
  untracked: true

image: npalm/cowsay

build:
  stage: build

  script:
    - cowsay -f ghostbusters building &quot;$CI_BUILD_NAME&quot; @ stage &quot;$CI_BUILD_STAGE&quot; &amp;gt; ghosts.txt

  tags:
     - docker.m3

verify:
  stage: verify

  script:
    - cat ghosts.txt

  tags:
    - docker.m3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the file above to the GitLab repository that has the created runner attached. Once you commit the file a build should triggered. The logging of the verification step should contain the ascii art image.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2017-12-09_runners-on-the-spot/img/ghost.png&quot; alt=&quot;Build log&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;warning&quot;&gt;Warning&lt;/h2&gt;
&lt;p&gt;Be aware that prices of a spot instance can change over the time and instances can be terminated without a warning. Last black Friday prices of spot instances went up to over 2 dollar occasionally.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Niek&quot;, &quot;last_name&quot;=&gt;&quot;Palm&quot;, &quot;github&quot;=&gt;&quot;npalm&quot;, &quot;twitter&quot;=&gt;&quot;niekos77&quot;, &quot;linkedin&quot;=&gt;&quot;niekpalm&quot;, &quot;permalink&quot;=&gt;&quot;/author/niek/&quot;, &quot;header-img&quot;=&gt;&quot;img/noodle_niek.jpg&quot;, &quot;avatar&quot;=&gt;&quot;niek.jpg&quot;, &quot;email&quot;=&gt;&quot;dev.npalm@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;I am developing for more than a decade software, mainly based on open source stacks. Currently I am having a full stack focus with my strengths on the backend related services, cloud and continuous delivery. Technologies that me keep busy now a days are: AWS, Terraform, Spring Cloud, React, React Native, Continuous Deliver, Docker, Elastic Search and much more. \n\n But cool technologies are not my only passions. I love to just crab by backpack and go around. Creating some nice meals and exploring the creative area of a cook is one of my favourite hobbies. Drinking a great craft beer is something that I love too. And from time to time the body needs some real exercise so I like to have a run or do a hike.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-04-20-discovery-agent.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-04-21-gitlab-perodic-build.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-07-docker-multi-stage-builds.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-20-nextbuild-graphql.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-06-18-terraform-aws-vpc.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-06-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-08-fsf-fontend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-19-talk-immutable-infrastructure.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-10-19-graphql-geecon.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-11-24-runners-on-the-spot.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-01-30-fargate_with_terraform.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-02-14-service-discovery.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-05-26-talk-taipei.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-09-04-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-09-18-fsf-frontend.md collection=posts&gt;]}</name><email>dev.npalm@gmail.com</email></author><category term="gitlab" /><category term="docker" /><category term="aws" /><category term="terraform" /><summary type="html">Introduction</summary></entry><entry><title type="html">GraphQL</title><link href="https://040code.github.io//2017/10/19/graphql-geecon/" rel="alternate" type="text/html" title="GraphQL" /><published>2017-10-19T00:00:00+00:00</published><updated>2017-10-19T00:00:00+00:00</updated><id>https://040code.github.io//2017/10/19/graphql-geecon</id><content type="html" xml:base="https://040code.github.io//2017/10/19/graphql-geecon/">&lt;p&gt;A short post to share the slides and examples I used in my talk at the &lt;a href=&quot;https://2017.geecon.cz&quot;&gt;GeeCON&lt;/a&gt; conference on October the 19th in Prague.&lt;/p&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;
&lt;p&gt;Below the slides that I for the talk, the slides are available as well on &lt;a href=&quot;https://npalm.github.io/graphql-slides-20171019/&quot;&gt;GitHub&lt;/a&gt;. You can easy navigate through the slides with the spacebar.&lt;/p&gt;

&lt;div style=&quot;position:relative; width:100%; height:0px; padding-bottom:56.25%;&quot;&gt;
    &lt;iframe style=&quot;position:absolute; left:0; top:0; width:100%; height:100%&quot; src=&quot;https://npalm.github.io/graphql-slides-20171019/&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;To get started with GraphQL the best starting points are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://graphql.org&quot;&gt;GraphQL.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chentsulin/awesome-graphql&quot;&gt;Awesome GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;
&lt;p&gt;During the talk, I demonstrated GraphQL via &lt;a href=&quot;https://www.graph.cool/&quot;&gt;graphcool&lt;/a&gt;, which is cloud service for creating a flexible GraphGL backend. I modelled a basic model of a Talk and Person with relation speakers and visitors on graphcool. Furthermore, I modelled two basic sample implementations of a GraphQL backend in Java and JavaScript that are available via GitHub. Those implementation are more limited than the online one, but both serve the following minimal queries.&lt;/p&gt;

&lt;p&gt;Query for the name and the title of the talks given by all persons:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  persons {
    name
    talks {
      title
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And secondly, a query for all titles of talks with their speaker’s names.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  talks {
    title
    speakers {
      name
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;javascript-sample&quot;&gt;JavaScript sample&lt;/h3&gt;
&lt;p&gt;The JavaScript &lt;a href=&quot;https://github.com/npalm/graphql-js-demo.git&quot;&gt;sample&lt;/a&gt; is based on &lt;a href=&quot;https://github.com/apollostack/apollo-starter-kit&quot;&gt;Apollo GraphQL tutorial kit&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/npalm/graphql-js-demo.git
cd graphql-js-demo
yarn &amp;amp;&amp;amp; yarn start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Instead of yarn, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install &amp;amp;&amp;amp; npm start&lt;/code&gt;. Once started, browse to &lt;a href=&quot;http://localhost:8080/graphiql&quot;&gt;http://localhost:8080/graphiql&lt;/a&gt; and play around with the GraphQL web interface. Implementing the JavaScript version was straightforward due to the many examples and good tutorials around.&lt;/p&gt;

&lt;h3 id=&quot;spring-boot-java-sample&quot;&gt;Spring Boot Java sample&lt;/h3&gt;
&lt;p&gt;The Spring Boot Java &lt;a href=&quot;https://github.com/npalm/graphql-java-demo.git&quot;&gt;sample&lt;/a&gt; is based on the Spring Boot Starter available for GraphQL and GraphQL java tools lib with schema first support.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/npalm/graphql-java-demo.git
git checkout nextbuild
cd graphql-java-demo
docker build -t graphql-java-demo &amp;amp;&amp;amp; docker run -it --rm -p 8080:8080 graphql-java-demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, you can build and run via gradle. Once started, browse to &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt; to play around with the GraphQL web interface.&lt;/p&gt;

&lt;p&gt;Many languages already have support, so feel free to try out your favourite language. Currently the support on JavaScript looks like by far the best.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Niek&quot;, &quot;last_name&quot;=&gt;&quot;Palm&quot;, &quot;github&quot;=&gt;&quot;npalm&quot;, &quot;twitter&quot;=&gt;&quot;niekos77&quot;, &quot;linkedin&quot;=&gt;&quot;niekpalm&quot;, &quot;permalink&quot;=&gt;&quot;/author/niek/&quot;, &quot;header-img&quot;=&gt;&quot;img/noodle_niek.jpg&quot;, &quot;avatar&quot;=&gt;&quot;niek.jpg&quot;, &quot;email&quot;=&gt;&quot;dev.npalm@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;I am developing for more than a decade software, mainly based on open source stacks. Currently I am having a full stack focus with my strengths on the backend related services, cloud and continuous delivery. Technologies that me keep busy now a days are: AWS, Terraform, Spring Cloud, React, React Native, Continuous Deliver, Docker, Elastic Search and much more. \n\n But cool technologies are not my only passions. I love to just crab by backpack and go around. Creating some nice meals and exploring the creative area of a cook is one of my favourite hobbies. Drinking a great craft beer is something that I love too. And from time to time the body needs some real exercise so I like to have a run or do a hike.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-04-20-discovery-agent.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-04-21-gitlab-perodic-build.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-07-docker-multi-stage-builds.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-20-nextbuild-graphql.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-06-18-terraform-aws-vpc.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-06-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-08-fsf-fontend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-19-talk-immutable-infrastructure.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-10-19-graphql-geecon.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-11-24-runners-on-the-spot.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-01-30-fargate_with_terraform.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-02-14-service-discovery.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-05-26-talk-taipei.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-09-04-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2018-09-18-fsf-frontend.md collection=posts&gt;]}</name><email>dev.npalm@gmail.com</email></author><category term="graphql" /><summary type="html">A short post to share the slides and examples I used in my talk at the GeeCON conference on October the 19th in Prague.</summary></entry></feed>