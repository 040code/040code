<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://040code.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://040code.github.io//" rel="alternate" type="text/html" /><updated>2019-04-18T21:47:29+00:00</updated><id>https://040code.github.io//</id><title type="html">040 Code</title><subtitle>A developers blog</subtitle><entry><title type="html">Cloud Run</title><link href="https://040code.github.io//2019/04/18/cloudrun/" rel="alternate" type="text/html" title="Cloud Run" /><published>2019-04-18T00:00:00+00:00</published><updated>2019-04-18T00:00:00+00:00</updated><id>https://040code.github.io//2019/04/18/cloudrun</id><content type="html" xml:base="https://040code.github.io//2019/04/18/cloudrun/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Last week at the &lt;a href=&quot;https://cloud.withgoogle.com/next/sf/&quot;&gt;Google Next&lt;/a&gt; in San Francisco, Google announced &lt;a href=&quot;https://cloud.google.com/run/&quot;&gt;Cloud Run&lt;/a&gt;. A new platform to enable developers without any infrastructure to run Docker containers on Google Cloud.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cloud Run is a managed compute platform that enables you to run stateless containers that are invocable via HTTP requests. Cloud Run is serverless: it abstracts away all infrastructure management, so you can focus on what matters most — building great applications. It is built from &lt;a href=&quot;https://github.com/knative/&quot;&gt;Knative&lt;/a&gt;, letting you choose to run your containers either fully managed with Cloud Run, or in your Google Kubernetes Engine cluster with Cloud Run on GKE.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2019-04-18_cloudrun/next.jpg&quot; alt=&quot;Model&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Time the see how this new feature on the Google Platform really works. There are two ways to use Cloud Run. You can choose to run the container serverless, which means you do not have to create any infrastructure. The other option is deploy the container via the Cloud Run to a GKE cluster. From developers perspective there is no difference, the developer can still use the same Cloud Run API.&lt;/p&gt;

&lt;p&gt;Lets quickly compare Cloud Run to some other option to run an application sereverless in the cloud. For example you can use &lt;a href=&quot;https://zeit.co/now&quot;&gt;Now&lt;/a&gt; from Zeit to quickly run a serverless application build in many languages, some major are Node, Rust, Static, Python, Go and NextJS. The free tier get you started quickly. In the paid tier you pay for traffic and invocations. &lt;a href=&quot;https://aws.amazon.com/fargate/&quot;&gt;Fargate&lt;/a&gt; the the AWS approach to enable serverless Docker containers. But in Fargate you container is always running and you pay per second for CPU and memory. Read &lt;a href=&quot;https://040code.github.io/2018/01/30/fargate_with_terraform/&quot;&gt;here&lt;/a&gt; more about deploying to Fargate.&lt;/p&gt;

&lt;h2 id=&quot;deploy-the-040-blog-to-cloud-run&quot;&gt;Deploy the 040 blog to Cloud Run&lt;/h2&gt;

&lt;p&gt;Why not see if we can publish this blog to Cloud Run. Starting is quit simple, just follow the Google documentation. Go to the Google Cloud console and navigate to Cloud Run. You will see here that deploying a container requires two steps. First publish the Docker image to the Docker registry in your Google project. Next deploy the docker image to Cloud Run.&lt;/p&gt;

&lt;h3 id=&quot;prepare-your-image&quot;&gt;Prepare your image&lt;/h3&gt;

&lt;p&gt;On the Cloud Run create service page is clearly mentioned that the containers needs support injection of a port that listen for HTTP traffic via the environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;PORT&lt;/code&gt;. This is for example easy to support via the Spring Boot framework. But for the blog we allready have an &lt;a href=&quot;https://www.nginx.com/&quot;&gt;NGINX&lt;/a&gt; container which not support injection of the port.&lt;/p&gt;

&lt;p&gt;The first step will be to enable port injection to our blog runtime container. Which can be done by starting the container via a wrapper script which update the NGNIX configuration. We define a simple server configuration in which we can replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;NGNIX_PORT&lt;/code&gt; environment variable via &lt;a href=&quot;https://www.gnu.org/software/gettext/manual/html_node/envsubst-Invocation.html&quot;&gt;envsubst&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt;       $&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;NGNIX_PORT&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we create a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; script to update the &lt;code class=&quot;highlighter-rouge&quot;&gt;PORT&lt;/code&gt; at container start. If no port is set, we apply use the default port &lt;code class=&quot;highlighter-rouge&quot;&gt;80&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NGNIX_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PORT&lt;/span&gt;:&lt;span class=&quot;p&quot;&gt;=80&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
envsubst &amp;lt; /etc/nginx/conf.d/mysite.template &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/nginx/conf.d/default.conf &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;nginx &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'daemon off;'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally we update the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; to add the new assets and ensure the &lt;code class=&quot;highlighter-rouge&quot;&gt;start.sh&lt;/code&gt; script is invoked at container start.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Docker&quot;&gt;FROM jekyll/jekyll:3.8.3 AS build

... OMITTED ...

FROM nginx:1.15.3
COPY --from=build /build/_site /usr/share/nginx/html

### copy wrappers and configuration template
COPY nginx/default.conf /etc/nginx/conf.d/mysite.template
COPY nginx/start.sh /usr/bin

CMD [&quot;start.sh&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was the hard part, our image is ready. You can test your image locally. For example on port &lt;code class=&quot;highlighter-rouge&quot;&gt;8081&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Docker build -t blog .
Docker run -e PORT=8080 -p 8081:8080 blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;publish-the-image-to-google-cloud&quot;&gt;Publish the image to Google Cloud&lt;/h3&gt;

&lt;p&gt;You can publish the Docker image to the &lt;code class=&quot;highlighter-rouge&quot;&gt;gcr.io&lt;/code&gt; registry by building locally and push the Docker image. Or by using Google Cloud Build to build the container. We use the power of the cloud and let Goolge build the image.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud builds submit --tag gcr.io/&amp;lt;project-id&amp;gt;/blog&lt;/code&gt;&lt;/p&gt;

&lt;asciinema-player src=&quot;/assets/2019-04-18_cloudrun/build.json&quot; cols=&quot;180&quot; rows=&quot;15&quot; autoplay=&quot;true&quot; loop=&quot;true&quot; speed=&quot;2.5&quot;&gt;
&lt;/asciinema-player&gt;

&lt;p&gt;This will build the Docker image in Google’s cloud build and push it to the registry.&lt;/p&gt;

&lt;h3 id=&quot;deploy-the-blog&quot;&gt;Deploy the blog&lt;/h3&gt;

&lt;p&gt;Finally we have to deploy the service via cloud run. You can do this via the web interface, or via the cli.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2019-04-18_cloudrun/cloudrun.png&quot; alt=&quot;Model&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the web interface it is straightforward to deploy to Cloud Run. In the cli it is not hard bu you need te be aware that cloud run is beta which requires to install the beta components.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud components install beta
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next you specify the same properties as you should do via the web interface. Currently Cloud Run is only available in the region &lt;code class=&quot;highlighter-rouge&quot;&gt;us-central1&lt;/code&gt;. Since we run a public site we allow unauthenticated traffic.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud beta run deploy blog \
  --image gcr.io/&amp;lt;project-id&amp;gt;/blog:latest \
  --region us-central1 --allow-unauthenticated
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;asciinema-player src=&quot;/assets/2019-04-18_cloudrun/deploy.json&quot; cols=&quot;180&quot; rows=&quot;15&quot; autoplay=&quot;true&quot; loop=&quot;true&quot; speed=&quot;2.5&quot;&gt;
&lt;/asciinema-player&gt;

&lt;h2 id=&quot;some-final-thoughts&quot;&gt;Some final thoughts&lt;/h2&gt;

&lt;p&gt;The first impression is that Cloud Run is quit easy to set up. Good to mention is that is based on the Open Source project &lt;a href=&quot;https://github.com/knative/&quot;&gt;Knative&lt;/a&gt;. At the moment the feature is in beta and there is no support in other regions.&lt;/p&gt;

&lt;p&gt;In this post we show just the basics of CLoud Run. It is really super easy to deploy you docker containers to the cloud for low costs. Could be handy for example to review branches. But there is a lot more, containers can be protected and only accept authenticated traffic. Furthermore with integration to Cloud Build it is easy to setup a CI/CD pipeline for &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;https://bitbucket.org&quot;&gt;Bitbucket&lt;/a&gt; and Cloud Source Repository. With &lt;a href=&quot;https://gitlab.com&quot;&gt;GitLab CI&lt;/a&gt; setting up a pipeline for Cloud Run is almost a no brainer. And for deployment GitLab already supports Knative to deploy to a Kubernetes cluster.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Niek&quot;, &quot;last_name&quot;=&gt;&quot;Palm&quot;, &quot;github&quot;=&gt;&quot;npalm&quot;, &quot;twitter&quot;=&gt;&quot;niekos77&quot;, &quot;linkedin&quot;=&gt;&quot;niekpalm&quot;, &quot;permalink&quot;=&gt;&quot;/author/niek/&quot;, &quot;header-img&quot;=&gt;&quot;img/noodle_niek.jpg&quot;, &quot;avatar&quot;=&gt;&quot;niek.jpg&quot;, &quot;email&quot;=&gt;&quot;dev.npalm@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;I am developing for more than a decade software, mainly based on open source stacks. Currently I am having a full stack focus with my strengths on the backend related services, cloud and continuous delivery. Technologies that me keep busy now a days are: AWS, Terraform, Spring Cloud, React, React Native, Continuous Deliver, Docker, Elastic Search and much more. \n\n But cool technologies are not my only passions. I love to just crab by backpack and go around. Creating some nice meals and exploring the creative area of a cook is one of my favourite hobbies. Drinking a great craft beer is something that I love too. And from time to time the body needs some real exercise so I like to have a run or do a hike.&quot;}</name><email>dev.npalm@gmail.com</email></author><category term="cloud" /><category term="google" /><category term="docker" /><summary type="html">Introduction Last week at the Google Next in San Francisco, Google announced Cloud Run. A new platform to enable developers without any infrastructure to run Docker containers on Google Cloud.</summary></entry><entry><title type="html">React Native Navigation and ClojureScript</title><link href="https://040code.github.io//2019/04/02/react-native-navigation-and-clojurescript/" rel="alternate" type="text/html" title="React Native Navigation and ClojureScript" /><published>2019-04-02T00:00:00+00:00</published><updated>2019-04-02T00:00:00+00:00</updated><id>https://040code.github.io//2019/04/02/react-native-navigation-and-clojurescript</id><content type="html" xml:base="https://040code.github.io//2019/04/02/react-native-navigation-and-clojurescript/">&lt;h1 id=&quot;react-native-navigation-and-clojurescript&quot;&gt;React Native Navigation and ClojureScript&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;A beginner’s guide to realizing proper navigation in a React Native application
using ClojureScript and shadow-cljs&lt;/em&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: right&quot;&gt;
  &lt;a href=&quot;https://github.com/svdo/CLJSReactNativeNavigation&quot; target=&quot;sourcecode&quot;&gt;&lt;img src=&quot;/assets/2019-04-02-rnn-clojurescript/GitHub-Mark-120px-plus.png&quot; height=&quot;40&quot; width=&quot;40&quot; alt=&quot;GitHub&quot; style=&quot;display: inline; margin-right: 10px;&quot; /&gt;Source code for this post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s a big bunch of words. Let me briefly introduce them to you, so that I can
then dive deeper into some of them. “Beginner” in this case means that, a week
before I started doing this, I had practically zero experience with
Clojure(Script) and React Native. I do have quite a bit of experience using
React, and also writing native iOS applications (Swift/Objective-C).&lt;/p&gt;

&lt;p&gt;“Guide” means that I’m going to explain to you how I accomplished my goal.
You’ll have to interpret it and follow along if you want to do the same. Future
versions of any of the tools may break this guide.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wix.github.io/react-native-navigation&quot;&gt;React Native Navigation&lt;/a&gt; is a framework for &lt;a href=&quot;https://facebook.github.io/react-native&quot;&gt;React Native&lt;/a&gt;. Which is a
framework for building cross-platform apps for iOS and Android using JavaScript,
but you probably already knew that part. &lt;a href=&quot;https://clojurescript.org&quot;&gt;ClojureScript&lt;/a&gt; is a functional
programming language. It’s a variant of Clojure that compiles to JavaScript.
“Proper navigation” is, admittedly, a bit subjective; I’ll explain this part in
more detail below. Finally, &lt;a href=&quot;http://shadow-cljs.org&quot;&gt;shadow-cljs&lt;/a&gt; is the toolchain I used
 as an easy way to integrate a bunch of ClojureScript code into an originally
Javascript-based project.&lt;/p&gt;

&lt;p&gt;A summary of this guide is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Setup a new React Native project (using &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native&lt;/code&gt; cli).&lt;/li&gt;
  &lt;li&gt;Add shadow-cljs to be able to use ClojureScript in that project.&lt;/li&gt;
  &lt;li&gt;Add and setup &lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-navigation&lt;/code&gt; dependency.&lt;/li&gt;
  &lt;li&gt;Create a bit of infrastructure on the ClojureScript side to be able to use
the React Native Navigation APIs while using shadow-cljs’ hot reloading.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So let’s get started. I executed all these steps exactly as I’m describing here,
the result of which you can find in &lt;a href=&quot;https://github.com/svdo/CLJSReactNativeNavigation&quot;&gt;my GitHub repo&lt;/a&gt;. Commit messages
include all details about the commands I used. If you want to read my
rant about wanting to use native navigation, keep reading till the very end of
this post :)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please note that this post &lt;em&gt;does not&lt;/em&gt; include all the code that you need
to make it work, that would be too much for a web page. Please refer to
&lt;a href=&quot;https://github.com/svdo/CLJSReactNativeNavigation&quot;&gt;the final solution in my GitHub repo&lt;/a&gt; if you want to reproduce all of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;1-create-react-native-project&quot;&gt;1. Create React Native Project&lt;/h1&gt;

&lt;p&gt;This step is very easy. First, if you haven’t got it yet, install
&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-cli&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; react-native-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then create a new project:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native init CLJSReactNativeNavigation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So far so good, nothing new here, let’s move on.&lt;/p&gt;

&lt;h1 id=&quot;2-add-shadow-cljs&quot;&gt;2. Add shadow-cljs&lt;/h1&gt;

&lt;p&gt;We’re going to use the standalone version of shadow-cljs,
&lt;a href=&quot;https://shadow-cljs.github.io/docs/UsersGuide.html#_build_tool_integration&quot;&gt;as recommended&lt;/a&gt;. So we add the npm dependency for shadow-cljs:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn add &lt;span class=&quot;nt&quot;&gt;--dev&lt;/span&gt; shadow-cljs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we need to configure shadow-cljs a bit. We create a file called
&lt;code class=&quot;highlighter-rouge&quot;&gt;shadow-cljs.edn&lt;/code&gt; and give it the following content:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:source-paths&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/main&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                     &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; production code&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; yes we're going to add tests as well!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

 &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:dependencies&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reagent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.8.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

 &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:builds&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:myapp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; the target definition&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:target&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:react-native&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; the target type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:init-fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myapp/init&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; react native's entry point&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:output-dir&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; where to put the built JS&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is telling shadow-cljs that there is a target called “myapp”, that
it’s a React Native target, that the entry point of our app is the function
&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp&lt;/code&gt; namespace, and that the output should be written to the
folder &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let’s create that &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp&lt;/code&gt; namespace. In &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main&lt;/code&gt; create a file called
&lt;code class=&quot;highlighter-rouge&quot;&gt;myapp.cljs&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reagent.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:refer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;react-native&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:refer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppRegistry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app-root&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rn/View&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:style&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:flex-direction&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;column&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                       &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:margin&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                       &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:align-items&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                       &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:background-color&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;white&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rn/Text&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:style&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:font-size&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:font-weight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:margin-bottom&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:text-align&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hi Shadow!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.registerComponent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppRegistry&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                      &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CLJSReactNativeNavigation&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r/reactify-component&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app-root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Time to check this out! Run the following commands in your terminal:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn shadow-cljs compile myapp
yarn react-native run-ios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Tada!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2019-04-02-rnn-clojurescript/Hi%20Shadow%21.png&quot; height=&quot;50%&quot; width=&quot;50%&quot; alt=&quot;Tada!&quot; style=&quot;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;hot-reloading&quot;&gt;Hot Reloading&lt;/h2&gt;

&lt;p&gt;When using shadow-cljs, you also get its variant of hot reloading. You don’t
need to use the developer menu to enable it, but you do need to add a bit of
code to make it work: (a) you need to had a function that performs the reload,
and (b) you need to enable hot reloading in the config.&lt;/p&gt;

&lt;h3 id=&quot;add-reload-function&quot;&gt;Add reload function&lt;/h3&gt;

&lt;p&gt;Let me just give you the code of &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp.cljs&lt;/code&gt; and then explain what’s going on.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reagent.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:refer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;react-native&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:refer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppRegistry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defonce&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;component-to-update&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;atom&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rn/Text&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:style&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:font-size&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                       &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:font-weight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                       &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:margin-bottom&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                       &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:text-align&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hi Shadow!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app-root&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rn/View&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:style&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:flex-direction&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;column&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                       &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:margin&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                       &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:align-items&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                       &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:background-color&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;white&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updatable-app-root&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-meta&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app-root&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:component-did-mount&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;this-as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;component-to-update&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))}))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:dev/after-load&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.forceUpdate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;component-to-update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.registerComponent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppRegistry&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                      &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CLJSReactNativeNavigation&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r/reactify-component&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updatable-app-root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is what it does:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The text content (“Hi Shadow!”) is extracted into a separate component
(&lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt;), because the call &lt;a href=&quot;https://reactjs.org/docs/react-component.html#forceupdate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;forceUpdate&lt;/code&gt;&lt;/a&gt; that we’ll use
updates everything &lt;em&gt;below&lt;/em&gt; the application root component, not the root
component itself.&lt;/li&gt;
  &lt;li&gt;The app-root component is annotated with a &lt;code class=&quot;highlighter-rouge&quot;&gt;component-did-mount&lt;/code&gt; handler
(&lt;code class=&quot;highlighter-rouge&quot;&gt;updatable-app-root&lt;/code&gt;). This handler stores the actual JavaScript object
that represents the root component into the atom &lt;code class=&quot;highlighter-rouge&quot;&gt;component-to-update&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A function &lt;code class=&quot;highlighter-rouge&quot;&gt;reload&lt;/code&gt; is added, which takes the value of that atom and calls
the method &lt;a href=&quot;https://reactjs.org/docs/react-component.html#forceupdate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;forceUpdate&lt;/code&gt;&lt;/a&gt; on it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One final step remains: enabling hot reloading in &lt;code class=&quot;highlighter-rouge&quot;&gt;shadow-cljs.edn&lt;/code&gt;. It’s new
content is:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:source-paths&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/main&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                     &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; production code&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; yes we're going to add tests as well!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

 &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:dependencies&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reagent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.8.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

 &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:builds&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:myapp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; the target definition&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:target&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:react-native&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; the target type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:init-fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myapp/init&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; react native's entry point&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:output-dir&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; where to put the built JS&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:devtools&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:autoload&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; enables hot-reloading&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you reload the app, changing the text in the &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; component should
cause the app to automatically update!&lt;/p&gt;

&lt;h1 id=&quot;3-add-react-native-navigation&quot;&gt;3. Add React Native Navigation&lt;/h1&gt;

&lt;p&gt;This bit is a somewhat tedious I’m afraid. You’ll have to go through &lt;a href=&quot;https://wix.github.io/react-native-navigation/#/docs/Installing&quot;&gt;the
instructions to setup React Native Navigation&lt;/a&gt;. Add the npm
dependency, update your Xcode project, update iOS source code, update Android
build files, and update Android source code. Tip for Android part: Please don’t
blindly copy-paste. Some of the instructions refer are not up to date, some
parts are not really needed, etc. If you want you can have a look at
&lt;a href=&quot;https://github.com/svdo/CLJSReactNativeNavigation&quot;&gt;how I did it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Obviously you’ll skip the last step of the instructions, namely the part where
the JavaScript code is updated to use React Native Navigation. We’ll address
that in ClojureScript next.&lt;/p&gt;

&lt;h1 id=&quot;4-integrate-and-wrap&quot;&gt;4. Integrate and Wrap&lt;/h1&gt;

&lt;p&gt;Ok, roll up your sleeves, because here comes the interesting part.&lt;/p&gt;

&lt;h2 id=&quot;wrapper-functionality&quot;&gt;Wrapper functionality&lt;/h2&gt;

&lt;p&gt;In JavaScript we would need to do something like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Navigation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-native-navigation'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Navigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'navigation.playground.WelcomeScreen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Navigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerAppLaunchedListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Navigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'navigation.playground.WelcomeScreen'&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Obviously in ClojureScript we need to do something similar. There’s a problem
though: we need a handle to the actual JavaScript component in order to call
&lt;code class=&quot;highlighter-rouge&quot;&gt;forceUpdate&lt;/code&gt; on it (for hot reloading). React Native Navigation has made the
design choice that it creates new root components for screens that you push
on the navigation stack. So also for those components we need a handle and
call &lt;code class=&quot;highlighter-rouge&quot;&gt;forceUpdate&lt;/code&gt;. We accomplish this by not registering the component itself
with &lt;code class=&quot;highlighter-rouge&quot;&gt;Navigation&lt;/code&gt;, but a wrapper of that component.&lt;/p&gt;

&lt;p&gt;This causes another problem though. React Native Navigation gives components
that you register a &lt;code class=&quot;highlighter-rouge&quot;&gt;componentId&lt;/code&gt;. It uses this for its internal registration
so that it can make navigation work. For example, when you push a new screen
onto the navigation stack, it uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;componentId&lt;/code&gt; to find the screen from
which you are pushing. The problem is that we registered the &lt;em&gt;wrapper&lt;/em&gt;, but
we’re navigating from the &lt;em&gt;wrapped component&lt;/em&gt;. Which does not have a
&lt;code class=&quot;highlighter-rouge&quot;&gt;componentId&lt;/code&gt;, because we never registered it with &lt;code class=&quot;highlighter-rouge&quot;&gt;Navigation&lt;/code&gt;. Solution:
make the wrapper in such a way that it passes its &lt;code class=&quot;highlighter-rouge&quot;&gt;componentId&lt;/code&gt; on to the
wrapped component.&lt;/p&gt;

&lt;p&gt;But there is more! React Native Navigation defines some additional life cycle
methods, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;navigationButtonPressed&lt;/code&gt;. And for that to work, you need
to call &lt;a href=&quot;https://wix.github.io/react-native-navigation/#/docs/events?id=navigationbuttonpressed-event&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Navigation.bindComponent&lt;/code&gt;&lt;/a&gt;. So our wrapper also calls
&lt;code class=&quot;highlighter-rouge&quot;&gt;bindComponent&lt;/code&gt; and forwards &lt;code class=&quot;highlighter-rouge&quot;&gt;navigationButtonPressed&lt;/code&gt;. Forwarding other
life cycle methods is left as an exercise for the reader.&lt;/p&gt;

&lt;p&gt;Here’s the main code for the wrapper (&lt;a href=&quot;https://github.com/svdo/CLJSReactNativeNavigation/blob/master/src/main/env.cljc&quot;&gt;full version&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;;; current namespace is `env`&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defonce&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id-seq-ref&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;atom&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defonce&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mounted-ref&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;atom&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defonce&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screens-ref&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;atom&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get-props&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;::key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;::id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.-state&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.-id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:component-id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.-props&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.-componentId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;crc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; crc is create-react-class&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:displayName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
               &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wrapper&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

               &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:getInitialState&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
               &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;swap!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id-seq-ref&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                             &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

               &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:componentDidMount&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
               &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;this-as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

                  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bind-component&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;swap!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mounted-ref&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                         &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assoc-in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.-state&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.-id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

               &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:componentWillUnmount&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
               &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;this-as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

                  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;swap!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mounted-ref&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dissoc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.-state&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.-id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;


               &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; FIXME: forward other lifecycles the same way&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
               &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:navigationButtonPressed&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
               &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;this-as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

                  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigation-button-pressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screens-ref&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

                        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-props&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;js/console.log&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navigationButtonPressed&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigation-button-pressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pr-str&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigation-button-pressed&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;navigation-button-pressed&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

               &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:componentDidAppear&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
               &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;this-as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

                  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;js/console.log&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;componentDidAppear&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

               &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:componentDidDisappear&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
               &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;this-as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

                  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;js/console.log&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;componentDidDisappear&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

               &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:render&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
               &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;this-as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

                  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screens-ref&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

                        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-props&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;js/console.log&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;render&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pr-str&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;r/as-element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))})]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register-component&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This stores the mounted components in &lt;code class=&quot;highlighter-rouge&quot;&gt;mounted-ref&lt;/code&gt;, which we can then use
for the hot reloading:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:dev/after-load&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doseq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mounted-ref&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;js/console.log&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;forceUpdate&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.forceUpdate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;register&lt;/code&gt; method uses an atom &lt;code class=&quot;highlighter-rouge&quot;&gt;screens-ref&lt;/code&gt; to forward life cycle methods,
so we need to provide a function for screens to add themselves:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add-screen&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screen-def&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;swap!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screens-ref&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screen-def&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-it&quot;&gt;Using it&lt;/h2&gt;

&lt;p&gt;Initially, in &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp/init&lt;/code&gt; we called React Native’s &lt;code class=&quot;highlighter-rouge&quot;&gt;registerComponent&lt;/code&gt;. Now
we call our &lt;code class=&quot;highlighter-rouge&quot;&gt;env/register&lt;/code&gt; instead. We could just call &lt;code class=&quot;highlighter-rouge&quot;&gt;(env/register &quot;App&quot;)&lt;/code&gt;,
but we want to pass some options for the navigation bar.&lt;/p&gt;

&lt;p&gt;Furthermore we need to call the &lt;code class=&quot;highlighter-rouge&quot;&gt;Navigation.events().registerAppLaunchedListener&lt;/code&gt;
JavaScript function to set the navigation root for our app.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; function is now:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env/register&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;App&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:topBar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:visible&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                          &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:text&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;My App&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                          &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:rightButtons&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:systemItem&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rnn/Navigation.events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.registerAppLaunchedListener&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:root&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
               &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:stack&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:children&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:component&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;App&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}]}}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clj-&amp;gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rnn/Navigation.setRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;credits&quot;&gt;Credits&lt;/h1&gt;

&lt;p&gt;That’s it! Done! Just four simple, easy, almost trivial steps! Well maybe not
so trivial. I guess a ClojureScript beginner couldn’t have come up with this.
Well, in fact I &lt;em&gt;am&lt;/em&gt; a ClojureScript beginner and I &lt;em&gt;did not&lt;/em&gt; come up with this
solution myself. All the credits go to &lt;a href=&quot;https://github.com/thheller&quot;&gt;Thomas Heller&lt;/a&gt;, the author of
&lt;a href=&quot;http://shadow-cljs.org&quot;&gt;shadow-cljs&lt;/a&gt;. He has been amazing in his support by answering
all of my beginner-level questions, and then he ended up conjuring this
solution and committing it to my repository. He actually spent hours on this
I believe, and that level of support from a community is truly awesome
(and rare). He doesn’t seem to be advertising it very much, but you can become
his &lt;a href=&quot;https://www.patreon.com/thheller&quot;&gt;patreon&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;why-react-native-navigation&quot;&gt;Why React Native Navigation&lt;/h1&gt;

&lt;p&gt;What’s special about React Native Navigation is that it is implemented using the
real platform native components, specifically
&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uinavigationcontroller&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;&lt;/a&gt; on
iOS. I seem to be at odds with most of the rest of the world on this, but I
happen to think that it is very important to present the user with an
experience that is (as much as possible) identical to that of native apps. You
shouldn’t be able to tell from the user experience whether the app was written
using native technology or cross platform technology. Not even when you update
your OS to a new major version. So if my app uses a navigation stack, it has to
be the native one. Maybe I’m more sensitive to this then others, but I get
really upset by apps that don’t support the normal gesture for going back up the
navigation stack. I also get annoyed when the animation that is used while going
back is slightly non-standard. Using the native components is the only way to
accomplish that. Other components can come close, but not close enough for me.&lt;/p&gt;

&lt;h3 id=&quot;versions&quot;&gt;Versions&lt;/h3&gt;

&lt;p&gt;Like I said in the beginning, future versions of any of the tools may break
this guide. So it is only fair to mention which versions I was using for this:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Tool&lt;/th&gt;
      &lt;th&gt;Version&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;node&lt;/td&gt;
      &lt;td&gt;11.10.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;npm&lt;/td&gt;
      &lt;td&gt;6.5.0-next.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;react&lt;/td&gt;
      &lt;td&gt;16.8.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;react-native&lt;/td&gt;
      &lt;td&gt;0.59.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;react-native-cli&lt;/td&gt;
      &lt;td&gt;2.0.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;react-native-navigation&lt;/td&gt;
      &lt;td&gt;2.16.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;shadow-cljs&lt;/td&gt;
      &lt;td&gt;2.8.26&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Xcode&lt;/td&gt;
      &lt;td&gt;10.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iOS SDK&lt;/td&gt;
      &lt;td&gt;12.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Android SDK&lt;/td&gt;
      &lt;td&gt;API levels 26, 27, 28&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Build tools 27.0.3, 28.0.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;System images: android-28&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Stefan&quot;, &quot;last_name&quot;=&gt;&quot;van den Oord&quot;, &quot;github&quot;=&gt;&quot;svdo&quot;, &quot;linkedin&quot;=&gt;&quot;stefanvandenoord&quot;, &quot;permalink&quot;=&gt;&quot;/author/stefan/&quot;, &quot;header-img&quot;=&gt;&quot;img/Stefan-header.jpeg&quot;, &quot;avatar&quot;=&gt;&quot;stefan.png&quot;, &quot;bio&quot;=&gt;&quot;I love software development. I'm a generalist and I like learning new things all the time. I particulary enjoy using extreme programming, including practices like pair programming, test-driven design, etc. I also enjoy teaching others about it, for example at conferences, or using coding dojos.&quot;}</name></author><category term="clojure" /><category term="clojurescript" /><category term="functional" /><category term="react" /><category term="react-native" /><category term="shadow-cljs" /><summary type="html">React Native Navigation and ClojureScript</summary></entry><entry><title type="html">GraphQL + Spring Boot</title><link href="https://040code.github.io//2019/03/21/spring-boot-graphql/" rel="alternate" type="text/html" title="GraphQL + Spring Boot" /><published>2019-03-21T00:00:00+00:00</published><updated>2019-03-21T00:00:00+00:00</updated><id>https://040code.github.io//2019/03/21/spring-boot-graphql</id><content type="html" xml:base="https://040code.github.io//2019/03/21/spring-boot-graphql/">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Now GraphQL is not anymore that new kid on a block it would be nice if we can implement a service with a GraphQL interface. Spring Boot is one of the well known frameworks to build your micro services in Java. Time to assess how easy, or hard it will be to implement a GraphQL service. In this post we will not explain how &lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt; works. We focus on a simple Java Spring Boot micro services with a JPA layer. In the GraphQL language we cover the tree major concepts, a query, a mutation and a subscription.&lt;/p&gt;

&lt;p&gt;GraphQL is API is based on three main concepts. Query the backend for data using a graph based query. The query is in a JSON like style and the response is valid JSON. A major difference with REST is that wit a query you can specify excatly what you expect or want from the backend. Mutation are the way to change data in the system based on flat input object. In this example we use mutation to add new information. Finally we have subscription to subscribe for changes and get notified once something is changed via a web socket.&lt;/p&gt;

&lt;h3 id=&quot;java-spring-and-graphql&quot;&gt;Java, Spring and GraphQL.&lt;/h3&gt;
&lt;p&gt;For implementing a GraphQL service you have two choices. Either schema first, or code first. So similar concepts as we used with SOA XML services. When starting with code you have to write more plumbing code, but you have more freedom. And on the other side starting of the schema reduce all the plumbing code and gives a faster start.&lt;/p&gt;

&lt;p&gt;In this blog we first create a simple JPA enabled Spring Boot service. Then we add step-by-step GraphQL features to the service. We start from the schema and show which small additions you have to do to our application. Starting from a schema will not result in generated coded, you still have to write the matching code yourself. For the Java implementation we will use the libraries from &lt;a href=&quot;https://github.com/graphql-java-kickstart&quot;&gt;graphql-java-kickstart&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;sample-model-and-api&quot;&gt;Sample Model and API&lt;/h3&gt;
&lt;p&gt;For simplicity we use in this blog a simple domain model. Consisting of two classes. A person and notes, a person can have multiple notes. And a note always has one author, a person.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2019-03-21_spring-boot-graphql/model.png&quot; alt=&quot;Model&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;create-a-simple-note-service&quot;&gt;Create a simple Note Service&lt;/h3&gt;
&lt;p&gt;First we create a simple Spring JPA services, to store the Notes and the Authors of type Person. The implementation will be straightforward. We create an entity class for Person and Note. Fore readability the imports and other plumbing is omitted. See &lt;a href=&quot;https://github.com/npalm/blog-graphql-spring-service&quot;&gt;GitHub&lt;/a&gt; for a complete implementation.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Note&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZonedDateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EAGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we define two spring JPA repositories to store the entities above in our database.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Repository&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CrudRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Repository&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoteRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CrudRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we define the services interface which we will use to implement the GraphQL queries,&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotesService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Note&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Note&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So that is all to create a simple service with basic JPA (persistence) capacity. Time to focus on adding GraphQL to our service.&lt;/p&gt;

&lt;h3 id=&quot;implement-a-query&quot;&gt;Implement a query&lt;/h3&gt;
&lt;p&gt;As base library we use &lt;code class=&quot;highlighter-rouge&quot;&gt;graphql-java-tools&lt;/code&gt; this library requires a GraphQL schema to implement GrahpQL. The first step is to define a schema for our queries. The schema defines our GraphQL root, for now only the query. Next the queries we will implement and the types we use. We define two queries. The first one to look op a note and the second one to find all notes based on a filter. Next, we define the types. As you can see a Note has a relation to a Person object. By querying for a note we can get immediately the authors name for example.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;schema {
    query: Query,
}

type Query {
    note(id: Long!): Note
    notes: [Note]
}

# Object to represent a note
type Note {
    id: ID!
    note: String
    createdOn : String
    author: Person
}

# Object to represent a note
type Person {
    id: ID!
    name: String
    email: String
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;implement-mutation&quot;&gt;Implement Mutation&lt;/h3&gt;
&lt;p&gt;We have now defined a first version of a GraphQL schema. The second step is to connect the schema to the Note Service. GraphQL java tools expects for each query, a resolver function. Therefore, we need to implement &lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQLQueryResolver&lt;/code&gt; from graphql-tools.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GraphQLQueryResolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotesService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notesService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotesService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notesService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notesService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notesService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notesService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notesService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is all, we have to do to be able to handle the queries as specified in the schema. We can now start the spring boot application and open http://locahost:8080/graphiql and query form some. Graphiql is a simple IDE to execute GraphQL queries. A much richer tool to play with your queries is &lt;a href=&quot;https://github.com/prisma/graphql-playground&quot;&gt;GraphQL Playground&lt;/a&gt;. Actually no fun yet, we can only execute queries without getting any result. We simply have an empty system. We need a way to add notes to the system. In GraphQL you mutate data via a mutation. In the next step we add a mutation to the schema and update the code for executing the mutation.&lt;/p&gt;

&lt;p&gt;In the schema we add the mutation to the root and add a mutation to add a note to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutation&lt;/code&gt; type. Quite similar to defining the query above. For the input we define an input object for both Note and Person.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
schema {
    ...
    mutation: Mutation
}

type Mutation {
    addNote(note: InputNote!, author: InputPerson!): Note
}

# Input type for the author of the note
input InputPerson {
    name: String!
    email: String
}

# Input type for a new Note
input InputNote {
    note: String!
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similar to implementing the query we have to implement an interface and declare methods for the mutation. Mutations have to be implemented in a class implementing the interface GraphQLMutationResolver. In this implementation we defined for the input objects converters to convert the GraphQL input object to domain objects that can be consumed by the service.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mutation&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GraphQLMutationResolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Note&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addNote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputNote&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputPerson&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notesService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputNote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s test the service. Build and start the service &lt;code class=&quot;highlighter-rouge&quot;&gt;/gradlew clean bootRun&lt;/code&gt; and open &lt;a href=&quot;http://localhost:8080/graphiql&quot;&gt;http://localhost:8080/graphiql&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mutation {
  addNote(note: {note: &quot;Hello World&quot;},
    author: {name: &quot;John Doe&quot;, email: &quot;no-reply@jonn.doe&quot;}) {
    id
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And query for all available notes. This should result only in the note above.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;createdOn&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2019-03-21_spring-boot-graphql/query-graphiql.png&quot; alt=&quot;Query example&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add some more notes and experiment with the query. All standard features will work such as aliases, fragement and variables.&lt;/p&gt;

&lt;h3 id=&quot;implement-subscriptions&quot;&gt;Implement Subscriptions.&lt;/h3&gt;

&lt;p&gt;Another cool feature is the subscriptions. With a subscription you can subscribe to updates via a websocket. The same philosophy is followed for the subscription. You will gat your data in same structure as specified in the subscription call.&lt;/p&gt;

&lt;p&gt;To add subscription to our Java implements, we update the schema and add code to handle updates. To add a subscription for new notes we update the GraphQL schema first. Again update schema root and add the subscription, define the available subscriptions and add the required types.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;schema {
    ...
    subscription : Subscription
}

type Subscription {
    # Subscribe to all new comments
    notes: NoteUpdate!
}

type NoteUpdate {
    # The note text
    note : String
    # The name of the author
    authorName : String
    # Time when the note was received
    createdOn : String
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And once again we have to implement a resolver, this time we implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQLSubscriptionResolver&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Subscription&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GraphQLSubscriptionResolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommentPublisher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commentPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Subscription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CommentPublisher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commentPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commentPublisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commentPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Publisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoteUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commentPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Note&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Note&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;notePublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedNoed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;notePublisher&lt;/code&gt; is responsible to update messages via a WebScoket so the subscribers get the update. For the implementation check out the GitHub repo. Time to test the subscription. An easy way to test is topen the GraphiQL editor on two screens. Invoke in the first one the subscription and in the second one add a note. You will see you get an update of the new note on the first screen.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;subscription {
  notes {
    note
    authorName
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2019-03-21_spring-boot-graphql/subscription-graphiql.png&quot; alt=&quot;Query example&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;
&lt;p&gt;Another nice feature provided by &lt;a href=&quot;https://github.com/graphql-java-kickstart/graphql-spring-boot&quot;&gt;graphql-spring-boot&lt;/a&gt; is the test utils. Testing your GraphQL queries becomes really simple. The library provide a &lt;code class=&quot;highlighter-rouge&quot;&gt;GraphQLTestTemplate&lt;/code&gt; which makes it easy to invoke the GraphQL endpoint by with a query. The result is the JSON object. Let’s have a quick look on some code. First define the query in &lt;code class=&quot;highlighter-rouge&quot;&gt;queries/find-notes.graphql&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;query FindNotes {
  notes {
    id
    note
    createdOn
    author {
      name
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now create a test.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webEnvironment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpringBootTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WebEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RANDOM_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GraphQLNoteTest&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GraphQLBaseTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GraphQLTestTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graphQLTestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findNotes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;GraphQLResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graphQLTestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;queries/find-notes.graphql&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// asserts to check the content&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That is all, of course you should add some assert to check the content as well. For more details check out the &lt;a href=&quot;https://github.com/npalm/blog-graphql-spring-service&quot;&gt;GitHub&lt;/a&gt; repo of this blog.&lt;/p&gt;

&lt;h3 id=&quot;some-thoughts&quot;&gt;Some thoughts&lt;/h3&gt;

&lt;p&gt;The example above shows how you can enable your Spring Boot service with a GraphQL API. Adding a GraphQL layer to your existing (simple) service is fairly easy with the tools. But GraphQL will become really powerful when you combine multiple (REST) API in one GraphQL endpoint to create a fluent and understandable API.&lt;/p&gt;

&lt;p&gt;If a java based approach is in that case the best way to go, I don’t know yet. In that case it could be interesting to dive into &lt;a href=&quot;https://github.com/google/rejoiner&quot;&gt;Rejoiner&lt;/a&gt;.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Niek&quot;, &quot;last_name&quot;=&gt;&quot;Palm&quot;, &quot;github&quot;=&gt;&quot;npalm&quot;, &quot;twitter&quot;=&gt;&quot;niekos77&quot;, &quot;linkedin&quot;=&gt;&quot;niekpalm&quot;, &quot;permalink&quot;=&gt;&quot;/author/niek/&quot;, &quot;header-img&quot;=&gt;&quot;img/noodle_niek.jpg&quot;, &quot;avatar&quot;=&gt;&quot;niek.jpg&quot;, &quot;email&quot;=&gt;&quot;dev.npalm@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;I am developing for more than a decade software, mainly based on open source stacks. Currently I am having a full stack focus with my strengths on the backend related services, cloud and continuous delivery. Technologies that me keep busy now a days are: AWS, Terraform, Spring Cloud, React, React Native, Continuous Deliver, Docker, Elastic Search and much more. \n\n But cool technologies are not my only passions. I love to just crab by backpack and go around. Creating some nice meals and exploring the creative area of a cook is one of my favourite hobbies. Drinking a great craft beer is something that I love too. And from time to time the body needs some real exercise so I like to have a run or do a hike.&quot;}</name><email>dev.npalm@gmail.com</email></author><category term="graphql" /><category term="spring" /><category term="java" /><summary type="html">Introduction Now GraphQL is not anymore that new kid on a block it would be nice if we can implement a service with a GraphQL interface. Spring Boot is one of the well known frameworks to build your micro services in Java. Time to assess how easy, or hard it will be to implement a GraphQL service. In this post we will not explain how GraphQL works. We focus on a simple Java Spring Boot micro services with a JPA layer. In the GraphQL language we cover the tree major concepts, a query, a mutation and a subscription.</summary></entry><entry><title type="html">Mob Programming</title><link href="https://040code.github.io//2019/03/15/mob-programming/" rel="alternate" type="text/html" title="Mob Programming" /><published>2019-03-15T00:00:00+00:00</published><updated>2019-03-15T00:00:00+00:00</updated><id>https://040code.github.io//2019/03/15/mob-programming</id><content type="html" xml:base="https://040code.github.io//2019/03/15/mob-programming/">&lt;p&gt;&lt;em&gt;This blog was originally posted on &lt;a href=&quot;https://gist.github.com/svdo/0519c26fec9899b9b2c081c1c3d37ff6#file-blog-post-mob-programming-md&quot;&gt;Feb 25, 2019&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Last week I was lucky to be able to attend a workshop about “mob programming”, given by Woody Zuill. As somebody who considers himself “agile” (in the original sense of the word) and who is a proponent of extreme programming, I liked it a lot. In this article I’m sharing some of my findings and learnings.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;mob-programming&quot;&gt;Mob Programming&lt;/h1&gt;

&lt;p&gt;Simply put, it means that the entire team is working on a single computer, all together at the same time. As an outsider, you might see a few big screens next to each other, and team members sitting next to each other facing those screens. One person is behind the keyboard, and the others are looking at the screens. One of them seems to have a special role, because he is telling the person behind the keyboard what to do.&lt;/p&gt;

&lt;p&gt;Looking a bit closer, you notice that one person is not really looking at the screens very much, but paying close attention to what the rest are doing. He notices you and quietly comes over to you. He introduces himself as the team’s coach.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You:&lt;/em&gt; This looks interesting, can you explain what is going on here?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Coach:&lt;/em&gt; Sure! This team is learning mob programming. They have been at it for a while now and are approaching the point where they don’t need me anymore. They understand how to do it and why they are doing it. They are learning how to improve on this by themselves.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You:&lt;/em&gt; So why are they doing it?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Coach:&lt;/em&gt; There are two important reasons. The first is that the team wanted to learn to work together more effectively. They want to have a common understanding of things like architecture, coding standards, and code quality. Before they started working this way, they were in trouble. They were working on a project that was already a year late, and they didn’t know how to make the drastic improvements that were needed. When I was hired, I noticed that cycle times for bug fixes where sky-high: it took forever for a bug that was reported to be fixed. When I looked into the code base and I was not very enthusiastic about the quality. When asking about this to the individual team members, they reacted very differently. Some didn’t feel there was a problem. Others did, but they found they couldn’t address it because the rest of the team “just doesn’t get it”. There clearly was an issue with the team’s ability to operate &lt;em&gt;as a team&lt;/em&gt; instead of just a bunch of individuals.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You:&lt;/em&gt; I have seen situations like that myself occasionally. Has it improved?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Coach:&lt;/em&gt; Oh yes, it can be difficult still sometimes, but they have learned to discuss such issues with each other. They have learned to raise such issues, and they have learned to do that in a respectful manner.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You:&lt;/em&gt; How did that happen?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Coach:&lt;/em&gt; I let them play.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You:&lt;/em&gt; Come again?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Coach:&lt;/em&gt; Let me ask you a question: what is the most important prerequisite for learning?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You:&lt;/em&gt; That’s easy. We have known forever; that’s why we don’t allow bullying at schools, for example. It is &lt;em&gt;security&lt;/em&gt;, the knowing that it’s ok to be wrong, to make mistakes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Coach:&lt;/em&gt; Indeed! So that’s what we did. Every Friday afternoon, we’d have a coding dojo together, where we practiced coding kata’s. The word “dojo” comes from martial arts: a place where you practice. A “kata” is a series of made-up exercises designed to help you learn something in a safe situation. And we found that it was so much easier to discuss code quality with each other when we didn’t have the pressure of “work” attached to it! Nowadays, instead of using Friday afternoons for this, we start every day with a coding dojo of an hour. Through this, we have learned to treat each other with kindness, consideration, and respect.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You:&lt;/em&gt; That sounds like it might not only be effective, but also fun! So you mentioned that there are two reasons for doing mob programming. What’s the other one?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Coach:&lt;/em&gt; The second reason is even more important than the first one. What harms project progress more than anything else?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You:&lt;/em&gt; Ehh…&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Coach:&lt;/em&gt; &lt;em&gt;(gives encouraging look)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You:&lt;/em&gt; Well…&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Coach:&lt;/em&gt; Exactly, delays! Waiting time, queues, inventory! This is all very well known from &lt;em&gt;lean manufacturing&lt;/em&gt;. It is common sense that keeping people busy while waiting for important answers is counter-productive. It’s not about being busy, it is about getting the most important thing done as fast as possible. A waiting time of an hour probably costs at least two hours because of context switching. It’s all about &lt;em&gt;flow&lt;/em&gt;. Mob programming is a multi-discipline approach. Everybody who is needed should be present, including designers, testers, product owner. And if key people cannot be present, they have to make sure that they are otherwise available and get back to questions within minutes. Unless the project is not important of course, but then you should probably find something else to do.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You:&lt;/em&gt; Right. It’s surprising how much &lt;em&gt;lean&lt;/em&gt; is common sense in one discipline, and how novel it appears to be in software engineering.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Coach:&lt;/em&gt; And it gets better. Because “flow” has another meaning, from the field of psychology. When you’re “in flow”, you are highly concentrated, you forget distractions, every ounce of your mental powers is used to solve the problem at hand. One of the original goals of pair programming was to improve flow: when one of the pair needs to step away for a moment, the other continues. When the first returns, she can get right back into flow again. Mob programming reinforces this even more.&lt;/p&gt;

&lt;h2 id=&quot;the-workshop&quot;&gt;The Workshop&lt;/h2&gt;

&lt;p&gt;So that was what the workshop was about: why do it, and how to do it. There was a hands-on coding dojo of a few hours that was designed to get a flavour of what you need to learn as a team to be more effective. I won’t spoil it for you, but to me it struck a good balance between fun and “suffering” (being confronted with things that you didn’t know you were doing ineffectively).&lt;/p&gt;

&lt;p&gt;Focussing on &lt;em&gt;flow&lt;/em&gt; feels like a good idea. When you do that as a team, you can come up with strategies to deal with problems like managers trying to interrupt too often, for example. But also things that need studying can interrupt your flow; you might create a list of study topics to park these things on, and have a dedicated hour of learning every day for those topics (coding dojo!).&lt;/p&gt;

&lt;p&gt;There is so much more to talk about. For example, the roles of mob programming and the underlying principle: &lt;em&gt;all ideas must go from somebody’s head into the computer through somebody else’s hands&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Want to learn more? Hire Woody Zuill and/or buy his book “Mob Programming – A Whole Team Approach”. Like what you read? Contact me and let’s see how we can leverage this!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Stefan&quot;, &quot;last_name&quot;=&gt;&quot;van den Oord&quot;, &quot;github&quot;=&gt;&quot;svdo&quot;, &quot;linkedin&quot;=&gt;&quot;stefanvandenoord&quot;, &quot;permalink&quot;=&gt;&quot;/author/stefan/&quot;, &quot;header-img&quot;=&gt;&quot;img/Stefan-header.jpeg&quot;, &quot;avatar&quot;=&gt;&quot;stefan.png&quot;, &quot;bio&quot;=&gt;&quot;I love software development. I'm a generalist and I like learning new things all the time. I particulary enjoy using extreme programming, including practices like pair programming, test-driven design, etc. I also enjoy teaching others about it, for example at conferences, or using coding dojos.&quot;}</name></author><category term="xp" /><summary type="html">This blog was originally posted on Feb 25, 2019.</summary></entry><entry><title type="html">Git Bisect</title><link href="https://040code.github.io//2019/03/13/git-bisect/" rel="alternate" type="text/html" title="Git Bisect" /><published>2019-03-13T00:00:00+00:00</published><updated>2019-03-13T00:00:00+00:00</updated><id>https://040code.github.io//2019/03/13/git-bisect</id><content type="html" xml:base="https://040code.github.io//2019/03/13/git-bisect/">&lt;p&gt;I want to tell you a little story about what happened to me a few days ago.
I went to the office and a colleague of mine was not very happy. This is strange because I work for a very nice company.. What happened? I asked him what was wrong. It turned out that he updated a lot of dependencies and some code for a certain service. And now the SonarQube reporting was not working anymore with a very strange message: HTTP Error 502 Bad gateway..&lt;/p&gt;

&lt;p&gt;I decided to help him, because we don’t work alone and especially when you’re stuck (and frustrated) at something it’s best to include other human beings.&lt;/p&gt;

&lt;p&gt;Since there we’re already several commits done I’ve decided to use &lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; to find the bug-introducing commit.&lt;/p&gt;

&lt;p&gt;I’ve noticed that it was new to my colleague so let’s write a blog post about it.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;In order to follow the instructions, you need the following things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;Git&lt;/a&gt; - Duh… This blog is about Git!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/cargo/getting-started/installation.html&quot;&gt;Rust &amp;amp; Cargo&lt;/a&gt; - The best language ever I’m NOT using in my daily work.&lt;/li&gt;
  &lt;li&gt;Clone &lt;a href=&quot;https://github.com/JeroenKnoops/rust-example&quot;&gt;https://github.com/JeroenKnoops/rust-example&lt;/a&gt;. This is an example codebase with a bug we want to find.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rust-example&quot;&gt;Rust example&lt;/h2&gt;
&lt;p&gt;The rust-example is very simple. It’s a rust library with four functions namely: &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;substract&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;multiply&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;division&lt;/code&gt;. By no means this should ever be used in real systems, this repo only exists as example for this blog post. It has 9 commits.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --pretty=format:&quot;%h - %an, %ad : %s&quot;
4d7f719 - Jeroen Knoops, Sun Aug 12 17:10:07 2018 +0200 : Adds link to blog post on git bisect
380d12e - Jeroen Knoops, Sun Aug 12 17:09:04 2018 +0200 : Refactors tests in seperate directory
1ae37e1 - Jeroen Knoops, Sun Aug 12 17:07:32 2018 +0200 : Adds edge cases for division
0580aec - Jeroen Knoops, Sun Aug 12 17:06:41 2018 +0200 : Adds information on how to run tests and create the documentation
d619b4d - Jeroen Knoops, Sun Aug 12 17:04:50 2018 +0200 : Adds function 'division'
abc4c40 - Jeroen Knoops, Sun Aug 12 17:03:29 2018 +0200 : Adds function 'multiply' with a runnable example in the documentation
2a5a057 - Jeroen Knoops, Sun Aug 12 17:01:27 2018 +0200 : Adds readme.md
3d75d3d - Jeroen Knoops, Sun Aug 12 16:59:58 2018 +0200 : Adds travis-ci pipeline
030b725 - Jeroen Knoops, Sun Aug 12 16:58:49 2018 +0200 : Adds functions 'add' and 'substract'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It starts with adding two functions, adding travis-ci, add some documentation, more functions, some refactoring… everything you expect from a ‘real’ project.&lt;/p&gt;

&lt;p&gt;Of course it has some tests and I’ve tested everything manually before I commit… But for some reason at the end, the &lt;code class=&quot;highlighter-rouge&quot;&gt;substract&lt;/code&gt; function is not working anymore..
Whoops.. I’ve tested it manually, but for some reason I’ve forgot to add a test for it..&lt;/p&gt;

&lt;h2 id=&quot;lets-create-a-test&quot;&gt;Let’s create a test&lt;/h2&gt;

&lt;p&gt;We’re creating a test in &lt;code class=&quot;highlighter-rouge&quot;&gt;/tests/bug.rs&lt;/code&gt; to show the bug.
We will use this test to check in which commit the bug was introduced.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[test]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_substract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;assert_eq!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;substract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now try to run this test in isolation with the following command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cargo &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--test&lt;/span&gt; bug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Test on &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; should fail:&lt;/p&gt;
&lt;asciinema-player src=&quot;/assets/2019-03-11-git-bisect/git-bisect-1.json&quot; cols=&quot;166&quot; rows=&quot;18&quot;&gt;
&lt;/asciinema-player&gt;

&lt;p&gt;Test on first commit (&lt;code class=&quot;highlighter-rouge&quot;&gt;030b725&lt;/code&gt;) should not fail:&lt;/p&gt;
&lt;asciinema-player src=&quot;/assets/2019-03-11-git-bisect/git-bisect-2.json&quot; cols=&quot;166&quot; rows=&quot;18&quot;&gt;
&lt;/asciinema-player&gt;

&lt;p&gt;Somewhere in between it start not working anymore.. Let’s use &lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; to find that.&lt;/p&gt;

&lt;h2 id=&quot;git-bisect&quot;&gt;Git bisect&lt;/h2&gt;
&lt;p&gt;We go back to the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; with the added test.&lt;/p&gt;

&lt;p&gt;We start the bisect procedure:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git bisect start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We tell bisect that the current version is &lt;em&gt;bad&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git bisect bad
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we tell bisect the commit of a known working version:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git bisect good 030b72500f08774b685c59c3e5ddd64afce432f1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We tell bisect to look when the bug appears:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git bisect run cargo &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--test&lt;/span&gt; bug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the test, reset the HEAD to the first place.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git bisect reset 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s see this in action:&lt;/p&gt;
&lt;asciinema-player src=&quot;/assets/2019-03-11-git-bisect/git-bisect-3.json&quot; cols=&quot;166&quot; rows=&quot;18&quot;&gt;
&lt;/asciinema-player&gt;

&lt;p&gt;What did just happen?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git bisect run cargo test --test bug
running cargo test --test bug
   Compiling example v0.1.0 (file:///Users/software-concepts/workspace/jeroen.knoops/rust-example)
    Finished dev [unoptimized + debuginfo] target(s) in 0.58 secs
     Running target/debug/deps/bug-6262d8198d8b39aa

running 1 test
test test_substract ... FAILED

failures:

---- test_substract stdout ----
	thread 'test_substract' panicked at 'assertion failed: `(left == right)`
  left: `16`,
 right: `6`', tests/bug.rs:6:5
note: Run with `RUST_BACKTRACE=1` for a backtrace.


failures:
    test_substract

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out

error: test failed, to rerun pass '--test bug'
Bisecting: 1 revision left to test after this (roughly 1 step)
[2a5a0578f44883d360287fc771c9d1dd7cff4cd6] Adds readme.md
running cargo test --test bug
   Compiling example v0.1.0 (file:///Users/software-concepts/workspace/jeroen.knoops/rust-example)
    Finished dev [unoptimized + debuginfo] target(s) in 0.59 secs
     Running target/debug/deps/bug-6262d8198d8b39aa

running 1 test
test test_substract ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out

Bisecting: 0 revisions left to test after this (roughly 0 steps)
[abc4c40d4a06711bab5039a2896db3f67d8ddd0e] Adds function 'multiply' with a runnable example in the documentation
running cargo test --test bug
   Compiling example v0.1.0 (file:///Users/software-concepts/workspace/jeroen.knoops/rust-example)
    Finished dev [unoptimized + debuginfo] target(s) in 0.58 secs
     Running target/debug/deps/bug-6262d8198d8b39aa

running 1 test
test test_substract ... FAILED

failures:

---- test_substract stdout ----
	thread 'test_substract' panicked at 'assertion failed: `(left == right)`
  left: `16`,
 right: `6`', tests/bug.rs:6:5
note: Run with `RUST_BACKTRACE=1` for a backtrace.


failures:
    test_substract

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out

error: test failed, to rerun pass '--test bug'
abc4c40d4a06711bab5039a2896db3f67d8ddd0e is the first bad commit
commit abc4c40d4a06711bab5039a2896db3f67d8ddd0e
Author: Jeroen Knoops &amp;lt;jeroen.knoops@gmail.com&amp;gt;
Date:   Sun Aug 12 17:03:29 2018 +0200

    Adds function 'multiply' with a runnable example in the documentation

:040000 040000 27cde4ec60027b8faffb1e97f3cb42022e80187b 34e8c57493a1b137f34fe45bf5ec555888ad8c3b M	src
bisect run success
[I]  ~  workspace  jeroen.knoops  rust-example  ⚓ abc4c40  ❓  $  git log
commit abc4c40d4a06711bab5039a2896db3f67d8ddd0e (HEAD, refs/bisect/bad)
Author: Jeroen Knoops &amp;lt;jeroen.knoops@gmail.com&amp;gt;
Date:   Sun Aug 12 17:03:29 2018 +0200

    Adds function 'multiply' with a runnable example in the documentation

commit 2a5a0578f44883d360287fc771c9d1dd7cff4cd6 (refs/bisect/good-2a5a0578f44883d360287fc771c9d1dd7cff4cd6)
Author: Jeroen Knoops &amp;lt;jeroen.knoops@gmail.com&amp;gt;
Date:   Sun Aug 12 17:01:27 2018 +0200

    Adds readme.md

commit 3d75d3da596b4fced7c4e91b17c20b2b61d2c8c5
Author: Jeroen Knoops &amp;lt;jeroen.knoops@gmail.com&amp;gt;
Date:   Sun Aug 12 16:59:58 2018 +0200

    Adds travis-ci pipeline

commit 030b72500f08774b685c59c3e5ddd64afce432f1 (refs/bisect/good-030b72500f08774b685c59c3e5ddd64afce432f1)
Author: Jeroen Knoops &amp;lt;jeroen.knoops@gmail.com&amp;gt;
Date:   Sun Aug 12 16:58:49 2018 +0200

    Adds functions 'add' and 'substract'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Commit which introduced the bug:
&lt;a href=&quot;https://github.com/JeroenKnoops/rust-example/commit/abc4c40d4a06711bab5039a2896db3f67d8ddd0e&quot;&gt;
  https://github.com/JeroenKnoops/rust-example/commit/abc4c40d4a06711bab5039a2896db3f67d8ddd0e
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2019-03-11-git-bisect/git-bisect-gitx.png&quot; alt=&quot;gitx&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;When implementing &lt;code class=&quot;highlighter-rouge&quot;&gt;multiply&lt;/code&gt;, I’ve accidentally broken the &lt;code class=&quot;highlighter-rouge&quot;&gt;substract&lt;/code&gt; function.
Git bisect will also add refs so you can which commits have been tested.&lt;/p&gt;

&lt;p&gt;The correct implementation would be:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;substract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The test we’ve written to find the bug can be renamed and also added to prevent this from happening again.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This was a very simple test / bug to find. By doing a &lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt; on the line, we would found the same
error, but this is not always the case.
Imagine a website which overtime became very slow. Try to create a test which measures the performance of a certain
page. This test should fail when the performance is below a certain threshold. This can be a complete end-to-end test.
Now you will find the exact place where the introduction of a small stupid javascript library caused a big performance
problem.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jeroen&quot;, &quot;last_name&quot;=&gt;&quot;Knoops&quot;, &quot;github&quot;=&gt;&quot;JeroenKnoops&quot;, &quot;twitter&quot;=&gt;&quot;johnnybusca&quot;, &quot;linkedin&quot;=&gt;&quot;jeroenknoops&quot;, &quot;permalink&quot;=&gt;&quot;/author/jeroen/&quot;, &quot;header-img&quot;=&gt;&quot;img/vanmoll.jpg&quot;, &quot;avatar&quot;=&gt;&quot;jeroen.png&quot;, &quot;email&quot;=&gt;&quot;jeroen.knoops@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;Jeroen Knoops is a full stack developer. He has worked in corporate environments for many years. He also had the pleasure to work for a small tech startup. All of his work is driven by innovation.\n\n Some keywords: Akai MPC, Urfaust, Richard Dawkins, Zed Shaw, TB-303, Erik Satie, Kapsalon, The Apemen, Piano, Hans Rosling, Haus Arafna, Apple ][, BRNS, Ravi Shankar, Lego geen playmobil, TR-909, Netflix, Tuscany, Kraftwerk, Quadrupel, Frikandel Speciaal, avdi, Moonlizards, Sandi Metz, Pixies, Strijp, Henrik Kniberg, Hazes, Public Enemy, Tesla, Funkmaster Flex, Hakan Forss, Bruce Willis, GitHub, Tony Touch, Hef, Mobb Deep, Funkdoobiest, good food, Noah's ark, Turing, Sugababes, VPRO's DutchMasters, Drums, Jet Li, Craft Beers, Synths, Bowling, La Musica della Mafia, UDS, Unsequenced, Christopher Hitchens, Slapshot en David Anderson.&quot;}</name><email>jeroen.knoops@gmail.com</email></author><category term="git" /><category term="rust" /><summary type="html">I want to tell you a little story about what happened to me a few days ago. I went to the office and a colleague of mine was not very happy. This is strange because I work for a very nice company.. What happened? I asked him what was wrong. It turned out that he updated a lot of dependencies and some code for a certain service. And now the SonarQube reporting was not working anymore with a very strange message: HTTP Error 502 Bad gateway..</summary></entry><entry><title type="html">Full Stack Fest 2018</title><link href="https://040code.github.io//2018/09/18/fsf-frontend/" rel="alternate" type="text/html" title="Full Stack Fest 2018" /><published>2018-09-18T00:00:00+00:00</published><updated>2018-09-18T00:00:00+00:00</updated><id>https://040code.github.io//2018/09/18/fsf-frontend</id><content type="html" xml:base="https://040code.github.io//2018/09/18/fsf-frontend/">&lt;h1 id=&quot;full-stack-fest-2018&quot;&gt;Full Stack Fest 2018&lt;/h1&gt;

&lt;p&gt;This week we (Jeroen, Niek, Gertjan, Eric and Kike) are enjoying &lt;a href=&quot;https://2018.fullstackfest.com/&quot;&gt;Full Stack Fest 2018 Barcelona&lt;/a&gt;,
a week-long full stack development conference with a focus on solving current problems with new &amp;amp; inspiring perspectives.&lt;/p&gt;

&lt;p&gt;This conference is split up in two parts. The first two days were focussed on Backend development. You can read our post about it &lt;a href=&quot;https://040code.github.io/2018/09/05/fsf-backend/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this quite short blog we just summarizing briefly the talks for the second part, the front-end part. It’s  &lt;strong&gt;our opinion&lt;/strong&gt; about the talks. We have rated all talks, the rating is subjective as well.&lt;/p&gt;

&lt;p&gt;First of all we would like to thank &lt;a href=&quot;https://twitter.com/raganwald&quot;&gt;Reginald Braithwaite&lt;/a&gt; for hosting the sessions.&lt;/p&gt;

&lt;h2 id=&quot;day-one&quot;&gt;Day one&lt;/h2&gt;

&lt;h3 id=&quot;building-peer-to-peer-apps-with-the-beaker-browser&quot;&gt;Building peer-to-peer apps with the Beaker Browser&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;dat://taravancil.com/about/&quot;&gt;Tara Vancil&lt;/a&gt;, during the backend days we already are informed about the lack of freedom is our social networks, and how this could be solved with decentralized social networks. Tara showed that the web has the same problem. Do you remember Geocities? Yepz these sites are gone. And deploying or customizing web apps is still hard. Would it not be great we can fix it just in the browser the app we loved the most. Tara showed how easy you can run, customize and deploy a decentralized web app.&lt;/p&gt;

&lt;h3 id=&quot;to-push-or-not-to-push---the-future-of-http2-server-push&quot;&gt;To push, or not to push?! - The future of HTTP/2 server push&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Patrick Hamann &lt;a href=&quot;https://twitter.com/patrickhamann&quot;&gt;@patrickhamann&lt;/a&gt;, resource loading is still hard, performance in the browser is tightly coupled to latency, connection costs are high, and scipt execution is expensive. Patrick explained how to use resources wisely, make a difference between critical resources. resources in the users viewport, and non critical resources. By using preload, push and async push together with a strategy of critical resource a hugh step can be made for a high performing web app. See the slides &lt;a href=&quot;https://noti.st/patrickhamann/9GvEed/to-push-or-not-to-push&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-future-of-front-end-performance&quot;&gt;The Future of Front-End Performance&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/thegreengreek&quot;&gt;Sia Karamalegos&lt;/a&gt;, a great talk on performance of the front-end. How much impact does it has on your business. Staggering numbers were shown about AliExpress load time reducing and how that correlates to an increase conversion for new customers.
Apps become bigger and bigger. Make sure you check your apps on size / speed by using tools like &lt;a href=&quot;https://webpagetest.org&quot;&gt;webpagetest.org&lt;/a&gt;. Optimize your images. Most of the web are images, but the most expensive bytes are javascript. Prioritize the code your shipping.
&lt;a href=&quot;https://speakerdeck.com/siakaramalegos/the-future-of-front-end-performance&quot;&gt;Slides&lt;/a&gt; and &lt;a href=&quot;https://github.com/siakaramalegos/sia_speaks&quot;&gt;more info&lt;/a&gt; are available.&lt;/p&gt;

&lt;h3 id=&quot;native-javascript-modules--import-browsers-nodejs-export-production&quot;&gt;Native JavaScript modules- import {Browsers, NodeJs}; export {production};&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/malyw&quot;&gt;Serg Hospodarets&lt;/a&gt;, great news for modern JavaScript development. Most browsers now support Native JavaScript modules ESM. This will change our way we are bundling our JavaScript using Webpack, Rollup and other bundlers. It’s also available in node and the extensions is called Micheal Jackson Solution aka .mjs
Dynamically loading javascript modules in combination with HTTP/2 can save a lot of load time.
&lt;a href=&quot;https://slides.com/malyw/native-js-modules&quot;&gt;Simular slides&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;unity--html5--isomorphic-game-engine&quot;&gt;Unity + HTML5 = Isomorphic Game Engine?&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Lerenzo Malcom &lt;a href=&quot;https://twitter.com/lerenzom&quot;&gt;@lerenzom&lt;/a&gt;, showed how to combine the world of Unity and the browser. Last year A-Frame was a big topic that address the same solution space but Lerenzo showed how to combine Unity in the browser instead of A-Frame. After discussing why unity and not A-Fram he spend attention how to setup bi-directional messaging, and finally gives some WebGL examples. Sorry we are not that AR/VR boys but with this talk Lerenzo did an awesome job, please see the slides (including animations) &lt;a href=&quot;https://docs.google.com/presentation/d/1LTNFqURDAeDYZTD3cjpZ3XMQoD8rDNm1Z4LEDuKo64o/edit&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;state-of-the-art-web-user-interfaces-with-state-machines&quot;&gt;State of the Art Web User Interfaces with State Machines&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;David Khourshid (&lt;a href=&quot;https://twitter.com/davidkpiano&quot;&gt;@davidkpiano&lt;/a&gt;), the front end is complex, it is difficult to understand, difficult to read, contain bugs, hard to enhance and new features make it even worse. What if we model our front end as an finite state machine (FSM). Nothing new in Computer Science, states machines are already introduces in “automata theory”, Specifying a the front end action (flow) in a state machine increase the predictability and even make it possible to automate testing. Just calculate you the shortest path via Dijkstra algorithm. David showed his open source framework xstate which is available on &lt;a href=&quot;https://github.com/davidkpiano/xstate#readme&quot;&gt;GitHub&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/xstate&quot;&gt;npm&lt;/a&gt;. Slides are are &lt;a href=&quot;https://slides.com/davidkhourshid/statecharts-fsf&quot;&gt;here&lt;/a&gt; available&lt;/p&gt;

&lt;h3 id=&quot;a-front-end-devs-hobbyist-approach-into-machine-learning&quot;&gt;A Front-end dev’s hobbyist approach into Machine Learning&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/studioswong&quot;&gt;Susanna Wong&lt;/a&gt;, machine Learning is hard. It’s almost impossible to explain this in just one talk. Especially when you combine it with all kind of background information. We were very impressed by the architecture of the buildings, but unfortunately the talk was too much out of our reach.&lt;/p&gt;

&lt;h3 id=&quot;building-a-modern-memex&quot;&gt;Building a Modern Memex&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Andrew Louis &lt;a href=&quot;https://twitter.com/hyfen&quot;&gt;@hyfen&lt;/a&gt;, Imagine you can manage all your data with a single device…. An idea that goes back to the 1945 when Vanneva Bush discribed the &lt;a href=&quot;https://en.wikipedia.org/wiki/Memex&quot;&gt;Memex&lt;/a&gt;. Andrew build his own Memex and demo the awesome combination fo all the data he collected over the years. Absolutely crazy to see that he is able to search back in time which podcast he was listing when driving from A to B. To be able to combine all your data from Google, Spotifiy, Maps, Whatsapp and so on, probably you need a complex system. But Andrew handles it all just with Rails, Ember, Electron, Node and Postgres. And how cool it is all &lt;a href=&quot;https://hyfen.net/memex/&quot;&gt;open source&lt;/a&gt;. &lt;a href=&quot;https://speakerdeck.com/hyfen/building-a-modern-memex&quot;&gt;Slides&lt;/a&gt; are here.&lt;/p&gt;

&lt;h3 id=&quot;everything-in-sketchnotes&quot;&gt;Everything in sketchnotes..&lt;/h3&gt;
&lt;p&gt;A big shoutout to Christin Westermann (&lt;a href=&quot;https://twitter.com/_c16n_&quot;&gt;@&lt;em&gt;c16n&lt;/em&gt;&lt;/a&gt;) for creating these sketchnotes!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-09_fullstackfest/fullstackfest-2018-05.jpg&quot; alt=&quot;fullstackfest-2018-05&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-09_fullstackfest/fullstackfest-2018-06.jpg&quot; alt=&quot;fullstackfest-2018-06&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-2&quot;&gt;Day 2&lt;/h2&gt;

&lt;h3 id=&quot;accessibility-vs-latest-web-apis-cant-we-just-get-along&quot;&gt;Accessibility vs latest Web APIs. Can’t we just get along?&lt;/h3&gt;
&lt;p&gt;rating: :star: :star:&lt;/p&gt;

&lt;p&gt;Mauricio Palma (&lt;a href=&quot;https://twitter.com/palmaswell&quot;&gt;@palmaswell&lt;/a&gt;) showed pasionated how important it is to make the web accessible for everyone, also for the ones with a disability. For example, he show cased how to use the Google speech API. A quote to remember from Maricio: “If we use our own abilities as a baseline, we make things that are easy for some people to use, but difficult for everyone.”&lt;/p&gt;

&lt;h3 id=&quot;the-web-authentication-api---imagine-a-world-without-passwords&quot;&gt;The Web Authentication API - Imagine a World Without Passwords&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;By Suby Raman (&lt;a href=&quot;https://twitter.com/@subyraman&quot;&gt;@subyraman&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Passwords were invented for a good reason. The world has changed and unfortunately, passwords are not sufficiently secure enough anymore. There are a lot of problems attached to the concept of passwords. The Web Authentication API allows us to authenticate our users using public key cryptography. This prevents malicious users to gain access to your data even if they have the public key. Modern computers have dedicated hardware to perform authentication, like touchID, faceID, camera’s, usb-tokens. This can now be used in our webapplications. This is very much in line with what we are want to achieve in our own &lt;a href=&quot;https://github.com/philips-software/cogito&quot;&gt;project&lt;/a&gt;. &lt;a href=&quot;https://bit.ly/suby-fsf&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;killing-the-checkout-or-how-i-learned-to-stop-worrying-and-love-payment-request&quot;&gt;Killing the checkout or: How I learned to stop worrying and love Payment Request&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;As member of the W3C Web Payments Working Group, Krystian Czesak (&lt;a href=&quot;https://www.twitter.com/@krystostrerone&quot;&gt;@krystostrerone&lt;/a&gt;), is heavily involved in setting a web standard on Payment Requests. The Response code 402 Payment Required is already there for a long time, but is never implemented. Lots of attempts are made, but none of them succeeded till now.. Currently the checkout procedure on most applications is not so user friendly. The Web Payments is initiated to improve this user experience. All modern browsers support it. All information about you is stored in your browser and not on each page. There’s an API available to use that information, so the user only has to add the information once and it can be used in every application. Chrome even supports Interledger. The presentation has a lot of information how to implement a client for this. See the slides for more info. &lt;a href=&quot;https://speakerdeck.com/krystosterone/killing-the-checkout-or-how-i-learned-to-stop-worrying-and-love-payment-request&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-real-world-pwa&quot;&gt;A Real World PWA&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Zack Argyle, &lt;a href=&quot;https://twitter.com/ZackArgyle&quot;&gt;@ZackArgyle&lt;/a&gt; stared with the story of Pinterest and what will happen with your uses once you decide to make a blocking page and only support a app. Smoothly continuing with the story how important it is to have a reactive app and what that means. A progressive web app is according to Zack: “A site that utilizes progressive enhancements, meaning that modern browsers will get a better experience than older browsers”. He explained how he used the principle of the 3R’s to build a progressive app. By Reduce, make it light. Use for example &lt;a href=&quot;https://www.npmjs.com/package/webpack-bundle-analyzer&quot;&gt;the webpack analyzer&lt;/a&gt;. Reuse, caching, server workers. Cache via a worker is faster then the browser cache. And Review, measure performance! Slides are available &lt;a href=&quot;https://speakerdeck.com/zackargyle/a-real-world-pwa&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;purifying-typescript&quot;&gt;Purifying Typescript&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Timothy Clifford, &lt;a href=&quot;https://twitter.com/timothyclifford&quot;&gt;@timothyclifford&lt;/a&gt;. Cool to see that we can do functional programming with JavaScript a language written in 10 days back in 1995 an nowadays the most populair language. We really liked the talk and clear examples how to program functional with TypeScript in JavaScript. Maybe the talk was little to much basic introduction to functional programming, but Timothy succeeds in his mission statement: “Understand how to apply functional programming techniques with TypeScript”. &lt;a href=&quot;https://github.com/timothyclifford/purifying-typescript/raw/master/Functional%20Typescript%20-%20Tim%20Clifford.pdf&quot;&gt;Slides&lt;/a&gt; and &lt;a href=&quot;https://github.com/timothyclifford/purifying-typescript&quot;&gt;code&lt;/a&gt; are shared via GitHub.&lt;/p&gt;

&lt;h3 id=&quot;dynamic-css-layouts--beyond&quot;&gt;Dynamic CSS: Layouts &amp;amp; Beyond&lt;/h3&gt;
&lt;p&gt;rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;This talk by -Tara Vancil-, I mean Miriam Suzanne (&lt;a href=&quot;https://twitter.com/mirisuzanne&quot;&gt;@mirisuzanne&lt;/a&gt;), was really fantastic. She integrated lots of photos from previous talks on the same day. But not only that was remarkable. The knowledge on CSS is outstanding. She showed us the history of how we used to do CSS, from tables to SASS, to flexbox and Houdini. But all of these methods needed some wicked tricks to work in some cases. Now there is something new and this is promising. CSS Grid. This is the future of layouts, so take a look at this. In the slides you will see several examples of how to use it. F.e. &lt;a href=&quot;https://gridbyexample.com/&quot;&gt;https://gridbyexample.com/&lt;/a&gt; and the the  &lt;a href=&quot;http://talks.oddbird.net/dynamic-css/fullstack18/&quot;&gt;Slides&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;lightning-talks&quot;&gt;Lightning talks&lt;/h3&gt;

&lt;p&gt;1
first one: @EleanorClarinet
Nice corrolation between learning music and learning to code.
Don’t be a “Mozart pianist”, be a musician
Don’t be a “React developer”, be an engineer&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1Al7AUbzCwFW7qxi69DiWcpxbcKQOV29uxUDrbnhJD6c&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2
Isac. Rocket fuel for Ember.js and javascript teams.
Splanky about jazz shows in Smalls NYC.&lt;/p&gt;

&lt;p&gt;3
2013 it was already possible to do a lot of reactive stuff with imba.io&lt;/p&gt;

&lt;p&gt;4
Robert Nickel about Mob Programming.
We love Mob Programming, but it’s hard. See &lt;a href=&quot;https://docs.google.com/presentation/d/1HwfNfWzRSPMSIrTi41yRaRPme3xdI6dD18vwxi2kfJo/edit#slide=id.g40d1a107b1_0_138&quot;&gt;slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5
Andreaverlicchie.eu
Better navigation in markup&lt;/p&gt;

&lt;p&gt;6
Berkay –&amp;gt; Sharing
How to share components between multiple react projects&lt;/p&gt;

&lt;h3 id=&quot;webxr-if-x--how&quot;&gt;WebXR, if X = how?&lt;/h3&gt;
&lt;p&gt;rating: :star: :star:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/diekus&quot;&gt;Diego González&lt;/a&gt; and Indira Knight introduced Extended reality, XR or should we say AR + VR in the browser. Physical and virtual worlds are merging, XR is coming to the browser, and the browser is coming to XR devices. The frameworks ((A-Frame &amp;amp;&amp;amp; ThreeJS) || BabylonJS) &amp;amp;&amp;amp; WebGl where demoed in the browser, both in a 2d and 3d view. For more details see the &lt;a href=&quot;https://www.slideshare.net/DiegoGonzlezZiga/webxr-if-x-how&quot;&gt;slides&lt;/a&gt; for more references.&lt;/p&gt;

&lt;h2 id=&quot;thanks-to-codegram&quot;&gt;Thanks to Codegram&lt;/h2&gt;

&lt;p&gt;We would like to conclude our post with a big applause for &lt;a href=&quot;https://www.codegram.com/&quot;&gt;codegram&lt;/a&gt;, the Full Stack Fest was awesome again. Please never change the single track philosophy. And did we already mentioned the food is the best we ever had on a conference.&lt;/p&gt;

&lt;div style=&quot;position:relative; width:100%; height:0px; padding-bottom:56.25%;&quot;&gt;
    &lt;iframe style=&quot;position:absolute; left:0; top:0; width:100%; height:100%&quot; src=&quot;https://www.youtube.com/embed/YIRvXmJyRxQ?list=PLe9psSNJBf75O6abYvvjxhm36_QU9H-f2?rel=0&quot; frameborder=&quot;0&quot; allow=&quot;encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jeroen&quot;, &quot;last_name&quot;=&gt;&quot;Knoops&quot;, &quot;github&quot;=&gt;&quot;JeroenKnoops&quot;, &quot;twitter&quot;=&gt;&quot;johnnybusca&quot;, &quot;linkedin&quot;=&gt;&quot;jeroenknoops&quot;, &quot;permalink&quot;=&gt;&quot;/author/jeroen/&quot;, &quot;header-img&quot;=&gt;&quot;img/vanmoll.jpg&quot;, &quot;avatar&quot;=&gt;&quot;jeroen.png&quot;, &quot;email&quot;=&gt;&quot;jeroen.knoops@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;Jeroen Knoops is a full stack developer. He has worked in corporate environments for many years. He also had the pleasure to work for a small tech startup. All of his work is driven by innovation.\n\n Some keywords: Akai MPC, Urfaust, Richard Dawkins, Zed Shaw, TB-303, Erik Satie, Kapsalon, The Apemen, Piano, Hans Rosling, Haus Arafna, Apple ][, BRNS, Ravi Shankar, Lego geen playmobil, TR-909, Netflix, Tuscany, Kraftwerk, Quadrupel, Frikandel Speciaal, avdi, Moonlizards, Sandi Metz, Pixies, Strijp, Henrik Kniberg, Hazes, Public Enemy, Tesla, Funkmaster Flex, Hakan Forss, Bruce Willis, GitHub, Tony Touch, Hef, Mobb Deep, Funkdoobiest, good food, Noah's ark, Turing, Sugababes, VPRO's DutchMasters, Drums, Jet Li, Craft Beers, Synths, Bowling, La Musica della Mafia, UDS, Unsequenced, Christopher Hitchens, Slapshot en David Anderson.&quot;}</name><email>jeroen.knoops@gmail.com</email></author><category term="fullstack" /><summary type="html">Full Stack Fest 2018</summary></entry><entry><title type="html">Full Stack Fest 2018</title><link href="https://040code.github.io//2018/09/05/fsf-backend/" rel="alternate" type="text/html" title="Full Stack Fest 2018" /><published>2018-09-05T00:00:00+00:00</published><updated>2018-09-05T00:00:00+00:00</updated><id>https://040code.github.io//2018/09/05/fsf-backend</id><content type="html" xml:base="https://040code.github.io//2018/09/05/fsf-backend/">&lt;h1 id=&quot;full-stack-fest-2018&quot;&gt;Full Stack Fest 2018&lt;/h1&gt;

&lt;p&gt;This week we (Jeroen, Niek, Gertjan, Eric and Kike) are enjoying &lt;a href=&quot;https://2018.fullstackfest.com/&quot;&gt;Full Stack Fest 2018 Barcelona&lt;/a&gt;,
a week-long full stack development conference with a focus on solving current problems with new &amp;amp; inspiring perspectives.&lt;/p&gt;

&lt;p&gt;In this quite short blog we just summarizing briefly the talks and &lt;strong&gt;our opinion&lt;/strong&gt; about the talks. We have rated all talks, the rating is subjective as well.&lt;/p&gt;

&lt;p&gt;This conference is split up in two parts. The first two days were focussed on Frontend development. You can read our post about it &lt;a href=&quot;https://040code.github.io/2018/09/18/fsf-frontend/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all we would like to thank &lt;a href=&quot;https://twitter.com/xbill82&quot;&gt;Luca Marchesini&lt;/a&gt; for hosting the sessions.&lt;/p&gt;

&lt;h2 id=&quot;day-one&quot;&gt;Day one&lt;/h2&gt;

&lt;h3 id=&quot;reinvent-the-social-web&quot;&gt;Reinvent the social web&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;André Staltz (&lt;a href=&quot;https://twitter.com/andrestaltz&quot;&gt;@andrestaltz&lt;/a&gt;) explained the problems we have with the current generation of social networks. Are the realy open, free, innovative? Can we trust and respect people in the network. He explained passionated how we can change the future with decentralized networks such as &lt;a href=&quot;https://www.scuttlebutt.nz/&quot;&gt;scuttlebutt&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;open-gateway---decentralized-iot&quot;&gt;Open Gateway - Decentralized IoT&lt;/h3&gt;
&lt;p&gt;Rating:&lt;/p&gt;

&lt;p&gt;Kalyan Dikshit (&lt;a href=&quot;https://twitter.com/decode_dev&quot;&gt;@decode_dev&lt;/a&gt;) presents about the open gateway initiative from Mozilla. Not our topic.&lt;/p&gt;

&lt;h3 id=&quot;build-and-deploy-a-blockchain-web-app-with-hyperledger-fabric-and-hyperledger-composer&quot;&gt;Build and deploy a Blockchain web-app with Hyperledger Fabric and Hyperledger Composer&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Hyperledger is something we’re looking into right now, so this talk was very relevant. Horea Porutiu (&lt;a href=&quot;https://twitter.com/horeaporutiu&quot;&gt;@horeaporutiu&lt;/a&gt;) showed the basic things about hyperledger and that’s great for this audience. Great balance between technical information, examples and real applications of the chain. Their work with &lt;a href=&quot;https://www.brooklynroasting.com/&quot;&gt;Brooklyn Roasting Company&lt;/a&gt; was a good example how to use the blockchain. It shows an audit trail on your coffee.&lt;/p&gt;

&lt;h3 id=&quot;a-game-of-theories-why-languages-do-what-they-do&quot;&gt;A Game of Theories: Why languages do what they do&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Rae Krantz (&lt;a href=&quot;https://twitter.com/rustbeltrae&quot;&gt;@rustbeltrae&lt;/a&gt;) quickly compared the ugly and beauty of Ruby, Python, Go, Clojure, JavaScript, Erlang, Rust and Elixir. Yeah we never will do Clojure and from tomorrow we only do Rust and Elixir. Awesome session. Best quote of the day: “JavaScript was written in the time of Netscape when Java was popular.” :)&lt;/p&gt;

&lt;h3 id=&quot;the-future-of-chatbots-in-the-travel-industry&quot;&gt;The Future of ChatBots in the Travel Industry&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Prabh Simran Singh Baweja&lt;/p&gt;

&lt;p&gt;Designing a chatbot is not that easy as it sounds. “Book me a hotel for this weekend.” What kind of hotel? Where? Weekend, is it friday and saturnday or is it saturday and sunday? How to combine data in a good way so people are not annoyed. Nice insights on how bookings.com is building these bots.
Look at &lt;a href=&quot;https://speakerdeck.com/prabh27/the-future-of-chatbots-in-the-travel-industry&quot;&gt;his slides&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;avoiding-digital-bias&quot;&gt;Avoiding Digital Bias&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Adam L Smith (&lt;a href=&quot;https://twitter.com/adamleonsmith&quot;&gt;@adamleonsmith&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;In modern worlds we use large datasets to tune our models. This is not without danger. Our datasets are often biased. Good tips on how to test if the models are digitally bias, by changing some of the fields like gender. Never use stock images. Nice example was shown if you google on CTO. This is not a good representation of the world. Enough food for thoughts!&lt;/p&gt;

&lt;h3 id=&quot;everything-i-always-wanted-to-know-about-crypto-but-never-thought-id-understand&quot;&gt;Everything I always wanted to know about crypto, but never thought I’d understand&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Sasha Romijn (&lt;a href=&quot;https://twitter.com/mxsash&quot;&gt;@mxsash&lt;/a&gt;) gave a fast introduction to cryptographic basic concepts that every developer should know. Quote: “Export in cypher builder should ring an alarm bell”
A good overview of the magical world of Crypto. If you want to learn more about this, I would certainly recommend a free &lt;a href=&quot;https://www.coursera.org/learn/crypto&quot;&gt;coursera course on this topic&lt;/a&gt; given by Dan Boneh.&lt;/p&gt;

&lt;h3 id=&quot;onion-adventures-how-to-use-onion-services-and-the-tor-network-in-your-web-endeavors&quot;&gt;Onion adventures: how to use onion services and the Tor network in your web endeavors&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Respect for Silvia Puglisi (&lt;a href=&quot;https://twitter.com/nopressure&quot;&gt;@nopressure&lt;/a&gt;) for giving this talk when she has the flu. Very good to see all the activity around Tor. Important to keep on bringing the message it’s not that obvious to have freedom of speech and expression. /me installing TOR.&lt;/p&gt;

&lt;h3 id=&quot;everything-in-sketchnotes&quot;&gt;Everything in sketchnotes..&lt;/h3&gt;
&lt;p&gt;A big shoutout to Christin Westermann (&lt;a href=&quot;https://twitter.com/_c16n_&quot;&gt;@&lt;em&gt;c16n&lt;/em&gt;&lt;/a&gt;) for creating these sketchnotes!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-09_fullstackfest/fullstackfest-2018-01.jpg&quot; alt=&quot;fullstackfest-2018-01&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-09_fullstackfest/fullstackfest-2018-02.jpg&quot; alt=&quot;fullstackfest-2018-02&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;day-2&quot;&gt;Day 2&lt;/h2&gt;

&lt;h3 id=&quot;observability-for-emerging-infra-what-got-you-here-wont-get-you-there&quot;&gt;Observability for Emerging Infra: What Got You Here Won’t Get You There&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Charity Majors (&lt;a href=&quot;@https://twitter.com/mipsytipsy&quot;&gt;@mipsytipsy&lt;/a&gt;) gave a very good talk on how to look at current systems. In the current era, you cannot simply say: “Our application is up..” What does that mean? What’s up? Move away from the known-unknowns which can be monitored with dashboards, but look at the real problems users experience. Focus on the unknown-unknowns and make sure you can react and analyse your applications fast. Don’t aggregate data, because you will lose important details about problems. Come up with good sampling strategies. Build observability in from day one! Cool shirt, “I test in prod”. Quote: “What is unknown, we must leave uncoded.”&lt;/p&gt;

&lt;h3 id=&quot;do-you-need-a-service-mesh&quot;&gt;Do you need a Service Mesh?&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;A great presentation given by Matt Turner (&lt;a href=&quot;https://twitter.com/mt165pro&quot;&gt;@mt165pro&lt;/a&gt;) about Service Mesh. He demo-ed the principles of Service Mash by using &lt;a href=&quot;https://istio.io/&quot;&gt;istio.io&lt;/a&gt;. He used kubernetes to demo some of the configuration you can setup with only proxy-ing between different services. Very powerful concept. I’m wondering how this can be used in an infrastructure-as-code architecture.&lt;/p&gt;

&lt;h3 id=&quot;http-and-json-for-your-grpc-services&quot;&gt;HTTP and JSON for your gRPC Services&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Michael Hamrah (&lt;a href=&quot;https://twitter.com/mhamrah&quot;&gt;@mhamrah&lt;/a&gt;) gRPCed all the things. First feeling was Oh no we go to do again CORBA, and there are similairities between gRPC and CORBA. In this talk Michael explained how you can build high performance application and left the all the plumbing code to the gRPC framweork. Just simply define an interface via IDL and only take care of the real business code. It was also nice to see how you can combine gRPC via &lt;a href=&quot;https://github.com/google/rejoiner&quot;&gt;rejoiner&lt;/a&gt; with GraphQL. Slides are available &lt;a href=&quot;https://speakerdeck.com/mhamrah/grpc-all-the-things&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;software-engineering---a-philosophical-activity&quot;&gt;Software Engineering - A philosophical activity&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Tom Enden (&lt;a href=&quot;https://twitter.com/tom_enden&quot;&gt;@tom_enden&lt;/a&gt;): Did you know that Plato invented OOP and the Prototype pattern is inspired by Nominalism which also dates back to Plato. Tom showed the parallels between philosophy and software engineering. According the pragmatic programmer we should learn at least one language every year. Since different languages solved things in different ways. And Tractatus says the limits of my language means the limit of the world. So looking on philosophy we can inspire our selves for new ideas. &lt;a href=&quot;https://www.slideshare.net/TomEnden/software-engineering-as-a-philosophical-activity&quot;&gt;The slides&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;take-a-client-hint&quot;&gt;Take a (Client) Hint!&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Jeremy Wagner (&lt;a href=&quot;https://twitter.com/malchata&quot;&gt;@malchata&lt;/a&gt;) explained nicely the power of client hints. Having a fast internet and reliable internet connection is still not common. For example a survey by Pew Research shows that one-third of American adults do not subscribe to any internet access faster than dial-up at their home. So building responsive clients on slow or unreliable networks still counts. Client hints comes in different types. By opting in (header &lt;code class=&quot;highlighter-rouge&quot;&gt;ACCEPT-CH&lt;/code&gt;) a client can inform that it understands client hints, Device hints enables for example responsive images and netwrok hints can inform the server about the speed of the network of the client. The slides are &lt;a href=&quot;https://jlwagner.net/talks/take-a-client-hint/&quot;&gt;here&lt;/a&gt; available.&lt;/p&gt;

&lt;h3 id=&quot;lost-in-transaction-strategies-to-deal-with-in-consistency-in-distributed-systems&quot;&gt;Lost in transaction? Strategies to deal with (in-)consistency in distributed systems&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Bernd Rücker (&lt;a href=&quot;https://twitter.com/berndruecker&quot;&gt;@berndruecker&lt;/a&gt;) is a (work-)flow automation enthusiast. He explained the strategies to deal with the temporary inconsistency and how you can convert it to consistency again using the starbucks as example. One can use different approaches to it. Chorography vs orchestration.
These kind of problems can be solved by using a BPMN product like Camunda. System become complexer every day and this will become a bigger problem everyday. And what should we never forget: Zucchini and idempotency.&lt;/p&gt;

&lt;p&gt;This talk triggered a lot of thoughts for me personally. This is one of the areas where blockchain might actually solve things. Use smartcontracts to atomically commit transactions all at the same time. Fortunately he already wrote a blog post about the topic. Great speaker!
&lt;a href=&quot;https://blog.bernd-ruecker.com/&quot;&gt;Bernd Ruecker’s blog&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;lightning-talks&quot;&gt;Lightning talks&lt;/h3&gt;
&lt;p&gt;Antiona Librada (&lt;a href=&quot;https://twitter.com/antoniolibrada&quot;&gt;@antoniolibrada&lt;/a&gt;) showed us how he improved a complex ci build pipeline which took &amp;gt; 45 minutes to run by using 2 lambdas and Amazon Code Build. The outcome was a more stable, cheaper and faster build pipeline. They increased the number of daily deployments drastically.&lt;/p&gt;

&lt;p&gt;Peter van der Meulen (&lt;a href=&quot;https://twitter.com/HendrikPetertje&quot;&gt;@HendrikPetertje&lt;/a&gt;) showed us his terminal. This shows again how important improving your daily workflow is. Some highights: Spotify in Vim, thefuck, circleci-cli, wee-slack. For more info: &lt;a href=&quot;https://git.picodevelopment.nl/explore/snippets&quot;&gt;snippets&lt;/a&gt; and &lt;a href=&quot;https://git.picodevelopment.nl/explore/projects&quot;&gt;projects&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aaron Bassett (&lt;a href=&quot;https://twitter.com/aaronbassett&quot;&gt;@aaronbassett&lt;/a&gt;) showed us some amazing (and probably illegal) things about SMS. &lt;a href=&quot;https://speakerdeck.com/aaronbassett/stupid-and-possibly-illegal-stuff-you-can-do-with-sms-but-probably-shouldnt&quot;&gt;Here&lt;/a&gt; you can find his slides. Really scary.&lt;/p&gt;

&lt;p&gt;Two nice talks on our power as developers to shape the world. Let’s do this right this time.&lt;/p&gt;

&lt;h3 id=&quot;cats-the-musical-algorithmic-song-meow-ification&quot;&gt;Cats, The Musical! Algorithmic Song Meow-ification&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Awesome to see how Beth Haubert (&lt;a href=&quot;https://twitter.com/haubertdashery&quot;&gt;@haubertdashery&lt;/a&gt;) passionated hacked her way around to generated a cat meow song from songs using ruby. It was really fun to see, how the program evolved! Especially because at the end, the result was really terrible..&lt;/p&gt;

&lt;h3 id=&quot;everything-in-sketchnotes-1&quot;&gt;Everything in sketchnotes..&lt;/h3&gt;

&lt;p&gt;A big shoutout to Christin Westermann &lt;a href=&quot;https://twitter.com/_c16n_&quot;&gt;@&lt;em&gt;c16n&lt;/em&gt;&lt;/a&gt; for creating these sketchnotes!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-09_fullstackfest/fullstackfest-2018-03.jpg&quot; alt=&quot;fullstackfest-2018-03&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-09_fullstackfest/fullstackfest-2018-04.jpg&quot; alt=&quot;fullstackfest-2018-04&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-09_fullstackfest/fullstackfest-2018-05.jpg&quot; alt=&quot;fullstackfest-2018-05&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jeroen&quot;, &quot;last_name&quot;=&gt;&quot;Knoops&quot;, &quot;github&quot;=&gt;&quot;JeroenKnoops&quot;, &quot;twitter&quot;=&gt;&quot;johnnybusca&quot;, &quot;linkedin&quot;=&gt;&quot;jeroenknoops&quot;, &quot;permalink&quot;=&gt;&quot;/author/jeroen/&quot;, &quot;header-img&quot;=&gt;&quot;img/vanmoll.jpg&quot;, &quot;avatar&quot;=&gt;&quot;jeroen.png&quot;, &quot;email&quot;=&gt;&quot;jeroen.knoops@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;Jeroen Knoops is a full stack developer. He has worked in corporate environments for many years. He also had the pleasure to work for a small tech startup. All of his work is driven by innovation.\n\n Some keywords: Akai MPC, Urfaust, Richard Dawkins, Zed Shaw, TB-303, Erik Satie, Kapsalon, The Apemen, Piano, Hans Rosling, Haus Arafna, Apple ][, BRNS, Ravi Shankar, Lego geen playmobil, TR-909, Netflix, Tuscany, Kraftwerk, Quadrupel, Frikandel Speciaal, avdi, Moonlizards, Sandi Metz, Pixies, Strijp, Henrik Kniberg, Hazes, Public Enemy, Tesla, Funkmaster Flex, Hakan Forss, Bruce Willis, GitHub, Tony Touch, Hef, Mobb Deep, Funkdoobiest, good food, Noah's ark, Turing, Sugababes, VPRO's DutchMasters, Drums, Jet Li, Craft Beers, Synths, Bowling, La Musica della Mafia, UDS, Unsequenced, Christopher Hitchens, Slapshot en David Anderson.&quot;}</name><email>jeroen.knoops@gmail.com</email></author><category term="iot" /><category term="cloud" /><category term="fullstack" /><category term="microservices" /><category term="security" /><summary type="html">Full Stack Fest 2018</summary></entry><entry><title type="html">Maze Generation</title><link href="https://040code.github.io//2018/08/22/mazes/" rel="alternate" type="text/html" title="Maze Generation" /><published>2018-08-22T00:00:00+00:00</published><updated>2018-08-22T00:00:00+00:00</updated><id>https://040code.github.io//2018/08/22/mazes</id><content type="html" xml:base="https://040code.github.io//2018/08/22/mazes/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;During my summer holiday, in between long walks and nice food &amp;amp; drinks, I felt
like writing some code for fun. Unfortunately, I didn’t bring my laptop.
Luckily, &lt;a href=&quot;https://twitter.com/mfikes&quot;&gt;Mike Fikes&lt;/a&gt; created a &lt;a href=&quot;https://itunes.apple.com/us/app/replete/id1013465639&quot;&gt;ClojureScript REPL
for mobile devices&lt;/a&gt; to
write some Clojure(script) without a laptop close at hand.&lt;/p&gt;

&lt;p&gt;A REPL, or a Read Eval Print Loop, reads your input, evaluates it, prints the
result and waits for new inputs to read. In the meantime, the code you wrote
lives in REPL memory. So if I define a function in the REPL, it will be read and
evaluated and in my next input I can call this function, because it lives in
REPL space.&lt;/p&gt;

&lt;p&gt;So, back to this REPL on my phone. Permanently saving work is not possible in
this REPL, there are no debugging capabilities, no code completion, no test
runners … just a REPL: 35 characters wide in portrait mode, 79 characters wide
in landscape mode. To give you an idea of my ‘Integrated Development
Environment’ and the resulting mazes, I recorded a 30 seconds screen cast:&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/286153487&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;At home, I created a gist containing all 70 lines of &lt;a href=&quot;https://gist.github.com/mmzsource/ee88b93a3829f98fcb6188f2f2162fcf&quot;&gt;maze
code&lt;/a&gt; (56
lines according to the command-line tool cloc). In this blog I’m going to explain
the concepts and code.&lt;/p&gt;

&lt;h2 id=&quot;grids-cells-and-neighbours&quot;&gt;Grids, Cells and Neighbours&lt;/h2&gt;

&lt;p&gt;First of all, we’ll need a grid and a coordinate system to point to individual
cells in the grid. The reason is that most maze generators expect to be able to
traverse a grid and lookup information about cells and neighbours of cells.&lt;/p&gt;

&lt;p&gt;A grid can be modeled as a vector of vectors, representing rows and columns:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(def grid
  [[1 2 3]
   [4 5 6]
   [7 8 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A cell can be pinpointed by its [row col] coordinate which matches perfectly
with the &lt;code class=&quot;highlighter-rouge&quot;&gt;get-in&lt;/code&gt; function in clojure. This &lt;code class=&quot;highlighter-rouge&quot;&gt;get-in&lt;/code&gt; function is used to find
items in nested data structures. For instance, &lt;code class=&quot;highlighter-rouge&quot;&gt;(get-in grid [2 1])&lt;/code&gt; will result
in the value &lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To find the neighbours of a cell, I created a couple of helper functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn north-of [[row col]] [(dec row) col])
(defn south-of [[row col]] [(inc row) col])
(defn west-of  [[row col]] [row (dec col)])
(defn east-of  [[row col]] [row (inc col)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function argument is destructured (taken apart and named) and the
&lt;code class=&quot;highlighter-rouge&quot;&gt;north-of&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;south-of&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;west-of&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;east-of&lt;/code&gt; neighbour coordinate is
calculated by &lt;code class=&quot;highlighter-rouge&quot;&gt;inc&lt;/code&gt;rementing or &lt;code class=&quot;highlighter-rouge&quot;&gt;dec&lt;/code&gt;rementing the row or column number. For
instance, &lt;code class=&quot;highlighter-rouge&quot;&gt;(north-of [1 1])&lt;/code&gt; results in the value &lt;code class=&quot;highlighter-rouge&quot;&gt;[0 1]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;juxt&lt;/code&gt; function we can now calculate all neighbours in one go. &lt;code class=&quot;highlighter-rouge&quot;&gt;juxt&lt;/code&gt;
takes a variable number of functions as arguments and returns a new function.
This new function returns a vector containing the result of applying each
function to the arguments provided. So for instance &lt;code class=&quot;highlighter-rouge&quot;&gt;((juxt north-of south-of
west-of east-of) [1 1])&lt;/code&gt; results in the value &lt;code class=&quot;highlighter-rouge&quot;&gt;[[0 1] [2 1] [1 0] [1 2]]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, these functions don’t care about the grid. &lt;code class=&quot;highlighter-rouge&quot;&gt;((juxt north-of
south-of west-of east-of) [0 0])&lt;/code&gt; will happily return &lt;code class=&quot;highlighter-rouge&quot;&gt;[[-1 0] [1 0] [0 -1] [0
1]]&lt;/code&gt; containing cell coordinates inside AND outside the grid. Therefore, in
order to calculate all neighbours &lt;strong&gt;in&lt;/strong&gt; the grid, we need to filter out the
ones that are not part of the grid. This results in the following &lt;code class=&quot;highlighter-rouge&quot;&gt;neighbours&lt;/code&gt;
function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn neighbours [grid cell]
  (filter #(get-in grid %) ((juxt north-of south-of west-of east-of) cell)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;mazes-and-cells&quot;&gt;Mazes and Cells&lt;/h2&gt;

&lt;p&gt;Now working with the grid is easy, let’s move on to the maze. A maze is
basically a grid, augmented with some information to determine if borders
between cells are open or closed. That information can be easily stored in the
cells themselves.&lt;/p&gt;

&lt;p&gt;I liked the approach &lt;a href=&quot;http://fn-code.blogspot.com/2015/04/a-maze-ing-mazes-with-clojure.html&quot;&gt;Mark
Bastian&lt;/a&gt;
took: in a cell, simply list the coordinates of neighbours the cell is connected
to. We can even list the coordinates in a set &lt;code class=&quot;highlighter-rouge&quot;&gt;#{}&lt;/code&gt;, since duplicating neighbour
coordinates is useless. A 2x2 ‘maze’ with all borders closed looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;[[#{} #{}]
 [#{} #{}]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A 2x2 ‘maze’ with an open border between the 2 cells on the left looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;[[#{[1 0]} #{}]
 [#{[0 0]} #{}]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The two connected cells reference each other. It would be convenient to have a
function that updates the grid when a border needs to be removed between 2
cells:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn remove-border [grid c1 c2]
  (-&amp;gt; grid
      (update-in c1 conj c2)
      (update-in c2 conj c1)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;maze-generation&quot;&gt;Maze Generation&lt;/h2&gt;

&lt;p&gt;Now it’s time for the maze generation. Luckily I had a copy of the &lt;a href=&quot;https://www.amazon.com/Mazes-Programmers-Twisty-Little-Passages/dp/1680500554&quot;&gt;‘Mazes for
Programmers
book’&lt;/a&gt;
on my phone. Because I like the texture of the mazes coming out of the recursive
backtracker algorithm, I decided to implement that one.&lt;/p&gt;

&lt;p&gt;The algorithm can start on any cell on the grid and I decided to start on &lt;code class=&quot;highlighter-rouge&quot;&gt;[0
0]&lt;/code&gt; every single time. Every cell that is visited by the algorithm is pushed on
a stack which I have called the &lt;code class=&quot;highlighter-rouge&quot;&gt;backtrackstack&lt;/code&gt;. The cell on top of the stack
is considered the current cell.&lt;/p&gt;

&lt;p&gt;From the current cell, a path is created (&lt;code class=&quot;highlighter-rouge&quot;&gt;remove-border&lt;/code&gt;) to a randomly
selected, previously unvisited neighbour. An unvisited neighbour can easily be
detected, since it’s simply an empty set &lt;code class=&quot;highlighter-rouge&quot;&gt;#{}&lt;/code&gt;. That previously unvisited cell
(&lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; in my code) is also pushed unto the stack. This process repeats
continuously until a cell is visited that has no unvisited neighbours. At that
point, that dead-end cell is popped of the stack, making the previous cell the
current cell. Again, the algorithm will check if this cell has unvisited
neighbours and will either create a path to that unvisited neighbour or pop
another cell from the &lt;code class=&quot;highlighter-rouge&quot;&gt;backtrackstack&lt;/code&gt;. This will continue until every cell has
been visited and the &lt;code class=&quot;highlighter-rouge&quot;&gt;backtrackstack&lt;/code&gt; is empty.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn find-unvisited-neighbours [grid cell]
  (let [n (neighbours grid cell)]
    (filter #(empty? (get-in grid %)) n)))

(defn generate-maze [rows cols]
  (loop [maze           (create-grid rows cols)
         backtrackstack '([0 0])]
    (if (empty? backtrackstack)
      (print-maze maze)
      (let [unvn (find-unvisited-neighbours maze (first backtrackstack))]
        (if (empty? unvn)
          (recur maze (rest backtrackstack))
          (let [next (rand-nth unvn)]
            (recur
             (remove-border maze (first backtrackstack) next)
             (conj backtrackstack next))))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fingers crossed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt; (generate-maze 4 4)

[[#{[1 0]} #{[0 2]} #{[0 3] [0 1]} #{[1 3] [0 2]}]
 [#{[0 0] [2 0]} #{[2 1] [1 2]} #{[1 1] [1 3]} #{[2 3] [0 3] [1 2]}]
 [#{[1 0] [3 0]} #{[2 2] [1 1]} #{[2 1] [3 2]} #{[3 3] [1 3]}]
 [#{[2 0] [3 1]} #{[3 0] [3 2]} #{[2 2] [3 1]} #{[2 3]}]]

 (generate-maze 4 4)

[[#{[0 1]} #{[0 0] [0 2]} #{[1 2] [0 1]} #{[1 3]}]
 [#{[1 1] [2 0]} #{[1 0] [1 2]} #{[1 1] [0 2]} #{[2 3] [0 3]}]
 [#{[1 0] [2 1]} #{[2 0] [3 1]} #{[2 3]} #{[2 2] [3 3] [1 3]}]
 [#{[3 1]} #{[3 0] [2 1] [3 2]} #{[3 3] [3 1]} #{[2 3] [3 2]}]]

 (generate-maze 6 4)

[[#{[1 0]} #{[0 2]} #{[0 3] [0 1]} #{[1 3] [0 2]}]
 [#{[0 0] [2 0]} #{[2 1] [1 2]} #{[1 1] [1 3]} #{[2 3] [0 3] [1 2]}]
 [#{[1 0] [3 0]} #{[1 1] [3 1]} #{[3 2]} #{[3 3] [1 3]}]
 [#{[2 0] [3 1]} #{[3 0] [2 1]} #{[2 2] [4 2]} #{[4 3] [2 3]}]
 [#{[4 1] [5 0]} #{[4 0]} #{[4 3] [5 2] [3 2]} #{[3 3] [4 2]}]
 [#{[5 1] [4 0]} #{[5 2] [5 0]} #{[4 2] [5 3] [5 1]} #{[5 2]}]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice! Now the only thing left is printing a more human friendly view of this
maze.&lt;/p&gt;

&lt;h2 id=&quot;maze-printing&quot;&gt;Maze Printing&lt;/h2&gt;

&lt;p&gt;First, the top of the maze is printed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ascii&quot;&gt;`+---+---+---+`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, for every row the left border is printed &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; and 2 passes over the cells
have to be made. The first pass determines if there should be a border between
the current cell and its &lt;code class=&quot;highlighter-rouge&quot;&gt;east-of&lt;/code&gt; neighbour, resulting in something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ascii&quot;&gt;+---+---+---+---+
|           |   |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second pass over the row adds a &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; and then determines if there should be a
border between the current cell and its &lt;code class=&quot;highlighter-rouge&quot;&gt;south-of&lt;/code&gt; neighbour, for instance
resulting in this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ascii&quot;&gt;+---+---+---+---+
|           |   |
+---+---+   +   +
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After repeating this for all rows, a maze like this is printed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ascii&quot;&gt;+---+---+---+---+
|           |   |
+---+---+   +   +
|       |       |
+   +   +---+   +
|   |       |   |
+   +---+   +   +
|       |       |
+---+---+---+---+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(defn east-open-border? [maze cell]
  (contains? (get-in maze (east-of cell)) cell))

(defn south-open-border? [maze cell]
  (contains? (get-in maze (south-of cell)) cell))

(defn print-cell-body [maze cell]
  (if (east-open-border? maze cell)
    &quot;    &quot;
    &quot;   |&quot;))

(defn print-cell-bottom [maze cell]
  (if (south-open-border? maze cell)
    &quot;   +&quot;
    &quot;---+&quot;))

(defn print-maze [maze]
  (let [result (atom [])
        rows   (range (count maze))
        cols   (range (count (get-in maze [0])))]
    (swap! result conj &quot;+&quot; (repeat (count cols) &quot;---+&quot;) &quot;\n&quot;)
    (doseq [row rows]
      (swap! result conj &quot;|&quot;)
      (doseq [col cols]
        (swap! result conj (print-cell-body maze [row col])))
      (swap! result conj &quot;\n&quot; &quot;+&quot;)
      (doseq [col cols]
        (swap! result conj (print-cell-bottom maze [row col])))
      (swap! result conj &quot;\n&quot;))
    (println (s/join (flatten @result)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we can print all the mazes we want:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Clojure&quot;&gt;(generate-maze 4 4)

+---+---+---+---+
|   |           |
+   +   +   +---+
|   |   |       |
+   +---+---+   +
|   |       |   |
+   +   +   +   +
|       |       |
+---+---+---+---+

(generate-maze 4 4)

+---+---+---+---+
|       |       |
+---+   +   +   +
|   |   |   |   |
+   +   +---+   +
|   |       |   |
+   +---+   +   +
|               |
+---+---+---+---+

(generate-maze 8 18)

+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
|   |               |   |       |                   |       |           |
+   +   +   +---+   +   +   +   +   +---+   +---+   +   +   +---+---+   +
|   |   |   |   |   |   |   |       |   |   |           |           |   |
+   +---+   +   +   +   +   +---+---+   +   +---+---+---+---+---+   +   +
|       |   |       |   |   |           |           |   |           |   |
+---+   +   +   +---+   +   +   +---+---+   +---+   +   +   +---+---+   +
|   |       |   |       |   |   |       |   |       |       |           |
+   +---+---+   +   +   +   +   +   +   +---+   +---+   +---+   +   +   +
|           |   |   |   |       |   |           |   |   |   |   |   |   |
+   +---+---+   +   +   +   +---+   +---+---+---+   +   +   +   +   +   +
|   |           |   |       |       |   |           |   |       |   |   |
+   +   +---+---+---+---+   +   +---+   +   +---+   +   +---+   +   +   +
|   |   |               |   |       |   |       |   |       |   |   |   |
+   +   +---+   +---+   +---+---+   +   +---+   +   +---+   +---+   +   +
|               |                   |           |                   |   |
+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So there you have it: a maze generator in ~ 30 lines of code with a 30 lines of
code ascii view on top of it, build with nothing but a REPL on a phone. I really
enjoyed the puzzle and the small (and large) successes while working in the
REPL. I hope you enjoyed this recap.&lt;/p&gt;

&lt;p&gt;I’d like to thanks &lt;a href=&quot;https://twitter.com/mfikes&quot;&gt;Mike Fikes&lt;/a&gt; for his excellent
ClojureScript REPL, &lt;a href=&quot;https://twitter.com/mark_bastian&quot;&gt;Mark Bastian&lt;/a&gt; for the
inspiration for the maze data structure, &lt;a href=&quot;https://twitter.com/jamis&quot;&gt;Jamis Buck&lt;/a&gt;
for his lovely ‘Mazes for programmers’ book and &lt;a href=&quot;https://twitter.com/gertgoet&quot;&gt;Gert
Goet&lt;/a&gt; for reviewing an earlier version of this
blog. Faults and not-so-idiomatic Clojure code remaining are my own.&lt;/p&gt;

&lt;p&gt;Back home, I’m happy to be working in Emacs with the excellent Clojure CIDER
plugin again. Which reminds me that during my holiday I visited a picturesque
CIDER factory in France. Cheers!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/assets/2018-08-22-mazes/CIDER.png&quot; alt=&quot;CIDER factory&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please share your comments, suggestions and thoughts about this blog post on
&lt;a href=&quot;https://twitter.com/mmz_&quot;&gt;twitter.com/mmz_&lt;/a&gt;. Thanks for reading and Happy
Coding!&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Mazes-Programmers-Twisty-Little-Passages/dp/1680500554&quot;&gt;‘Mazes for Programmers
book’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/replete/id1013465639&quot;&gt;ClojureScript REPL
for mobile devices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mmzsource/ee88b93a3829f98fcb6188f2f2162fcf&quot;&gt;Maze generation
code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://clojure.org/guides/repl/introduction&quot;&gt;Excellent ‘Programming at the REPL’
documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Maarten&quot;, &quot;last_name&quot;=&gt;&quot;Metz&quot;, &quot;github&quot;=&gt;&quot;mmzsource&quot;, &quot;twitter&quot;=&gt;&quot;MMz_&quot;, &quot;linkedin&quot;=&gt;&quot;maartenmetz&quot;, &quot;permalink&quot;=&gt;&quot;/author/maarten/&quot;, &quot;header-img&quot;=&gt;&quot;img/htc.jpg&quot;, &quot;avatar&quot;=&gt;&quot;maarten.png&quot;, &quot;email&quot;=&gt;&quot;mmz.source@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;Maarten Metz works as a senior software designer at Philips Research and has almost 2 decades of professional coding experience. He holds a Master degree in Human Computer Interaction from the Technical University in Eindhoven. His knowledge and experience range from requirements analysis to system maintenance and everything in between. \n\n His professional interests include interaction design, software requirements, – architecture, – design, – construction, – test automation and everything else that makes a system work. He has held presentations and workshops on various topics including Clojure, lean software development, problem solving, professional development, CQRS and mining code repositories.&quot;}</name><email>mmz.source@gmail.com</email></author><category term="clojure" /><category term="functional" /><summary type="html">Introduction</summary></entry><entry><title type="html">Microhack Brew your code</title><link href="https://040code.github.io//2018/08/08/brew-some-code/" rel="alternate" type="text/html" title="Microhack Brew your code" /><published>2018-08-08T00:00:00+00:00</published><updated>2018-08-08T00:00:00+00:00</updated><id>https://040code.github.io//2018/08/08/brew-some-code</id><content type="html" xml:base="https://040code.github.io//2018/08/08/brew-some-code/">&lt;p&gt;Working on a Mac made my work a lot more fun. Especially when I was introduced to &lt;a href=&quot;https://brew.sh/&quot;&gt;homebrew&lt;/a&gt;, the missing package manager for macOS.&lt;/p&gt;

&lt;p&gt;MacPorts was fine, but it felt clumsy. Every tool seems to be switched to Homebrew and life was good.. Except when you encounter that one tool you need but is not available in brew….&lt;/p&gt;

&lt;h2 id=&quot;meet-gits&quot;&gt;Meet Gits&lt;/h2&gt;
&lt;p&gt;An example of this is the great shell script made by Roy Lines: &lt;a href=&quot;https://github.com/roylines/gits&quot;&gt;gits&lt;/a&gt;.
A shell script to share contribution between two git accounts when pair programming.&lt;/p&gt;

&lt;p&gt;Unfortunately you have to install it by getting a remote bash script and add it in your /usr/local/bin directory with root rights.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo wget https://raw.github.com/roylines/gits/master/gits.sh -O /usr/local/bin/gits
$ sudo chmod ugo+x /usr/local/bin/gits
$ gits
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When I see something like this, it’s another hurdle for using great scripts. It’s a good practice to check these scripts, before putting them into your bash with execution rights. Sometimes, I’m to lazy to do that..
Also I always tend to forget these scripts, so they are never updated and never removed. Your system becomes a mess.&lt;/p&gt;

&lt;p&gt;More people did not like that. An &lt;a href=&quot;https://github.com/roylines/gits/issues/6&quot;&gt;issue&lt;/a&gt; was raised with a question whether it could be installed with homebrew..&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How can it install it on mac? I would prefer to use homebrew.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, let’s help Adam!&lt;/p&gt;

&lt;h2 id=&quot;create-our-own-tap&quot;&gt;Create our own tap&lt;/h2&gt;

&lt;h3 id=&quot;correct-format&quot;&gt;Correct format&lt;/h3&gt;

&lt;p&gt;First step is to change the structure of your script so it can be used for brew.
Scripts need to be in the &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/&lt;/code&gt; directory so that is the first thing we need to do.&lt;/p&gt;

&lt;p&gt;Simply moving the script to the &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt; directory..&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/JeroenKnoops/gits/commit/4de9197fe1e24b751af2a1fe214b4259bf256c49&quot;&gt;https://github.com/JeroenKnoops/gits/commit/4de9197fe1e24b751af2a1fe214b4259bf256c49&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;release-the-script&quot;&gt;Release the script&lt;/h3&gt;

&lt;p&gt;You have to create a release of your script. You can do that by &lt;a href=&quot;https://github.com/JeroenKnoops/gits/releases&quot;&gt;drafting a new release&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have a release, we need the SHA-256 checksum of the release to ensure a proper version of the download.
Browse to the release and copy the name of the tar-file (in our case: &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/JeroenKnoops/gits/archive/0.1.0.tar.gz&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Download the tar and generate the SHA-256.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget https://github.com/JeroenKnoops/gits/archive/0.1.0.tar.gz
$ shasum -a 256 0.1.0.tar.gz
13b778bf5a7f92285f54179cd88bea4b39f661a3de47a7ff0a84b9aa5d865962  0.1.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will need this SHA-256 for our formula.&lt;/p&gt;

&lt;h3 id=&quot;define-the-formula&quot;&gt;Define the Formula&lt;/h3&gt;

&lt;p&gt;We have to define the formula. This can be done by creating a repo called &lt;a href=&quot;https://github.com/JeroenKnoops/homebrew-tap&quot;&gt;homebrew-tap&lt;/a&gt; in your own github repo.
It’s best practice to put some information in the README of this repo about the Formulas which are defined.&lt;/p&gt;

&lt;p&gt;In our case:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## homebrew-tap
Homebrew tap with formula for installing the following:

- [gits](https://github.com/jeroenknoops/gits)


#### Add this tap
`brew tap jeroenknoops/tap`


#### Install
- gits: `brew install gits`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;/Formula&lt;/code&gt; directory you must create a ruby file with the definition, in our case: &lt;a href=&quot;https://github.com/JeroenKnoops/homebrew-tap/blob/master/Formula/gits.rb&quot;&gt;gits.rb&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Gits &amp;lt; Formula
  desc &quot;A shell script to share contribution between two git accounts when pair programming.&quot;
  homepage &quot;https://github.com/jeroenknoops/gits&quot;
  url &quot;https://github.com/JeroenKnoops/gits/archive/0.1.0.tar.gz&quot;
  version &quot;0.1.0&quot;
  sha256 &quot;13b778bf5a7f92285f54179cd88bea4b39f661a3de47a7ff0a84b9aa5d865962&quot;

  def install
    bin.install &quot;bin/gits&quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Push the repo to github and we’re ready to go.&lt;/p&gt;

&lt;h3 id=&quot;test-it&quot;&gt;Test it&lt;/h3&gt;
&lt;p&gt;Now people can use the script by installing it with homebrew.
It’s still in my private homebrew-tap, so people first have to tap into our private tap.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew tap jeroenknoops/tap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that they can install gits with &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install gits&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;i-do-not-want-to-tap-into-someones-tap&quot;&gt;I do not want to tap into someone’s tap&lt;/h2&gt;

&lt;p&gt;To even raise the level of trust of the script / tool and install convenience, you can also put the Formula directly into the &lt;a href=&quot;https://github.com/Homebrew/homebrew-core&quot;&gt;homebrew-core&lt;/a&gt;. Now people don’t need to tap into someones private tap.
This will require some extra steps, like adding tests.&lt;/p&gt;

&lt;p&gt;Brew has a way to test your formula by doing: &lt;code class=&quot;highlighter-rouge&quot;&gt;brew audit --new-formula gits&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will show you what you still need to do, before you can submit it to homebrew. You can also find more information on that in the &lt;a href=&quot;https://docs.brew.sh/Formula-Cookbook&quot;&gt;Formula-Cookbook&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;improvements&quot;&gt;Improvements&lt;/h2&gt;

&lt;p&gt;There are more improvements I should make to release it to homebrew. F.e. add dependencies to &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;.
For now I’m not going to dive into that. Homebrew has good documentation on that: https://docs.brew.sh/Formula-Cookbook&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I really liked the way homebrew is set up. I like the way they name things, like &lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;tap&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bottle&lt;/code&gt;. By adding my own &lt;code class=&quot;highlighter-rouge&quot;&gt;bottle&lt;/code&gt; I’ve learned how homebrew is working and now I even feel more confident in using it. I like the fact that only bottles with tests and with the proper dependencies check can be added in the core homebrew formulas.&lt;/p&gt;

&lt;h3 id=&quot;homebrew-cask&quot;&gt;Homebrew cask&lt;/h3&gt;
&lt;p&gt;Homebrew has another great feature, called &lt;a href=&quot;https://github.com/Homebrew/homebrew-cask&quot;&gt;homebrew cask&lt;/a&gt;. No more: “To install, drag this icon..”. Now you can install tools like &lt;code class=&quot;highlighter-rouge&quot;&gt;atom&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;1password&lt;/code&gt; by simply calling: &lt;code class=&quot;highlighter-rouge&quot;&gt;brew cask install atom&lt;/code&gt;…&lt;/p&gt;

&lt;h2 id=&quot;more-info&quot;&gt;More info&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.brew.sh/How-to-Create-and-Maintain-a-Tap&quot;&gt;https://docs.brew.sh/How-to-Create-and-Maintain-a-Tap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.brew.sh/Formula-Cookbook&quot;&gt;https://docs.brew.sh/Formula-Cookbook&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Homebrew/homebrew-cask&quot;&gt;https://github.com/Homebrew/homebrew-cask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jeroen&quot;, &quot;last_name&quot;=&gt;&quot;Knoops&quot;, &quot;github&quot;=&gt;&quot;JeroenKnoops&quot;, &quot;twitter&quot;=&gt;&quot;johnnybusca&quot;, &quot;linkedin&quot;=&gt;&quot;jeroenknoops&quot;, &quot;permalink&quot;=&gt;&quot;/author/jeroen/&quot;, &quot;header-img&quot;=&gt;&quot;img/vanmoll.jpg&quot;, &quot;avatar&quot;=&gt;&quot;jeroen.png&quot;, &quot;email&quot;=&gt;&quot;jeroen.knoops@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;Jeroen Knoops is a full stack developer. He has worked in corporate environments for many years. He also had the pleasure to work for a small tech startup. All of his work is driven by innovation.\n\n Some keywords: Akai MPC, Urfaust, Richard Dawkins, Zed Shaw, TB-303, Erik Satie, Kapsalon, The Apemen, Piano, Hans Rosling, Haus Arafna, Apple ][, BRNS, Ravi Shankar, Lego geen playmobil, TR-909, Netflix, Tuscany, Kraftwerk, Quadrupel, Frikandel Speciaal, avdi, Moonlizards, Sandi Metz, Pixies, Strijp, Henrik Kniberg, Hazes, Public Enemy, Tesla, Funkmaster Flex, Hakan Forss, Bruce Willis, GitHub, Tony Touch, Hef, Mobb Deep, Funkdoobiest, good food, Noah's ark, Turing, Sugababes, VPRO's DutchMasters, Drums, Jet Li, Craft Beers, Synths, Bowling, La Musica della Mafia, UDS, Unsequenced, Christopher Hitchens, Slapshot en David Anderson.&quot;}</name><email>jeroen.knoops@gmail.com</email></author><category term="microhack" /><category term="mac" /><category term="brew" /><summary type="html">Working on a Mac made my work a lot more fun. Especially when I was introduced to homebrew, the missing package manager for macOS.</summary></entry><entry><title type="html">Immutable Infrastructure</title><link href="https://040code.github.io//2018/05/26/talk-taipei/" rel="alternate" type="text/html" title="Immutable Infrastructure" /><published>2018-05-26T00:00:00+00:00</published><updated>2018-05-26T00:00:00+00:00</updated><id>https://040code.github.io//2018/05/26/talk-taipei</id><content type="html" xml:base="https://040code.github.io//2018/05/26/talk-taipei/">&lt;p&gt;The Docker slogan ‘Build, Ship, and Run’ advertises easy set up of immutable software builds, but it is not always that easy. Setting up immutable builds with Docker is pretty straight forward and shipping is just a matter of pushing the image to a repository. The next step is building the cloud infrastructure to run the containers. In the talk at
the Cloud Native Meetup in Taipei I have shown how to create an immutable infrastructure on AWS with Terraform. The example belows shows how you can run your micro services in docker containers on AWS.&lt;/p&gt;

&lt;p&gt;In this talk I briefly touch upon building immutable software. But the main focus of the talk will be on creating an immutable infrastructure. In this talk I will show you how to create an immutable infrastructure on AWS with Terraform. I will use a real world example to explain and show live how easy you can get micro services live on AWS and continuously apply changes to the same cloud environment..&lt;/p&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;
&lt;p&gt;Below the slides that I used for the talk, the slides are available as well on
&lt;a href=&quot;https://immutable-infrastructure.gitlab.io/taipei-2018/&quot;&gt;GitLab&lt;/a&gt;. You can easy navigate through the slides with the spacebar.&lt;/p&gt;

&lt;div style=&quot;position:relative; width:100%; height:0px; padding-bottom:56.25%;&quot;&gt;
    &lt;iframe style=&quot;position:absolute; left:0; top:0; width:100%; height:100%&quot; src=&quot;https://immutable-infrastructure.gitlab.io/taipei-2018/&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;To get started with Terraform the best starting points are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.terraform.io/intro/examples/&quot;&gt;Terraform.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/npalm/tf-helloworld-demo&quot;&gt;Hello World example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;h3 id=&quot;hello-world&quot;&gt;Hello World&lt;/h3&gt;
&lt;p&gt;During the talk, I demonstrated a hello world example, see the link above. This examples shows some basics of terraform by creating a ec2 instance and security group to server a simple web application. The example only works in the AWS region &lt;code class=&quot;highlighter-rouge&quot;&gt;eu-west-1&lt;/code&gt; since the AMI used is only available in this region.&lt;/p&gt;

&lt;h3 id=&quot;ecs-demo&quot;&gt;ECS demo&lt;/h3&gt;
&lt;p&gt;The second example I have shown, is creating an immutable infrastructure to server docker containers. The picture below descibes briefly the enviroment that will be cretaed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/20170919-immutable-infra/ecs-black.png&quot; alt=&quot;ecs-diagram&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The example also creates log groups in cloudwatch to capture the logging of the ecs agent and the running containers (services).&lt;/p&gt;

&lt;h4 id=&quot;setup&quot;&gt;Setup&lt;/h4&gt;
&lt;p&gt;Before you can start, you need an AWS account with sufficient rights (admin), and you should create a &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; to be able to access your account programmatically.&lt;/p&gt;

&lt;p&gt;Clone the repository containing the ECS &lt;a href=&quot;https://github.com/npalm/tf-ecs-demo.git&quot;&gt;sample&lt;/a&gt; terraform code. To create the infrastructure step-by-step you can check out the tags &lt;code class=&quot;highlighter-rouge&quot;&gt;vpc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ecs&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/npalm/tf-ecs-demo.git
git checkout taipei-vpc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You should also have Terraform installed (&lt;code class=&quot;highlighter-rouge&quot;&gt;home brew install terraform&lt;/code&gt;) and
tfenv to manage your terraform installation. Alternatively use a docker container to run the terraform commands, for example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it --env-file &amp;lt;AWS_KEYS_FILE&amp;gt; -v $(pwd):/data -w /data \
  hashicorp/terraform:0.10.4 &amp;lt;terraform command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In this example you can swithc the reqion by changing the region variable
&lt;code class=&quot;highlighter-rouge&quot;&gt;aws_region&lt;/code&gt; to your own choice. Or set the following environment variable: &lt;code class=&quot;highlighter-rouge&quot;&gt;export TF_VAR_aws_region=ap-northeast-1&lt;/code&gt;
for Tokyo.&lt;/p&gt;

&lt;h4 id=&quot;create-network-layers-vpc&quot;&gt;Create network layers (VPC)&lt;/h4&gt;
&lt;p&gt;In the next steps we will create the network layers.&lt;/p&gt;

&lt;p&gt;First, we initialize and plan our changes.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;terraform init
terraform plan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Terraform should print on the console that 19 needs to be added and 0 to change or destroyed. Next we apply the change be executing &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;add-ecs-cluster&quot;&gt;Add ECS cluster&lt;/h4&gt;
&lt;p&gt;Now we have the network layer created, we will add the ECS cluster. By default the bastion host is disabled, the bastion can be enabled by updating the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;enable_bastion&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform.tfvars&lt;/code&gt; file. Time to plan and apply the new resources for ECS.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout taipei-ecs-1
terraform plan
terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once terraform is ready it will print the url of two applications on the console. One application, is a simple micro service that just prints the AWS availabilty zone where it is running, the other is a &lt;a href=&quot;/2017/05/20/nextbuild-graphql/&quot;&gt;graphql micro service&lt;/a&gt;. It will take a few minutes before the services are available.&lt;/p&gt;

&lt;h4 id=&quot;adding-your-own-service&quot;&gt;Adding your own service.&lt;/h4&gt;
&lt;p&gt;Time to have some more fun. Edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;main.tf&lt;/code&gt; and start making changes. Remove all the services, add your own service. By default for each service an application load balancer (ALB) is created. Add for each services that you want to deploy a configuration as below and update the variables as required.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module &quot;your-service&quot; {
  source = &quot;ecs-service&quot;

  service_name   = &quot;&amp;lt;service-name&amp;gt;&quot;
  image_url      = &quot;&amp;lt;docker-image&amp;gt;&quot;
  container_port = &amp;lt;port in the container where the service is listening&amp;gt;
  desired_count  = &amp;lt;number of instances&amp;gt;

  aws_region  = &quot;${var.aws_region}&quot;
  environment = &quot;${var.environment}&quot;

  vpc_id  = &quot;${module.vpc.vpc_id}&quot;
  subnets = &quot;${module.vpc.public_subnets}&quot;

  cluster_id            = &quot;${module.ecs-cluster.cluster_id}&quot;
  ecs_service_role_name = &quot;${module.ecs-cluster.ecs_service_role_name}&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now plan and apply your changes, Terraform will inform you that a few resources will be destroyed (the removed services) and a few will be added.&lt;/p&gt;

&lt;h3 id=&quot;clean-up&quot;&gt;Clean up&lt;/h3&gt;
&lt;p&gt;Once done you can easily clean-up all created resources in AWS, just run &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform destroy&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;serverless-containers&quot;&gt;Serverless containers.&lt;/h3&gt;
&lt;p&gt;Since a few months Amazon support running containers without managing your
ec2 instances, aka Serverless Containers. This services is called Fargate. I
have written a &lt;a href=&quot;https://040code.github.io/2018/01/30/fargate_with_terraform/&quot;&gt;blog
post&lt;/a&gt; about
how to run you containers serveless with terraform. Creating a mix of both
ways of running of containers is explained as well. Be aware that Fargate is
still only avaialable in &lt;code class=&quot;highlighter-rouge&quot;&gt;us-east-1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Niek&quot;, &quot;last_name&quot;=&gt;&quot;Palm&quot;, &quot;github&quot;=&gt;&quot;npalm&quot;, &quot;twitter&quot;=&gt;&quot;niekos77&quot;, &quot;linkedin&quot;=&gt;&quot;niekpalm&quot;, &quot;permalink&quot;=&gt;&quot;/author/niek/&quot;, &quot;header-img&quot;=&gt;&quot;img/noodle_niek.jpg&quot;, &quot;avatar&quot;=&gt;&quot;niek.jpg&quot;, &quot;email&quot;=&gt;&quot;dev.npalm@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;I am developing for more than a decade software, mainly based on open source stacks. Currently I am having a full stack focus with my strengths on the backend related services, cloud and continuous delivery. Technologies that me keep busy now a days are: AWS, Terraform, Spring Cloud, React, React Native, Continuous Deliver, Docker, Elastic Search and much more. \n\n But cool technologies are not my only passions. I love to just crab by backpack and go around. Creating some nice meals and exploring the creative area of a cook is one of my favourite hobbies. Drinking a great craft beer is something that I love too. And from time to time the body needs some real exercise so I like to have a run or do a hike.&quot;}</name><email>dev.npalm@gmail.com</email></author><category term="terraform" /><category term="aws" /><category term="docker" /><category term="microservices" /><summary type="html">The Docker slogan ‘Build, Ship, and Run’ advertises easy set up of immutable software builds, but it is not always that easy. Setting up immutable builds with Docker is pretty straight forward and shipping is just a matter of pushing the image to a repository. The next step is building the cloud infrastructure to run the containers. In the talk at the Cloud Native Meetup in Taipei I have shown how to create an immutable infrastructure on AWS with Terraform. The example belows shows how you can run your micro services in docker containers on AWS.</summary></entry></feed>