<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.0">Jekyll</generator><link href="https://040code.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://040code.github.io//" rel="alternate" type="text/html" /><updated>2017-10-19T11:30:39+00:00</updated><id>https://040code.github.io//</id><title type="html">040 Code</title><subtitle>A developers blog</subtitle><entry><title type="html">MicroHack Zappa.io</title><link href="https://040code.github.io//2017/10/01/micro-hack-zappa-io/" rel="alternate" type="text/html" title="MicroHack Zappa.io" /><published>2017-10-01T00:00:00+00:00</published><updated>2017-10-01T00:00:00+00:00</updated><id>https://040code.github.io//2017/10/01/micro-hack-zappa-io</id><content type="html" xml:base="https://040code.github.io//2017/10/01/micro-hack-zappa-io/">&lt;h1 id=&quot;microhack---python-serverless-with-zappaio&quot;&gt;MicroHack - Python serverless with Zappa.io&lt;/h1&gt;

&lt;h2 id=&quot;the-context&quot;&gt;The context&lt;/h2&gt;

&lt;p&gt;I’ve visited one of the best conferences last september, Full Stack Fest in Barcelona. Since then, two talks are constantly in the back of my mind.&lt;/p&gt;

&lt;p&gt;The first one is the talk by Ben Foxall (&lt;a href=&quot;https://twitter.com/benjaminbenben&quot;&gt;@benjaminbenben&lt;/a&gt;). He talked about Microhacks and how to become better in your experiments by constraining them. Write small reports / blogs of your Microhacks to so you have a nice overview of some of the experiments you’ve done. Guess what this blog is about..&lt;/p&gt;

&lt;p&gt;The second talk I’m frequently think of was the talk by Rich Jones (&lt;a href=&quot;https://twitter.com/GUNdotIO&quot;&gt;@GUNdotIO&lt;/a&gt;) titled “Gone in 60 milliseconds: Offensive security in the serverless age”. A DDoS attack of slides, 452 in total. The talk main focus was about security and how you can hack the AWS infrastructure if things are not setup correctly. He knows his ways in AWS. That’s comes very handy if you want to build a cli which helps other people to run serverless python apps in the cloud. And this is exactly what he’s been doing with &lt;a href=&quot;https://www.zappa.io&quot;&gt;https://www.zappa.io&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;whats-the-experiment&quot;&gt;What’s the experiment&lt;/h2&gt;

&lt;p&gt;I wanted to test the cli zappa.io with a simple python Flask app. The specs are simple: A service which reverses an input string running in the cloud with zappa.io. Serverless services are very interesting, because it’s based on lambdas and they typically run for a few milliseconds. So the costs are very low, utilization is very high.
I’ve asked some colleagues to join me on a friday afternoon experiment and &lt;a href=&quot;https://github.com/13B-MSP&quot;&gt;Jos Beijk&lt;/a&gt; wanted to help.&lt;/p&gt;

&lt;h2 id=&quot;lets-do-it&quot;&gt;Let’s do it!&lt;/h2&gt;

&lt;p&gt;We need &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;, a package manager (&lt;a href=&quot;https://pip.pypa.io&quot;&gt;pip&lt;/a&gt;) and a tool to create isolated Python environments (&lt;a href=&quot;https://virtualenv.pypa.io&quot;&gt;Virtualenv&lt;/a&gt;).
Store your AWS secrets in your &lt;code class=&quot;highlighter-rouge&quot;&gt;.aws&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;If you do not have an AWS account, don’t worry. Just signup and the first 1.000.000 requests per month are for free. &lt;a href=&quot;https://aws.amazon.com/lambda/pricing/&quot;&gt;https://aws.amazon.com/lambda/pricing&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-experiment&quot;&gt;The experiment&lt;/h2&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/139025.js&quot; id=&quot;asciicast-139025&quot; async=&quot;&quot; data-speed=&quot;2&quot;&gt;&lt;/script&gt;

&lt;p&gt;GitHub: &lt;a href=&quot;https://github.com/JeroenKnoops/zappa-string-reverser&quot;&gt;https://github.com/JeroenKnoops/zappa-string-reverser&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-just-happened&quot;&gt;What just happened?&lt;/h2&gt;

&lt;h3 id=&quot;the-service&quot;&gt;The service&lt;/h3&gt;
&lt;p&gt;Create a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;Flask&lt;/code&gt; service which reverses an input string.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/&amp;lt;string:str&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reverse_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;required-libraries&quot;&gt;Required libraries&lt;/h3&gt;
&lt;p&gt;Add required libraries Flask and Zappa in &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; so pip can install it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Flask&amp;gt;=0.12
zappa&amp;gt;=0.17.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;install-required-libraries-in-virtual-environment&quot;&gt;Install required libraries in virtual environment&lt;/h3&gt;
&lt;p&gt;Create a virtaul environment and activate it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;virtualenv venv
source venv/bin/activate.fish
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; you can use: &lt;code class=&quot;highlighter-rouge&quot;&gt;source venv/bin/activate&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;setup-zappa-and-deploy-the-service&quot;&gt;Setup Zappa and deploy the service&lt;/h3&gt;
&lt;p&gt;Setup Zappa:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;zappa init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you finish initialization, you’ll have a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;zappa_settings.json&lt;/code&gt; in your project directory defining your basic deployment settings.&lt;/p&gt;

&lt;p&gt;Edit this file to add more service specific configurations:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app_function&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string_reverser.app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;keep_warm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;log_level&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aws_region&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eu-west-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;profile_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http_methods&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;parameter_depth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;timeout_seconds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;memory_size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;use_precompiled_packages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3_bucket&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zappa-&amp;lt;unique-thingy-goes-here&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Deploy the app:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zappa deploy dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output is the url to our service. You see it’s https out-of-the-box.. :)&lt;/p&gt;

&lt;h3 id=&quot;test-our-service&quot;&gt;Test our service&lt;/h3&gt;
&lt;p&gt;The previous step will output an url to our service. In my case: https://z9cxt9gky6.execute-api.eu-west-1.amazonaws.com/dev/&lt;/p&gt;

&lt;p&gt;Append the test string behind it and check the result.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;curl https://z9cxt9gky6.execute-api.eu-west-1.amazonaws.com/dev/thisisateststring
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wiehoe! We got: &lt;code class=&quot;highlighter-rouge&quot;&gt;gnirtstsetasisiht&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;update-the-service&quot;&gt;Update the service&lt;/h3&gt;
&lt;p&gt;When you want to apply some changes, you can deploy it by running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zappa update dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you add other libraries, make sure you add it in &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; and install it locally in your virtual environment. All the packages in this folder will be shipped.&lt;/p&gt;

&lt;h3 id=&quot;debugging&quot;&gt;Debugging&lt;/h3&gt;
&lt;p&gt;You can do various things with the zappa cli.&lt;/p&gt;

&lt;p&gt;You can view logging for example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zappa tail dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See help for more info:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zappa --help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Feel free to check the created services in AWS console. You will see API gateway, CloudWatch and Lambdas.&lt;/p&gt;

&lt;h3 id=&quot;cleanup&quot;&gt;Cleanup&lt;/h3&gt;
&lt;p&gt;Remove the infrastructure by simply undeploy the environment:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zappa undeploy dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Ofcourse this example has no real value, but I wanted to see how it works.
I think zappa.io is very good in its default values, but is extremely flexible.
You don’t like the JSON format and prefer YAML or TOML? no problem. Want to run it in a VPC, no problem. Don’t like the Keeping The Server Warm settings, you can change it.
Look at &lt;a href=&quot;https://github.com/Miserlou/Zappa&quot;&gt;https://github.com/Miserlou/Zappa&lt;/a&gt; for the complete list of options. There’s good community support with a slack channel, so I would encourage you to look at this project. Especially because you have a lot of good defaults in this setup and this guy knows a few things about AWS.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Full Stack Fest - frontend: &lt;a href=&quot;https://040code.github.io/2017/09/08/fsf-fontend/&quot;&gt;https://040code.github.io/2017/09/08/fsf-fontend/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Full Stack Fest - backend: &lt;a href=&quot;https://040code.github.io/2017/09/05/fsf-backend/&quot;&gt;https://040code.github.io/2017/09/05/fsf-backend/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zappa.io&quot;&gt;https://www.zappa.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Miserlou/Zappa&quot;&gt;https://github.com/Miserlou/Zappa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jeroen&quot;, &quot;last_name&quot;=&gt;&quot;Knoops&quot;, &quot;github&quot;=&gt;&quot;JeroenKnoops&quot;, &quot;twitter&quot;=&gt;&quot;johnnybusca&quot;, &quot;linkedin&quot;=&gt;&quot;jeroenknoops&quot;, &quot;permalink&quot;=&gt;&quot;/author/jeroen/&quot;, &quot;header-img&quot;=&gt;&quot;img/vanmoll.jpg&quot;, &quot;avatar&quot;=&gt;&quot;jeroen.png&quot;, &quot;email&quot;=&gt;&quot;jeroen.knoops@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;Jeroen Knoops is a full stack developer. He has worked in corporate environments for many years. He also had the pleasure to work for a small tech startup. All of his work is driven by innovation.\n\n Some keywords: Akai MPC, Urfaust, Richard Dawkins, Zed Shaw, TB-303, Erik Satie, Kapsalon, The Apemen, Piano, Hans Rosling, Haus Arafna, Apple ][, BRNS, Ravi Shankar, Lego geen playmobil, TR-909, Netflix, Tuscany, Kraftwerk, Quadrupel, Frikandel Speciaal, avdi, Moonlizards, Sandi Metz, Pixies, Strijp, Henrik Kniberg, Hazes, Public Enemy, Tesla, Funkmaster Flex, Hakan Forss, Bruce Willis, GitHub, Tony Touch, Hef, Mobb Deep, Funkdoobiest, good food, Noah's ark, Turing, Sugababes, VPRO's DutchMasters, Drums, Jet Li, Craft Beers, Synths, Bowling, La Musica della Mafia, UDS, Unsequenced, Christopher Hitchens, Slapshot en David Anderson.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-09-06-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-08-fsf-fontend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-10-01-micro-hack-zappa-io.md collection=posts&gt;]}</name><email>jeroen.knoops@gmail.com</email></author><category term="serverless" /><category term="microhack" /><category term="python" /><category term="aws" /><category term="cloud" /><summary type="html">MicroHack - Python serverless with Zappa.io</summary></entry><entry><title type="html">Immutable Infrastructure</title><link href="https://040code.github.io//2017/09/19/talk-immutable-infrastructure/" rel="alternate" type="text/html" title="Immutable Infrastructure" /><published>2017-09-19T00:00:00+00:00</published><updated>2017-09-19T00:00:00+00:00</updated><id>https://040code.github.io//2017/09/19/talk-immutable-infrastructure</id><content type="html" xml:base="https://040code.github.io//2017/09/19/talk-immutable-infrastructure/">&lt;p&gt;The Docker slogan ‘Build, Ship, and Run’ advertises easy set up of immutable software builds, but it is not always that easy. Setting up immutable builds with Docker is pretty straight forward and shipping is just a matter of pushing the image to a repository. The next step is building the cloud infrastructure to run the containers. &lt;a href=&quot;https://www.devopsdays.org/events/2017-riga/program/niek-palm/&quot;&gt;In the talk at the DevOps Days in Riga&lt;/a&gt; I have shown how to create an immutable infrastructure on AWS with Terraform. The example belows shows how you can run your micro services in docker containers on AWS.&lt;/p&gt;

&lt;p&gt;In this talk I briefly touch upon building immutable software. But the main focus of the talk will be on creating an immutable infrastructure. In this talk I will show you how to create an immutable infrastructure on AWS with Terraform. I will use a real world example to explain and show live how easy you can get micro services live on AWS and continuously apply changes to the same cloud environment..&lt;/p&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;
&lt;p&gt;Below the slides that I used for the talk, the slides are available as well on &lt;a href=&quot;https://immutable-infrastructure.gitlab.io/dodr-2017/&quot;&gt;GitLab&lt;/a&gt;. You can easy navigate through the slides with the spacebar.&lt;/p&gt;

&lt;div style=&quot;position:relative; width:100%; height:0px; padding-bottom:56.25%;&quot;&gt;
    &lt;iframe style=&quot;position:absolute; left:0; top:0; width:100%; height:100%&quot; src=&quot;https://immutable-infrastructure.gitlab.io/dodr-2017/&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;To get started with Terraform the best starting points are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.terraform.io/intro/examples/&quot;&gt;Terraform.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/npalm/tf-helloworld-demo&quot;&gt;Hello World example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;h3 id=&quot;hello-world&quot;&gt;Hello World&lt;/h3&gt;
&lt;p&gt;During the talk, I demonstrated a hello world example, see the link above. This examples shows some basics of terraform by creating a ec2 instance and security group to server a simple web application. The example only works in the AWS region &lt;code class=&quot;highlighter-rouge&quot;&gt;eu-west-1&lt;/code&gt; since the AMI used is only available in this region.&lt;/p&gt;

&lt;h3 id=&quot;ecs-demo&quot;&gt;ECS demo&lt;/h3&gt;
&lt;p&gt;The second example I have shown, is creating an immutable infrastructure to server docker containers. The picture below descibes briefly the enviroment that will be cretaed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/20170919-immutable-infra/ecs-black.png&quot; alt=&quot;ecs-diagram&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The example also creates log groups in cloudwatch to capture the logging of the ecs agent and the running containers (services).&lt;/p&gt;

&lt;h4 id=&quot;setup&quot;&gt;Setup&lt;/h4&gt;
&lt;p&gt;Before you can start, you need an AWS account with sufficient rights (admin), and you should create a &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; to be able to access your account programmatically.&lt;/p&gt;

&lt;p&gt;Clone the repository containing the ECS &lt;a href=&quot;https://github.com/npalm/tf-ecs-demo.git&quot;&gt;sample&lt;/a&gt; terraform code. To create the infrastructure step-by-step you can check out the tags &lt;code class=&quot;highlighter-rouge&quot;&gt;vpc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ecs&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/npalm/tf-ecs-demo.git
git checkout vpc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You should also have Terraform installed (&lt;code class=&quot;highlighter-rouge&quot;&gt;home brew install terraform&lt;/code&gt;) or use a docker container to run the terraform commands, for example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it --env-file &amp;lt;AWS_KEYS_FILE&amp;gt; -v $(pwd):/data -w /data \
  hashicorp/terraform:0.10.4 &amp;lt;terraform command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;create-network-layers-vpc&quot;&gt;Create network layers (VPC)&lt;/h4&gt;
&lt;p&gt;In the next steps we will create the network layers.&lt;/p&gt;

&lt;p&gt;First, we initialize and plan our changes.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;terraform init
terraform plan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Terraform should print on the console that 19 needs to be added and 0 to change or destroyed. Next we apply the change be executing &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;add-ecs-cluster&quot;&gt;Add ECS cluster&lt;/h4&gt;
&lt;p&gt;Now we have the network layer created, we will add the ECS cluster. By default the bastion host is disabled, the bastion can be enabled by updating the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;enable_bastion&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform.tfvars&lt;/code&gt; file. Time to plan and apply the new resources for ECS.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout ecs
terraform plan
terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once terraform is ready it will print the url of two applications on the console. One application, is a simple micro service that just prints the AWS availabilty zone where it is running, the other is a &lt;a href=&quot;/2017/05/20/nextbuild-graphql/&quot;&gt;graphql micro service&lt;/a&gt;. It will take a few minutes before the services are available.&lt;/p&gt;

&lt;h4 id=&quot;adding-your-own-service&quot;&gt;Adding your own service.&lt;/h4&gt;
&lt;p&gt;Time to have some more fun. Edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;main.tf&lt;/code&gt; and start making changes. Remove all the services, add your own service. By default for each service an application load balancer (ALB) is created. Add for each services that you want to deploy a configuration as below and update the variables as required.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module &quot;your-service&quot; {
  source = &quot;ecs-service&quot;

  service_name   = &quot;&amp;lt;service-name&amp;gt;&quot;
  image_url      = &quot;&amp;lt;docker-image&amp;gt;&quot;
  container_port = &amp;lt;port in the container where the service is listening&amp;gt;
  desired_count  = &amp;lt;number of instances&amp;gt;

  aws_region  = &quot;${var.aws_region}&quot;
  environment = &quot;${var.environment}&quot;

  vpc_id  = &quot;${module.vpc.vpc_id}&quot;
  subnets = &quot;${module.vpc.public_subnets}&quot;

  cluster_id            = &quot;${module.ecs-cluster.cluster_id}&quot;
  ecs_service_role_name = &quot;${module.ecs-cluster.ecs_service_role_name}&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now plan and apply your changes, Terraform will inform you that a few resources will be destroyed (the removed services) and a few will be added.&lt;/p&gt;

&lt;h3 id=&quot;clean-up&quot;&gt;Clean up&lt;/h3&gt;
&lt;p&gt;Once done you can easily clean-up all created resources in AWS, just run &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform destroy&lt;/code&gt;.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Niek&quot;, &quot;last_name&quot;=&gt;&quot;Palm&quot;, &quot;github&quot;=&gt;&quot;npalm&quot;, &quot;twitter&quot;=&gt;&quot;niekos77&quot;, &quot;linkedin&quot;=&gt;&quot;niekpalm&quot;, &quot;permalink&quot;=&gt;&quot;/author/niek/&quot;, &quot;header-img&quot;=&gt;&quot;img/about.jpg&quot;, &quot;avatar&quot;=&gt;&quot;niek.jpg&quot;, &quot;email&quot;=&gt;&quot;dev.npalm@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;I am developing for more than a decade software, mainly based on open source stacks. Currently I am having a full stack focus with my strengths on the backend related services, cloud and continuous delivery. Technologies that me keep busy now a days are: AWS, Terraform, Spring Cloud, React, React Native, Continuous Deliver, Docker, Elastic Search and much more. \n\n But cool technologies are not my only passions. I love to just crab by backpack and go around. Creating some nice meals and exploring the creative area of a cook is one of my favourite hobbies. Drinking a great craft beer is something that I love too. And from time to time the body needs some real exercise so I like to have a run or do a hike.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-04-20-discovery-agent.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-04-21-gitlab-perodic-build.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-07-docker-multi-stage-builds.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-20-nextbuild-graphql.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-06-18-terraform-aws-vpc.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-06-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-08-fsf-fontend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-19-talk-immutable-infrastructure.md collection=posts&gt;]}</name><email>dev.npalm@gmail.com</email></author><category term="terraform" /><category term="aws" /><category term="docker" /><category term="microservices" /><summary type="html">The Docker slogan ‘Build, Ship, and Run’ advertises easy set up of immutable software builds, but it is not always that easy. Setting up immutable builds with Docker is pretty straight forward and shipping is just a matter of pushing the image to a repository. The next step is building the cloud infrastructure to run the containers. In the talk at the DevOps Days in Riga I have shown how to create an immutable infrastructure on AWS with Terraform. The example belows shows how you can run your micro services in docker containers on AWS.</summary></entry><entry><title type="html">Full Stack Fest 2017</title><link href="https://040code.github.io//2017/09/08/fsf-fontend/" rel="alternate" type="text/html" title="Full Stack Fest 2017" /><published>2017-09-08T00:00:00+00:00</published><updated>2017-09-08T00:00:00+00:00</updated><id>https://040code.github.io//2017/09/08/fsf-fontend</id><content type="html" xml:base="https://040code.github.io//2017/09/08/fsf-fontend/">&lt;h1 id=&quot;full-stack-fest-2017&quot;&gt;Full Stack Fest 2017&lt;/h1&gt;

&lt;p&gt;This week we (Jeroen and Niek) enjoyining &lt;a href=&quot;https://2017.fullstackfest.com/&quot;&gt;Full Stack Fest 2017 Barcelona&lt;/a&gt;,
a week-long full stack development conference with a focus on solving current problems with new &amp;amp; inspiring perspectives.&lt;/p&gt;

&lt;p&gt;In this quite short blog we just summarizing briefly the talks and &lt;strong&gt;our opinion&lt;/strong&gt; about the talks. We have rated all talks, the rating is subjective ass well.&lt;/p&gt;

&lt;p&gt;The last days are more frontend focussed read &lt;a href=&quot;https://040code.github.io/2017/09/05/fsf-backend/&quot;&gt;here&lt;/a&gt; more about the backend days.&lt;/p&gt;

&lt;h2 id=&quot;day-four&quot;&gt;Day four&lt;/h2&gt;

&lt;h3 id=&quot;keynote&quot;&gt;Keynote&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Jenn Schiffer (&lt;a href=&quot;https://twitter.com/jennschiffer&quot;&gt;@jennschiffer&lt;/a&gt;) showed how to make coding actually friendly with &lt;a href=&quot;https://glitch.com/&quot;&gt;glitch&lt;/a&gt;. And remember once you got bored you will not trying new cool stuff which makes you even unhappier and so on… And some cool &lt;a href=&quot;http://jennmoney.biz/&quot;&gt;pixel art&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;once-you-go-prpl&quot;&gt;Once you go PRPL…&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Service Workers by Houssein Djireden (&lt;a href=&quot;https://twitter.com/hdjirdeh&quot;&gt;@hdjirdeh&lt;/a&gt;) are stable and most serious browsers support them. SWs are a big help in improving the experience for the user. &lt;code class=&quot;highlighter-rouge&quot;&gt;Workbox-cli&lt;/code&gt; is a great for configuring your app to cache usefull stuff only. Don’t cache too much. &lt;code class=&quot;highlighter-rouge&quot;&gt;FoamTree&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-bundle-analytics&lt;/code&gt; show a good overview what to cache. Split up your js, with http/2, we do not need one big js file. React has good SW support.&lt;/p&gt;

&lt;h3 id=&quot;magic-tricks-with-css-houdini&quot;&gt;Magic tricks with css houdini&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Absolutely awesome to see the future already working in this talk by Sam Richard (&lt;a href=&quot;https://twitter.com/Snugug&quot;&gt;@Snugug&lt;/a&gt;). A lot of visual stuff is currently blocking the main JS thread. With Houdini CSS a lot of css stuff can be handle on Worklets. ‘Much like Service Workers are a low-level JavaScript API for the browser’s cache Houdini introduces low-level JavaScript APIs for the browser’s render engine’. Currently only available in Chrome Canary and the definition of unstable, but ooooh so beautiful, &lt;a href=&quot;https://snugug.github.io/magic-tricks-with-houdini/#/0/0&quot;&gt;slides in canary&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;master-the-art-of-the-ast-and-take-control-of-your-js&quot;&gt;Master the art of the ast (and take control of your js)&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Talk by Sears israel (&lt;a href=&quot;https://twitter.com/cowchimp&quot;&gt;@cowchimp&lt;/a&gt;) to understand most JS libraries you only need to know two things. AST and the visitor pattern. With this knowledge you can easily add ESLint, create Babel plugins or add jscodeshift refactor modules. A great tool to help with AST is https://astexplorer.net&lt;/p&gt;

&lt;h3 id=&quot;svg-can-do-that&quot;&gt;SVG can do that?!&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Awesome what you can do with SVG by Sarah Drasner (&lt;a href=&quot;https://twitter.com/sarah_edo&quot;&gt;@sarah_edo&lt;/a&gt;). This girl really knows her stuff. SVG is supported by all browsers including Opera Mini! Good integration with VueJS, react and other modern frameworks is possible. Lots of examples of really beautiful animations all working for all types of devices. Size does matter for images and animations. Normally it will result in ugly things, but with SVG this is absolutely not the case, &lt;a href=&quot;http://slides.com/sdrasner/svg-can-do-that#/&quot;&gt;slides&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;using-react-native--clojurescript-to-launch-iosandroid-apps-to-1m-users&quot;&gt;Using react native + clojurescript to launch ios/android apps to 1m users&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star:&lt;/p&gt;

&lt;p&gt;A long intro to &lt;code class=&quot;highlighter-rouge&quot;&gt;react native&lt;/code&gt;, which is most likely not necessary on this conference. A nice twist with &lt;code class=&quot;highlighter-rouge&quot;&gt;clojureScript&lt;/code&gt;. The code looks very clean. It is possible to create apps for both iOS and Android with a 99% simular codebase. The crashlogs of apps created with clojurescript and reactnative are unfortunately almost not readible. This set of tools is also great to use in combination with &lt;code class=&quot;highlighter-rouge&quot;&gt;codepush&lt;/code&gt;. Now we can update the app on the fly without bothering appstores. Talk by Emin Hasanov (&lt;a href=&quot;https://twitter.com/hasanove&quot;&gt;@hasanove&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;blasting-react-into-space-building-fluid-beautiful-interfaces-with-react-and-webgl-and-other-exotic-explorations&quot;&gt;Blasting react into space: building fluid, beautiful interfaces with react and webgl (and other exotic explorations)&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;A good talk by Chad Ostrowski (&lt;a href=&quot;https://twitter.com/chadoh&quot;&gt;@chadoh&lt;/a&gt;), on how all the new technologies can help us in the future when live is possible on Mars. Using: &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP/2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceWorkers&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LocalStorage&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Bittorent + git&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;IPFS&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;blockchain&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bitcoin&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ethereum&lt;/code&gt;. “Tomorrow’s problems === Today’s problems but bigger.” Last year a simular talk was told on FSF, but it’s good to see that the technologies mentioned then are now in a much further state. Great talk and good choice from the organiser of this beautiful conference.&lt;/p&gt;

&lt;div style=&quot;position:relative; width:100%; height:0px; padding-bottom:56.25%;&quot;&gt;
    &lt;iframe style=&quot;position:absolute; left:0; top:0; width:100%; height:100%&quot; src=&quot;https://chadoh.github.io/online-offline-equivalence/&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;day-five&quot;&gt;Day five&lt;/h2&gt;

&lt;h3 id=&quot;bringing-back-the-1990s-the-revenge-of-javascript-stylesheets&quot;&gt;Bringing back the 1990s: The revenge of javascript stylesheets&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Steve Kinney (&lt;a href=&quot;https://twitter.com/stevekinney&quot;&gt;@stevekinney&lt;/a&gt;) did a lot of work in getting the Javascript Stylesheets, a technology only working in 1996 in Netscape 4) to work in 2017. In the beginning of the internet, people were debating about the split of concern regarding content and layout. One of the proposals was Javascript Stylesheets. Netscape 4 was the only browser capable of this feature. Steve showed us how we can do some really neat stuff in 1996 technology. A lot of this, we now take for granted, but we have to keep in mind that this was 1996. A lot of simularities with SASS, LESS, but also REACT like structures with the &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript_for_XML&quot;&gt;ECMA E4X for XML proposal&lt;/a&gt;. Conclusion: We still can learn from the past. Although some good initiatives take 20 years to become meanstream.&lt;/p&gt;

&lt;h3 id=&quot;rendering-performance-from-the-ground-up&quot;&gt;Rendering performance from the ground up&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Good presentation about how we can improve the performance a lot by using the GPU instead of CPU. A good explaination what the differences are between a CPU and GPU. Try to use translate and shaders because they don’t require repaintings. Thanks Martin Splitt (&lt;a href=&quot;https://twitter.com/g33konaut&quot;&gt;@g33konaut&lt;/a&gt;)!, &lt;a href=&quot;https://t.co/oFDjyf5Bb6&quot;&gt;slides&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;web-based-virtual-reality&quot;&gt;Web based virtual reality&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Shagufta Gurmukhdas (&lt;a href=&quot;https://twitter.com/shaguftamethwan&quot;&gt;@shaguftamethwan&lt;/a&gt;) give a good talk ok the Web based virtual reality. Starting WebVR with WebGL is very hard. She showed us &lt;a href=&quot;https://aframe.io&quot;&gt;A-Frame&lt;/a&gt;. A-Frame was already mentioned three times in FSF, so we were already very curious about it. You can easily start your own VR world with this framework. It uses GPU under the hood and you can use one of your favourite webframeworks (vueJS, React, and so on) to change properties of the 3D models. Very impressive. With this tool, even the most suburn backenders, (we) can start with VR.&lt;/p&gt;

&lt;h3 id=&quot;exploring-the-world-of-decentralized-networks-with-webrtc&quot;&gt;Exploring the world of decentralized networks with webRTC&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star:&lt;/p&gt;

&lt;p&gt;Nikita Baksalyar (&lt;a href=&quot;https://twitter.com/nbaksalyar&quot;&gt;@nbaksalyar&lt;/a&gt;) started his talk with some technical issues, but he recovered quickly from that. Nikita tought us about how the internet can truly be implemented the way it was supposed to be implemented. Decentralised! Now-a-days we’re using a lot of things which are ment to be decentralised in a centralised way. Git and the internet are a nice examples of that. Serving the web, securely and encrypted, with webRTC through all client devices will make it imposible to censor the internet by governments. During the Q&amp;amp;A a question come up on what to do with unwanted content. The response of Nikita was amazing. We should educate people that they don’t want to see unwanted content instead of putting the responsibility of this on technology, &lt;a href=&quot;https://gist.github.com/nbaksalyar/cfee2bdac7cd0f66e0a91af9621ab264&quot;&gt;resources&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;developing-for-the-next-billion&quot;&gt;Developing for the next billion&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Look to your target group. Keep in mind that your apps might not be used by the people you’ve targetted on. Natalie Pispistunovich (&lt;a href=&quot;https://twitter.com/nataliepis&quot;&gt;@nataliepis&lt;/a&gt;) showed some examples from Kenya. What apps are used and why. The delivery of apps can be very different from ours. The way payments are done also.
Nice reference to &lt;a href=&quot;https://www.youtube.com/watch?v=hjzRbgxZXz8&quot;&gt;Fun with Flags&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;progressive-web-apps-and-the-internet-of-things&quot;&gt;Progressive web apps and the internet of things&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star:&lt;/p&gt;

&lt;p&gt;A story of with amongst other libraries, the &lt;code class=&quot;highlighter-rouge&quot;&gt;johnny-five&lt;/code&gt; library. Today it’s easy to communicate with all kind of device with &lt;code class=&quot;highlighter-rouge&quot;&gt;nodeJS&lt;/code&gt;. Well done, Luis Montes (&lt;a href=&quot;https://twitter.com/monteslu&quot;&gt;@monteslu&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;lightning-talks&quot;&gt;Lightning talks&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;PAKO a zlib for uploads in js. For uploading large files. :) NICE. @bombasarkadian&lt;/li&gt;
  &lt;li&gt;DevTools in Firefox: Alex Lakatos @lakatos88;  BASIC&lt;/li&gt;
  &lt;li&gt;Internet for Everyone. Tom Enden en Liran Kurtz. Accessible. GOOD&lt;/li&gt;
  &lt;li&gt;Marek - ProRouter.js - Router.maniak.pro - No idea what this is all about.&lt;/li&gt;
  &lt;li&gt;Kirill Pimenov - Rust! Go write to Rust and go back to your own language and you will be beter. Awesome!&lt;/li&gt;
  &lt;li&gt;Raj - iOS Event Communication without internet, API and no loss of data. Way to fast. OMG… Peer to Peer connectivity with iPhone through Bonjour protocol&lt;/li&gt;
  &lt;li&gt;Paulo -  Functional Programming: Elixir and Phoenix. I love Phoenix! See also &lt;a href=&quot;https://paulodiniz.github.io/flappy-bird&quot;&gt;git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;FSF designer. Uses emoiji as classes. Awesome way of keeping the names short and compact. Really high quality frontend work. See &lt;a href=&quot;http://2017.fullstackfest.com&quot;&gt;Full Stack Fest web page&lt;/a&gt; and Inspect the code!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;making-a-lot-of-things&quot;&gt;Making a lot of things&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Ben Foxall (&lt;a href=&quot;https://twitter.com/benjaminbenben&quot;&gt;@benjaminbenben&lt;/a&gt;) gave us two talks for the price of one!
&lt;a href=&quot;https://cojs.co&quot;&gt;https://cojs.co&lt;/a&gt; is collaborate platform were people can co-create software. With blocks you can split the code. Adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt; behind the url will fork the code. Other users can continue on the code in their own context, but with shared code. Awesome. The second part was about Microhacks. He explained how you should constrain your experiments to make them work. Plan your goal, not your work. Start it and finish it.&lt;/p&gt;

&lt;h2 id=&quot;awesome&quot;&gt;Awesome!!!&lt;/h2&gt;
&lt;p&gt;Many thanks to &lt;a href=&quot;https://www.codegram.com/&quot;&gt;Codegram&lt;/a&gt; the company that organized once again the best conference!&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jeroen&quot;, &quot;last_name&quot;=&gt;&quot;Knoops&quot;, &quot;github&quot;=&gt;&quot;JeroenKnoops&quot;, &quot;twitter&quot;=&gt;&quot;johnnybusca&quot;, &quot;linkedin&quot;=&gt;&quot;jeroenknoops&quot;, &quot;permalink&quot;=&gt;&quot;/author/jeroen/&quot;, &quot;header-img&quot;=&gt;&quot;img/vanmoll.jpg&quot;, &quot;avatar&quot;=&gt;&quot;jeroen.png&quot;, &quot;email&quot;=&gt;&quot;jeroen.knoops@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;Jeroen Knoops is a full stack developer. He has worked in corporate environments for many years. He also had the pleasure to work for a small tech startup. All of his work is driven by innovation.\n\n Some keywords: Akai MPC, Urfaust, Richard Dawkins, Zed Shaw, TB-303, Erik Satie, Kapsalon, The Apemen, Piano, Hans Rosling, Haus Arafna, Apple ][, BRNS, Ravi Shankar, Lego geen playmobil, TR-909, Netflix, Tuscany, Kraftwerk, Quadrupel, Frikandel Speciaal, avdi, Moonlizards, Sandi Metz, Pixies, Strijp, Henrik Kniberg, Hazes, Public Enemy, Tesla, Funkmaster Flex, Hakan Forss, Bruce Willis, GitHub, Tony Touch, Hef, Mobb Deep, Funkdoobiest, good food, Noah's ark, Turing, Sugababes, VPRO's DutchMasters, Drums, Jet Li, Craft Beers, Synths, Bowling, La Musica della Mafia, UDS, Unsequenced, Christopher Hitchens, Slapshot en David Anderson.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-09-06-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-08-fsf-fontend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-10-01-micro-hack-zappa-io.md collection=posts&gt;]}</name><email>jeroen.knoops@gmail.com</email></author><category term="aframe" /><category term="serviceworkers" /><category term="css" /><category term="javascript" /><category term="ast" /><category term="svg" /><category term="blockchain" /><category term="react" /><summary type="html">Full Stack Fest 2017</summary></entry><entry><title type="html">Full Stack Fest 2017</title><link href="https://040code.github.io//2017/09/05/fsf-backend/" rel="alternate" type="text/html" title="Full Stack Fest 2017" /><published>2017-09-05T00:00:00+00:00</published><updated>2017-09-05T00:00:00+00:00</updated><id>https://040code.github.io//2017/09/05/fsf-backend</id><content type="html" xml:base="https://040code.github.io//2017/09/05/fsf-backend/">&lt;h1 id=&quot;full-stack-fest-2017&quot;&gt;Full Stack Fest 2017&lt;/h1&gt;

&lt;p&gt;This week we (Jeroen and Niek) enjoyining &lt;a href=&quot;https://2017.fullstackfest.com/&quot;&gt;Full Stack Fest 2017 Barcelona&lt;/a&gt;,
a week-long full stack development conference with a focus on solving current problems with new &amp;amp; inspiring perspectives.&lt;/p&gt;

&lt;p&gt;In this quite short blog we just summarizing briefly the talks and &lt;strong&gt;our opinion&lt;/strong&gt; about the talks. We have rated all talks, the rating is subjective ass well.&lt;/p&gt;

&lt;p&gt;The first two days are more backend focussed, the last two days have a frontend focus, read more &lt;a href=&quot;https://040code.github.io/2017/09/08/fsf-fontend/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;day-one&quot;&gt;Day one&lt;/h2&gt;

&lt;h3 id=&quot;keynotes---science---backup-the-internet&quot;&gt;Keynotes - Science - Backup the internet&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Karissa McKelvey (&lt;a href=&quot;https://twitter.com/okdistribute&quot;&gt;@okdistribute&lt;/a&gt;) discussed the topic to share fairly large data sets in the science community in a secure and distributed way. The &lt;a href=&quot;https://docs.datproject.org/&quot;&gt;dat project&lt;/a&gt; enables file sharing via peer to peer for example with the beaker browser.&lt;/p&gt;

&lt;h3 id=&quot;ehtereum-aeternity-and-the-distributed-wonders&quot;&gt;Ehtereum, aeternity and the distributed wonders&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Luca Marchesini (&lt;a href=&quot;https://twitter.com/kuzzleio&quot;&gt;@kuzzleio&lt;/a&gt;) did a great job by explanining about blockchain and the differences between ethereum and bitcoin. Blockchain; the system where playing by the rules is more profitable than cheating.&lt;/p&gt;

&lt;h3 id=&quot;terraform-in-your-delivery-pipeline&quot;&gt;Terraform in your delivery pipeline&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star:&lt;/p&gt;

&lt;p&gt;We love the Terraform framework of HashiCorp but the talk not as good as we hoped, nothing new. The speaker Anton (&lt;a href=&quot;https://twitter.com/antonbabenko&quot;&gt;@antonbabenko&lt;/a&gt;) is an expert on the topic and also maintains some great &lt;a href=&quot;https://github.com/terraform-community-modules&quot;&gt;Terraform modules&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;migrating-an-existing-service-to-serverless&quot;&gt;Migrating an existing service to serverless&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star:&lt;/p&gt;

&lt;p&gt;For us a standard talk by Marcia (&lt;a href=&quot;https://twitter.com/mavi888uy&quot;&gt;@mavi888uy&lt;/a&gt;) about migrating an existing monolitic applicaton to smaller components. We loved all the (angry) birds flying around.&lt;/p&gt;

&lt;h3 id=&quot;defending-the-human-network&quot;&gt;Defending the human network&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Good story about cyber security by Dr. Jessica Barker (&lt;a href=&quot;https://twitter.com/drjessicabarker&quot;&gt;@drjessicabarker&lt;/a&gt;). About how the mood of a user is one of the weakest link. How you can trick people into clicking a bad links. Socially engineering and use stress full situation let a user execute an (maybe) unwanted action.&lt;/p&gt;

&lt;p&gt;Key take aways, learn to think as hacker and focus on the why not on how to enforce / restrict users to do something.&lt;/p&gt;

&lt;h3 id=&quot;rise-and-the-fall-of-the-full-stack-database&quot;&gt;Rise and the fall of the full stack database&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Comparison with the army knife. Don’t be afraid of new technologies.
One tool for everything is not going to work.
Example with analytics service, kafka stream, bus. Frank Lyaruu (&lt;a href=&quot;https://twitter.com/lyaruu&quot;&gt;@lyaruu&lt;/a&gt;) did a great job!&lt;/p&gt;

&lt;h3 id=&quot;how-bookingcom-serves-deep-learning-model-predictions&quot;&gt;How booking.com serves deep learning model predictions&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Good explaination by Sahil (&lt;a href=&quot;https://twitter.com/sahildua2305&quot;&gt;@sahildua2305&lt;/a&gt;) about how to train a model and how to deploy them.&lt;/p&gt;

&lt;h3 id=&quot;what-to-do-when-complex-systems-fail&quot;&gt;What to do when complex systems fail&lt;/h3&gt;
&lt;p&gt;Rating:&lt;/p&gt;

&lt;p&gt;Not relevant to our needs.&lt;/p&gt;

&lt;h2 id=&quot;day-two&quot;&gt;Day Two:&lt;/h2&gt;

&lt;h3 id=&quot;the-internet-of-things-an-army-of-devices-ready-for-ddos&quot;&gt;The internet of things: An army of devices ready for DDoS&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Good talk by John Graham-Cummin (&lt;a href=&quot;https://twitter.com/jgrahamc&quot;&gt;@jgrahamc&lt;/a&gt;) about how IoT device can be used to do a DDoS attack. About port 1900 showing all kinds of information which is sent to victims address. How to block DDoS attacks by putting the ip-address in a grid to search for patterns. Talked about Trump attacks and anonymous being stupid by setting the evil flag (We’re anonymous).&lt;/p&gt;

&lt;h3 id=&quot;how-to-properly-blame-things-for-causing-latency-an-introduction-to-distributed-tracing-and-zipkin&quot;&gt;How to properly blame things for causing latency: An introduction to distributed tracing and Zipkin&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star:&lt;/p&gt;

&lt;p&gt;Difference between logs, metric and trace. Good (known) story by Adrian Cole (&lt;a href=&quot;https://twitter.com/adrianfcole&quot;&gt;@adrianfcole&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;ship-more-sink-less-changing-chaos-engineering--distributed-tracing&quot;&gt;Ship more, sink less. Changing chaos engineering &amp;amp; Distributed tracing&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star:&lt;/p&gt;

&lt;p&gt;The story about testing in real live situations is not new, good te remember the importance to be prepared for failure. For not much new things in this talk since we here the chaos monkeys stories new for a couple of years. But we will plan our Chaos GameDay soon. Thanks to Aish (&lt;a href=&quot;https://twitter.com/aishrajdahal&quot;&gt;@aishrajdahal&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;flying-spaghetti-monster-verifying-protocols-with-types-and-finite-state-machines&quot;&gt;Flying Spaghetti monster: Verifying protocols with types and finite-state machines&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Complexity of systems cause a lot of problems. &lt;code class=&quot;highlighter-rouge&quot;&gt;Idris&lt;/code&gt; has a nice feature that Types are also values, so state changes can easialy be checked in compile time. &lt;code class=&quot;highlighter-rouge&quot;&gt;talk.applaud()&lt;/code&gt; should only run after &lt;code class=&quot;highlighter-rouge&quot;&gt;talk.give()&lt;/code&gt; and Idris has a way to check this easily during compile time.&lt;/p&gt;

&lt;p&gt;Inspiration for doing more with new languages. Chris Ford (&lt;a href=&quot;https://twitter.com/ctford&quot;&gt;@ctford&lt;/a&gt;), thanks!&lt;/p&gt;

&lt;h3 id=&quot;smart-grid-how-iot-fights-climate-change&quot;&gt;Smart grid: How iot fights climate change&lt;/h3&gt;
&lt;p&gt;Rating: :star:&lt;/p&gt;

&lt;p&gt;Kelsey Breseman (&lt;a href=&quot;https://twitter.com/ifoundtheme&quot;&gt;@ifoundtheme&lt;/a&gt;) explains us how complex the eletrical grids works which makes it hard as well to safe for example solar eneregy. It was great to hear the complecity of this relevant topic but unfortunately there was not much relation betwoon the world of of software.&lt;/p&gt;

&lt;h3 id=&quot;beyond-patterns-technological-systems-and-the-nature-of-order&quot;&gt;Beyond patterns: Technological systems and the nature of order&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Good to see the that our hipster shit is the same as the problems the manufacturing has already solved. Learn from that! Talk by Jerome Scheuring&lt;/p&gt;

&lt;h3 id=&quot;lighting-talks&quot;&gt;Lighting Talks&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;There where quite a lot fo lighting talks. In our opinion: hight quality but too many.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker talk about &lt;code class=&quot;highlighter-rouge&quot;&gt;docker build&lt;/code&gt; was fun. Docker build takes long, and from now on I can’t ignore it anymore. THANKS!!! aka we should fix the layer thing.&lt;/li&gt;
  &lt;li&gt;Fullstack is a zoo. Complexity of our work environment.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://exercism.io/&quot;&gt;http://exercism.io/&lt;/a&gt;: Nice code kata kind of thing. (not a talk, but worth to mention)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gone-in-60-milliseconds-offensive-security-in-the-serverless-age&quot;&gt;Gone in 60 milliseconds: Offensive security in the serverless age&lt;/h3&gt;
&lt;p&gt;Rating: :star: :star: :star: :star: :star:&lt;/p&gt;

&lt;p&gt;Awesome DDoS attack of slides by Rich Jones (&lt;a href=&quot;https://twitter.com/GUNdotIO&quot;&gt;@GUNdotIO&lt;/a&gt;). A lot of cool stuff. A very usefull and insight talk about how unsecure you serverless application can be. Serverless python with &lt;a href=&quot;http://zappa.io&quot;&gt;zappa&lt;/a&gt; and &lt;a href=&quot;https://rawgit.com/Miserlou/Talks/master/full-stack-barcelona-2017/stack.html&quot;&gt;slides&lt;/a&gt;&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Jeroen&quot;, &quot;last_name&quot;=&gt;&quot;Knoops&quot;, &quot;github&quot;=&gt;&quot;JeroenKnoops&quot;, &quot;twitter&quot;=&gt;&quot;johnnybusca&quot;, &quot;linkedin&quot;=&gt;&quot;jeroenknoops&quot;, &quot;permalink&quot;=&gt;&quot;/author/jeroen/&quot;, &quot;header-img&quot;=&gt;&quot;img/vanmoll.jpg&quot;, &quot;avatar&quot;=&gt;&quot;jeroen.png&quot;, &quot;email&quot;=&gt;&quot;jeroen.knoops@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;Jeroen Knoops is a full stack developer. He has worked in corporate environments for many years. He also had the pleasure to work for a small tech startup. All of his work is driven by innovation.\n\n Some keywords: Akai MPC, Urfaust, Richard Dawkins, Zed Shaw, TB-303, Erik Satie, Kapsalon, The Apemen, Piano, Hans Rosling, Haus Arafna, Apple ][, BRNS, Ravi Shankar, Lego geen playmobil, TR-909, Netflix, Tuscany, Kraftwerk, Quadrupel, Frikandel Speciaal, avdi, Moonlizards, Sandi Metz, Pixies, Strijp, Henrik Kniberg, Hazes, Public Enemy, Tesla, Funkmaster Flex, Hakan Forss, Bruce Willis, GitHub, Tony Touch, Hef, Mobb Deep, Funkdoobiest, good food, Noah's ark, Turing, Sugababes, VPRO's DutchMasters, Drums, Jet Li, Craft Beers, Synths, Bowling, La Musica della Mafia, UDS, Unsequenced, Christopher Hitchens, Slapshot en David Anderson.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-09-06-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-08-fsf-fontend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-10-01-micro-hack-zappa-io.md collection=posts&gt;]}</name><email>jeroen.knoops@gmail.com</email></author><category term="iot" /><category term="cloud" /><category term="fullstack" /><category term="microservices" /><category term="security" /><summary type="html">Full Stack Fest 2017</summary></entry><entry><title type="html">Visualising Bézier Curves Part II</title><link href="https://040code.github.io//2017/07/12/bezier-in-clojurescript/" rel="alternate" type="text/html" title="Visualising Bézier Curves Part II" /><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><id>https://040code.github.io//2017/07/12/bezier-in-clojurescript</id><content type="html" xml:base="https://040code.github.io//2017/07/12/bezier-in-clojurescript/">&lt;p&gt;In my &lt;a href=&quot;https://040code.github.io/2017/07/01/bezier-in-clojure/&quot;&gt;previous post&lt;/a&gt; I described how to visualise simple Bézier curves. I chose &lt;code class=&quot;highlighter-rouge&quot;&gt;Clojure&lt;/code&gt; as implementation language. Unfortunately I had to ask you to jump through a couple of hoops in order to code along: installing leiningen, installing and configuring the lein-try plugin and maybe even installing the JVM.&lt;/p&gt;

&lt;p&gt;This post will be easier for you - at least in terms of setup. You won’t have to leave your browser and can experiment with &lt;code class=&quot;highlighter-rouge&quot;&gt;Clojure(Script)&lt;/code&gt; right here on this page!&lt;/p&gt;

&lt;h2 id=&quot;no-setup&quot;&gt;NO Setup&lt;/h2&gt;

&lt;p&gt;In this post we’re going to use the very useful &lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;klipse plugin&lt;/a&gt;. Klipse is a client-side code evaluator pluggable on any web page. It can evaluate &lt;code class=&quot;highlighter-rouge&quot;&gt;Clojure&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ClojureScript&lt;/code&gt;, ruby, javascript, python, scheme, es2017, jsx, brainfuck, c++, reagent and probably much more languages in the near future. It’s like &lt;a href=&quot;https://jsfiddle.net&quot;&gt;jsfiddle&lt;/a&gt; on steroids, right here in the 040code blog.&lt;/p&gt;

&lt;p&gt;Let’s start with a very simple Klipse demonstration. I’m going to &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;inc&lt;/code&gt;(rement) function over the numbers 1, 2 and 3. The result will not surprise you:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(map inc [1 2 3])&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What might surprise you though, is that &lt;strong&gt;you can change the code in the klipse evaluator&lt;/strong&gt; and see the results immediately in your browser. So for instance change &lt;code class=&quot;highlighter-rouge&quot;&gt;(map inc [1 2 3])&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;(map inc [41 999 2])&lt;/code&gt; and be amazed. Or change it into something completely different like &lt;code class=&quot;highlighter-rouge&quot;&gt;(filter even? (range 10))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Defining functions and calling them? No problem:&lt;/p&gt;

&lt;pre&gt;
  &lt;code class=&quot;language-klipse&quot;&gt;
(defn factorial [n]
  (if (= 1 n)
    n
    (* n (factorial (- n 1)))))

(factorial 4)
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Now call the factorial function with some other natural number (whole number &amp;gt; 0) and see the results.&lt;/p&gt;

&lt;p&gt;For those of you who don’t know &lt;code class=&quot;highlighter-rouge&quot;&gt;Clojure(Script)&lt;/code&gt;, this function basically says:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;define a function named &lt;code class=&quot;highlighter-rouge&quot;&gt;factorial&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;let &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; be its argument&lt;/li&gt;
  &lt;li&gt;if &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; equals 1, return &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;otherwise return the multiplication of &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;factorial&lt;/code&gt; of (n - 1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lisp in the browser. Embedded in this blog. No setup required. Excellent!&lt;/p&gt;

&lt;p&gt;But hang on, better things will follow soon.&lt;/p&gt;

&lt;h2 id=&quot;clojure-is-designed-to-be-a-hosted-language&quot;&gt;Clojure is designed to be a hosted language&lt;/h2&gt;

&lt;p&gt;Why reinvent your own platform, your own runtime, your own garbage collector, your own ecosystem, when all you need is a decent language? &lt;code class=&quot;highlighter-rouge&quot;&gt;Clojure&lt;/code&gt; is designed to be a hosted language. It runs on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.clojure.org/about/jvm_hosted&quot;&gt;The JVM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.clojure.org/about/clojureclr&quot;&gt;The CLR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://clojurescript.org&quot;&gt;Javascript engines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Clojurescript&lt;/code&gt; - a compiler for &lt;code class=&quot;highlighter-rouge&quot;&gt;Clojure&lt;/code&gt; that emits javascript - will be the tool we use in this blog to visualise Bézier curves. We are going to manipulate a html canvas right from a klipse plugin.&lt;/p&gt;

&lt;h2 id=&quot;bézier-in-clojurescript&quot;&gt;Bézier in ClojureScript&lt;/h2&gt;

&lt;p&gt;In my &lt;a href=&quot;https://040code.github.io/2017/07/01/bezier-in-clojure/&quot;&gt;previous post&lt;/a&gt; I tried to explain how (simple) Bézier curves ‘work’. You might want to go there or scan the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bézier_curve&quot;&gt;Wikipedia page on Bézier curves&lt;/a&gt; if you have no clue what I’m talking about. Otherwise, let’s dive right in and try to play with Bézier curves directly on this page.&lt;/p&gt;

&lt;pre&gt;
    &lt;code class=&quot;language-klipse&quot;&gt;
;; Get a grip on the html canvas element I inserted on this page
(def canvas (.getElementById js/document &quot;canvas-2d&quot;))
(def ctx    (.getContext canvas &quot;2d&quot;))


;; Draws a blue circle with radius `r` on the canvas on point [x y]
(defn draw-point [x y]
  (let [r 5] ;; radius
    (set! (.-fillStyle ctx) &quot;blue&quot;)
    (.beginPath ctx)
    (.arc ctx x y r 0 (* 2 Math/PI))
    (.fill ctx)))


;; Draws a red Bézier curve and its blue control points on the canvas
(defn draw-bezier-curve [[x1 y1] [x2 y2] [x3 y3]]
  ;; draw curve
  (set! (.-strokeStyle ctx) &quot;red&quot;)
  (set! (.-lineWidth   ctx) 2)
  (.beginPath ctx)
  (.moveTo ctx x1 y1)
  (.quadraticCurveTo ctx x2 y2 x3 y3)
  (.stroke ctx)
  (.closePath ctx)
  ;; draw control points
  (draw-point x1 y1)
  (draw-point x2 y2)
  (draw-point x3 y3))


;; Center the *drawing* canvas within the *html* canvas and draw the curves
;;
;; Reason for centering: keep the coordinates simple AND
;; see the complete shapes (not cropped at the edge of the html canvas)
;; make the ratio 1 to see what I mean with 'cropped at the edge'
;;
(let [wc (.-width canvas)  ;; width of *html* canvas
      hc (.-height canvas) ;; height of *html* canvas
      ratio 0.9            ;; ratio of *html* canvas to use as *drawing* canvas
      t  (/ (- 1 ratio) 2) ;; translation constant
      w  (* ratio wc)      ;; width of *drawing* canvas
      h  (* ratio hc)      ;; height of *drawing* canvas
      x  (* 1/2 w)         ;; x val in the middle of 0 and w
      y  (* 1/2 h)]        ;; y val in the middle of 0 and h

  ;; clear *html* canvas
  (.clearRect ctx 0 0 wc hc)

  ;; Center the *drawing* canvas in the *html* canvas
  (.save ctx)
  (.translate ctx (* t wc) (* t hc))

  ;; Draw a grey border around the *drawing* canvas
  (set! (.-lineWidth ctx) 1)
  (set! (.-strokeStyle ctx) &quot;grey&quot;)
  (.strokeRect ctx 0 0 w h)

  ;; Draw main 'anchor' points
  ;; This is what I meant with 'simple coordinates':
  ;; (draw-point 0 0)
  ;; (draw-point x y)
  ;; (draw-point w h)

  ;; Increasing ascending curve
  (draw-bezier-curve [0 h] [w h] [w 0])

  ;; Swoosh
  ;; (draw-bezier-curve [0 y] [0 h] [w 0])

  ;; normal curve
  ;; (draw-bezier-curve [0 h] [x 0] [w h])

  ;; my pulse after a useless meeting
  ;; (draw-bezier-curve [0 y] [x y] [w y])

  (.restore ctx))
    &lt;/code&gt;
  &lt;/pre&gt;

&lt;canvas id=&quot;canvas-2d&quot; width=&quot;600&quot; height=&quot;600&quot;&gt;&lt;/canvas&gt;

&lt;script src=&quot;https://storage.googleapis.com/app.klipse.tech/plugin/js/klipse_plugin.js?&quot;&gt;&lt;/script&gt;

&lt;p&gt;Before reading further you might want to experiment a bit by (un)commenting code and seeing the results. (Un)comment the different Bézier curves and different control points in the Klipse evaluator and see what happens.&lt;/p&gt;

&lt;h2 id=&quot;explanation&quot;&gt;Explanation&lt;/h2&gt;

&lt;p&gt;Scanning the code quickly without going into detail, this is what happens:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get a grip on the html canvas element&lt;/li&gt;
  &lt;li&gt;Define functions to:
    &lt;ul&gt;
      &lt;li&gt;Draw (control) points&lt;/li&gt;
      &lt;li&gt;Draw Bézier curves with 3 control points&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Draw the actual curves and points&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;Clojure&lt;/code&gt; is a hosted language, it must be able to access its host platform and libraries. &lt;code class=&quot;highlighter-rouge&quot;&gt;Clojure&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ClojureScript&lt;/code&gt; have good &lt;a href=&quot;https://clojure.org/reference/java_interop&quot;&gt;interop&lt;/a&gt; &lt;a href=&quot;http://cljs.github.io/api/syntax/#dot&quot;&gt;documentation&lt;/a&gt; so I won’t go into detail here, but we’re basically using these forms in this blog:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js/document&lt;/code&gt;       =&amp;gt; the global document object&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(.beginPath ctx)&lt;/code&gt;  =&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ctx.beginPath()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Math/PI&lt;/code&gt;           =&amp;gt; 3.141592653589793&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(.-lineWidth ctx)&lt;/code&gt; =&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ctx.lineWidth&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last form is used for instance in &lt;code class=&quot;highlighter-rouge&quot;&gt;(set! (.-lineWidth ctx) 1)&lt;/code&gt; and translates to &lt;code class=&quot;highlighter-rouge&quot;&gt;ctx.lineWidth = 1&lt;/code&gt;. The more general syntax is &lt;code class=&quot;highlighter-rouge&quot;&gt;(set! var-symbol expr)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second form &lt;code class=&quot;highlighter-rouge&quot;&gt;(.beginPath ctx)&lt;/code&gt; can also have arguments. The general syntax is &lt;code class=&quot;highlighter-rouge&quot;&gt;(.instanceMember instance args*)&lt;/code&gt; in that case.&lt;/p&gt;

&lt;p&gt;Other than that it’s basic &lt;code class=&quot;highlighter-rouge&quot;&gt;Clojure&lt;/code&gt; and &lt;a href=&quot;https://www.w3schools.com/tags/ref_canvas.asp&quot;&gt;HTML Canvas functionality&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Thanks to the klipse plugin and a bit of preparation from my side, you can now play around with Bézier Curves in &lt;code class=&quot;highlighter-rouge&quot;&gt;ClojureScript&lt;/code&gt; directly in this blog. I do realise this post is probably not a compelling case for using &lt;code class=&quot;highlighter-rouge&quot;&gt;ClojureScript&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Javascript “in the small” is not really the place where &lt;code class=&quot;highlighter-rouge&quot;&gt;ClojureScript&lt;/code&gt; shines, especially when the largest part of that small program is javascript interop&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ClojureScript&lt;/code&gt; fits large browser applications better, where you need sane state management, immutable datastructures, lazy sequences, and a fast,  stable and robust language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m not interested in ‘religious’ discussions about technology A versus technology B. &lt;code class=&quot;highlighter-rouge&quot;&gt;Clojure&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ClojureScript&lt;/code&gt; are THE sane way forward for me, in my context. I hope to share the fun I’m experiencing with it. Goethe said it best:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is always better to say right out what you think without trying to prove anything much: for all our proofs are only variations of our opinions, and the contrary-minded listen neither to one nor the other.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But with all this talk about language, we’re almost forgetting what it’s all about: building useful stuff and having a great time doing it.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed experimenting with Bézier curves. The &lt;a href=&quot;http://blog.klipse.tech&quot;&gt;Klipse Blog&lt;/a&gt; has several great examples of using Klipse for ‘interactive programming’, for instance &lt;a href=&quot;http://blog.klipse.tech/data/2017/03/17/data-driven-documents-google-charts.html&quot;&gt;to write data driven documents&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks Niek for sharing the 040code repo with me. Please share your comments, suggestions and thoughts about this blog post on &lt;a href=&quot;https://twitter.com/mmz_&quot;&gt;twitter.com/mmz_&lt;/a&gt;. Thanks for reading and Happy Coding!&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://040code.github.io/2017/07/01/bezier-in-clojure/&quot;&gt;Bézier in Clojure - Part I&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.klipse.tech&quot;&gt;Klipse Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://app.klipse.tech&quot;&gt;Klipse App in the browser&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.klipse.tech/clojure/2016/03/17/klipse.html&quot;&gt;Explanation about the Klipse app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.klipse.tech/data/2017/03/17/data-driven-documents-google-charts.html&quot;&gt;Using Klipse for generating data driven charts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jsfiddle.net&quot;&gt;JSfiddle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cljs.github.io/api/syntax/#dot&quot;&gt;Javascript interop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://clojure.org/reference/java_interop&quot;&gt;Java interop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/tags/ref_canvas.asp&quot;&gt;HTML Canvas functionality&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Maarten&quot;, &quot;last_name&quot;=&gt;&quot;Metz&quot;, &quot;github&quot;=&gt;&quot;mmzsource&quot;, &quot;twitter&quot;=&gt;&quot;MMz_&quot;, &quot;linkedin&quot;=&gt;&quot;maartenmetz&quot;, &quot;permalink&quot;=&gt;&quot;/author/maarten/&quot;, &quot;header-img&quot;=&gt;&quot;img/htc.jpg&quot;, &quot;avatar&quot;=&gt;&quot;maarten.png&quot;, &quot;email&quot;=&gt;&quot;mmz.source@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;Maarten Metz works as a senior software designer at Philips Research and has almost 2 decades of professional coding experience. He holds a Master degree in Human Computer Interaction from the Technical University in Eindhoven. His knowledge and experience range from requirements analysis to system maintenance and everything in between. \n\n His professional interests include interaction design, software requirements, – architecture, – design, – construction, – test automation and everything else that makes a system work. He has held presentations and workshops on various topics including Clojure, lean software development, problem solving, professional development, CQRS and mining code repositories.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-07-01-bezier-in-clojure.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-07-12-bezier-in-clojurescript.md collection=posts&gt;]}</name><email>mmz.source@gmail.com</email></author><category term="clojure" /><category term="clojurescript" /><category term="bézier" /><category term="functional" /><category term="klipse" /><category term="canvas" /><summary type="html">In my previous post I described how to visualise simple Bézier curves. I chose Clojure as implementation language. Unfortunately I had to ask you to jump through a couple of hoops in order to code along: installing leiningen, installing and configuring the lein-try plugin and maybe even installing the JVM.</summary></entry><entry><title type="html">Visualising Bézier Curves</title><link href="https://040code.github.io//2017/07/01/bezier-in-clojure/" rel="alternate" type="text/html" title="Visualising Bézier Curves" /><published>2017-07-01T00:00:00+00:00</published><updated>2017-07-01T00:00:00+00:00</updated><id>https://040code.github.io//2017/07/01/bezier-in-clojure</id><content type="html" xml:base="https://040code.github.io//2017/07/01/bezier-in-clojure/">&lt;p&gt;For reasons I might explain in another post, I was reading about &lt;a href=&quot;https://en.wikipedia.org/wiki/Bézier_curve&quot;&gt;Bézier curves on wikipedia&lt;/a&gt; the other day. Especially the paragraph on “Constructing Bézier curves” made me understand intuitively how these curves are constructed. I wondered if &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure&lt;/code&gt; could help me easily visualise some of these curves so I fired up a &lt;a href=&quot;https://en.wikipedia.org/wiki/Read–eval–print_loop&quot;&gt;REPL&lt;/a&gt; (Read-Eval-Print-Loop) to investigate.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;I assume you have a working &lt;a href=&quot;https://leiningen.org&quot;&gt;leiningen&lt;/a&gt; setup with the &lt;a href=&quot;https://github.com/rkneufeld/lein-try&quot;&gt;lein-try plugin&lt;/a&gt; installed.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Leiningen will help you get started with &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure&lt;/code&gt; right away from your shell&lt;/li&gt;
  &lt;li&gt;Lein-try enables you to spin up a repl and try a library without any hassle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s first start a repl, and specify the library we want to try:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lein try incanter &lt;span class=&quot;s2&quot;&gt;&quot;1.5.7&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://incanter.org&quot;&gt;Incanter&lt;/a&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure&lt;/code&gt;-based, R-like platform for statistical computing and graphics. We’ll use it to visualise the Bézier curves.&lt;/p&gt;

&lt;p&gt;Since the repl is already fired up, let’s immediately require the dependencies we’ll need:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incanter.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incanter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incanter.charts&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;charts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nothing fancy going on here. Simply ‘import’ statements the &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure&lt;/code&gt; way.&lt;/p&gt;

&lt;h2 id=&quot;helper-function&quot;&gt;Helper function&lt;/h2&gt;

&lt;p&gt;I decided to hand-roll my own &lt;code class=&quot;highlighter-rouge&quot;&gt;pow&lt;/code&gt; function, because we’ll need it later in the creation of bézier curves:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exponent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This function basically says:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;define a function named &lt;code class=&quot;highlighter-rouge&quot;&gt;pow&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;let &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;exponent&lt;/code&gt; be its arguments&lt;/li&gt;
  &lt;li&gt;make it &lt;code class=&quot;highlighter-rouge&quot;&gt;repeat&lt;/code&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;exponent&lt;/code&gt; times&lt;/li&gt;
  &lt;li&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; that result with the &lt;code class=&quot;highlighter-rouge&quot;&gt;*'&lt;/code&gt; multiply function&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;;; so:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; will lead to&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; which results in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m using the &lt;code class=&quot;highlighter-rouge&quot;&gt;*'&lt;/code&gt; multiply function instead of the normal &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; multiply function, because according to the docs &lt;code class=&quot;highlighter-rouge&quot;&gt;*'&lt;/code&gt; supports arbitrary precision. You can see for yourself by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;(doc *')&lt;/code&gt; in your repl, or study the code by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;(source *')&lt;/code&gt; in your repl.&lt;/p&gt;

&lt;h2 id=&quot;bézier&quot;&gt;Bézier&lt;/h2&gt;

&lt;p&gt;Bézier functions work with control points. The minimum number of control points is 2 and Bézier curves with 2 control points are straight lines (although you can also create straight lines with more than 2 control points).&lt;/p&gt;

&lt;p&gt;For the moment I only need Bézier curves with 3 control points: a start point, an end point and one point controlling the curve of the line between start and end.&lt;/p&gt;

&lt;p&gt;Quoting the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bézier_curve&quot;&gt;Wikipedia page&lt;/a&gt;: “A quadratic Bézier curve is the path traced by the function B(t), given points P0, P1, and P2”:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/bezier-formula.png&quot; alt=&quot;bezier-formula&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So given 3 points (P0, P1 and P2) I should be able to describe the curve with this math function. Conceptually a pen is drawing the curve by starting on P0 on moment &lt;code class=&quot;highlighter-rouge&quot;&gt;t = 0&lt;/code&gt; and following the curve described by this formula and the position of the 3 points until it hits the end point at &lt;code class=&quot;highlighter-rouge&quot;&gt;t = 1&lt;/code&gt;. The only thing this resulting &lt;code class=&quot;highlighter-rouge&quot;&gt;B(t)&lt;/code&gt; function needs is the moment &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; and it will calculate the X or Y coördinate at that particular moment.&lt;/p&gt;

&lt;p&gt;Let’s convert the math function to &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bezier-3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, you’ll have to translate the infix notation to &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure&lt;/code&gt;’s prefix notation. The advantage is there are no precedence rules to remember anymore. These are all just lists where the first element of the list is interpreted as a function to call and the brackets are used to put them into context. &lt;em&gt;(If you can’t live with that: you can also use infix notation in clojure. For instance incanter can also be fed with &lt;a href=&quot;https://data-sorcery.org/2010/05/14/infix-math/&quot;&gt;infix notation&lt;/a&gt;. However, you’ll lose &lt;a href=&quot;https://en.wikipedia.org/wiki/Lambda_calculus&quot;&gt;the power of the 𝝺&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This function basically states:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;define a function named &lt;code class=&quot;highlighter-rouge&quot;&gt;bezier-3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;let it have 3 arguments: &lt;code class=&quot;highlighter-rouge&quot;&gt;P0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;P1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;P2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;make it return an anonymous function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This anonymous function:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;takes &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; as an argument&lt;/li&gt;
  &lt;li&gt;has &lt;code class=&quot;highlighter-rouge&quot;&gt;P0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;P1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;P2&lt;/code&gt; already ‘injected’&lt;/li&gt;
  &lt;li&gt;applies the Bézier math function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Excellent. Let’s try it:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test-b3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bezier-3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test-b3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here I’m defining a variable &lt;code class=&quot;highlighter-rouge&quot;&gt;test-b3&lt;/code&gt; which holds the anonymous function returned by the &lt;code class=&quot;highlighter-rouge&quot;&gt;bezier-3&lt;/code&gt; function call. The 3 points are either all x or all y coordinates of the points P0, P1 and P2.&lt;/p&gt;

&lt;p&gt;With the &lt;code class=&quot;highlighter-rouge&quot;&gt;(test-b3 0)&lt;/code&gt; function call I’m calling the anonymous function with a &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; value of &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;. This nicely returns an answer representing the x coordinates at moment &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; if you provided the (P0, P1 and P2) x coordinates when calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;bezier-3&lt;/code&gt; function or the y coordinate at moment &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; if you provided the (P0, P1 and P2) y coordinates.&lt;/p&gt;

&lt;p&gt;Since this test didn’t blow the stack or throw a NullPointerException or anything,  let’s map this function over a range of &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;[0 0.25 0.5 0.75 1]&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test-b3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.75&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.9375&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.75&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.4375&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead of typing these &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;’s to &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; over, we could also use the &lt;code class=&quot;highlighter-rouge&quot;&gt;range&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, &lt;code class=&quot;highlighter-rouge&quot;&gt;range&lt;/code&gt; allows you to specify a start (inclusive), an end (exclusive) and a step size (optional).&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test-b3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.9900000000000001&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.9600000000000002&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.9099999999999999&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.84&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.75&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.64&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.51&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3600000000000001&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.19000000000000014&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.220446049250313&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E-16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although a certain pattern is already visible in these numbers, now might be the right time to start visualising the curves.&lt;/p&gt;

&lt;h2 id=&quot;visualise&quot;&gt;Visualise&lt;/h2&gt;

&lt;p&gt;Let’s be brave and go right to the essence:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view-bezier-plot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot-title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b3x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bezier-3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b3x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b3y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bezier-3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b3y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;incanter/conj-cols&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xy-plot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;charts/xy-plot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:points&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot-title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;incanter/view&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xy-plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; form is &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure&lt;/code&gt;’s way of defining local variables. So &lt;code class=&quot;highlighter-rouge&quot;&gt;b3x&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;xs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;b3y&lt;/code&gt;, etc. can be seen as local variables with their values specified in the functions directly after their declaration.&lt;/p&gt;

&lt;p&gt;This function basically states:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;define a function named &lt;code class=&quot;highlighter-rouge&quot;&gt;view-bezier-plot&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;let it have 3 arguments which are destructured into their 2D x &amp;amp; y coordinates&lt;/li&gt;
  &lt;li&gt;let the fourth argument be the title of the plot&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; it have some local variables:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;b3x&lt;/code&gt; takes all x coordinates of the 3 points&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;b3y&lt;/code&gt; takes the y coordinates&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xs&lt;/code&gt; are the all x values resulting from applying the &lt;code class=&quot;highlighter-rouge&quot;&gt;b3x&lt;/code&gt; anonymous function with all the range values&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ys&lt;/code&gt; are the all y values resulting from applying the &lt;code class=&quot;highlighter-rouge&quot;&gt;b3y&lt;/code&gt; anonymous function with all the range values&lt;/li&gt;
      &lt;li&gt;incanter can work with columns similarly to spreadsheets. &lt;code class=&quot;highlighter-rouge&quot;&gt;dataset&lt;/code&gt; is an incanter dataset where 2 columns are ‘brought together’, or in &lt;a href=&quot;https://en.wikipedia.org/wiki/Lisp_(programming_language)&quot;&gt;lisp&lt;/a&gt; terms &lt;code class=&quot;highlighter-rouge&quot;&gt;conj&lt;/code&gt;[oined]. By default, these columns are called &lt;code class=&quot;highlighter-rouge&quot;&gt;col-0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;col-1&lt;/code&gt;, … , &lt;code class=&quot;highlighter-rouge&quot;&gt;col-n&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;xy-plot contains an incanter chart where &lt;code class=&quot;highlighter-rouge&quot;&gt;dataset&lt;/code&gt; provides the data, the x-axis - and y-axis values are found in columns &lt;code class=&quot;highlighter-rouge&quot;&gt;col-0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;col-1&lt;/code&gt; respectively and viewing the points is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;and make it return an &lt;code class=&quot;highlighter-rouge&quot;&gt;xy-plot&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;i-love-it-when-a-plan-comes-together&quot;&gt;I love it when a plan comes together&lt;/h2&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;view-bezier-plot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;increasing ascending&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;view-bezier-plot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;swoosh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;view-bezier-plot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;y = x^2 ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;view-bezier-plot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my pulse after a useless meeting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/incanter-plots.png&quot; alt=&quot;incanter-plots&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The generated charts will be opened in external java windows. Sometimes they stay hidden behind other windows on your screen, so you might have to bring your java windows to the foreground in order to see them.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In a relatively short repl session I was able to get a better understanding of (3 point) Bézier curves. Although the blogpost is long, not much code or time was needed to create the curves:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incanter.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incanter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incanter.charts&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;charts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exponent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bezier-3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view-bezier-plot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot-title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b3x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bezier-3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b3x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b3y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bezier-3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b3y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;incanter/conj-cols&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xy-plot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;charts/xy-plot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:points&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot-title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;incanter/view&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xy-plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Actually, the hand-rolled &lt;code class=&quot;highlighter-rouge&quot;&gt;pow&lt;/code&gt; function isn’t really needed. I could have used &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure&lt;/code&gt;’s java interop: &lt;code class=&quot;highlighter-rouge&quot;&gt;(Math/pow 2 3)&lt;/code&gt;. In that case I would have been calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;pow&lt;/code&gt; method directly on java’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Math&lt;/code&gt; class. I weighted the option of hand-rolling the &lt;code class=&quot;highlighter-rouge&quot;&gt;pow&lt;/code&gt; function, showing some functional code and explaining how functions are defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure&lt;/code&gt; versus explaining java interop.&lt;/p&gt;

&lt;p&gt;Explaining in text what the code does took me 5 times as long as writing the code itself. That’s a great thing about &lt;a href=&quot;https://en.wikipedia.org/wiki/Lisp_(programming_language)&quot;&gt;lisps&lt;/a&gt; in general and &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure&lt;/code&gt; in particular: no fluff, just stuff!&lt;/p&gt;

&lt;p&gt;Thanks Niek for posting my guest blog. Please share your comments, suggestions and thoughts about this blog with me on &lt;a href=&quot;https://twitter.com/mmz_&quot;&gt;twitter.com/mmz_&lt;/a&gt;. Thanks for reading and Happy Coding!&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mmzsource/833ddfb2cf87c54fe4fc26996466cd1d&quot;&gt;A gist with the code from this post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://clojure.org&quot;&gt;Clojure website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Lisp_(programming_language)&quot;&gt;Lisps or LIst Processing Language&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Lambda_calculus&quot;&gt;𝝺 calculus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Read–eval–print_loop&quot;&gt;REPL or Read Eval Print Loop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.davidtanzer.net/rdd_and_tests&quot;&gt;REPL Driven Development&lt;/a&gt; - a blog which is a bit outdated on the test part, because nowadays, with &lt;a href=&quot;https://clojure.org/about/spec&quot;&gt;clojure spec&lt;/a&gt; we easily generate our tests and test data by specifying our data structures, functions, etc. in &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure&lt;/code&gt; itself. With proper specs, you’ll get even more than generative testing; you’ll get validation, better error reporting, destructuring and type- and range checking in one go - without losing the power &amp;amp; pleasure of a dynamic programming language!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leiningen.org&quot;&gt;Leiningen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rkneufeld/lein-try&quot;&gt;Lein-try plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://incanter.org&quot;&gt;Incanter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://data-sorcery.org/2010/05/14/infix-math/&quot;&gt;Incanter infix notation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bézier_curve&quot;&gt;Wikipedia page on Bézier curves&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://plus.maths.org/content/formula-bezier-curve&quot;&gt;The formula for a bezier curve&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blogs.sitepointstatic.com/examples/tech/canvas-curves/bezier-curve.html&quot;&gt;Play around with bézier curves with 4 control points&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Maarten&quot;, &quot;last_name&quot;=&gt;&quot;Metz&quot;, &quot;github&quot;=&gt;&quot;mmzsource&quot;, &quot;twitter&quot;=&gt;&quot;MMz_&quot;, &quot;linkedin&quot;=&gt;&quot;maartenmetz&quot;, &quot;permalink&quot;=&gt;&quot;/author/maarten/&quot;, &quot;header-img&quot;=&gt;&quot;img/htc.jpg&quot;, &quot;avatar&quot;=&gt;&quot;maarten.png&quot;, &quot;email&quot;=&gt;&quot;mmz.source@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;Maarten Metz works as a senior software designer at Philips Research and has almost 2 decades of professional coding experience. He holds a Master degree in Human Computer Interaction from the Technical University in Eindhoven. His knowledge and experience range from requirements analysis to system maintenance and everything in between. \n\n His professional interests include interaction design, software requirements, – architecture, – design, – construction, – test automation and everything else that makes a system work. He has held presentations and workshops on various topics including Clojure, lean software development, problem solving, professional development, CQRS and mining code repositories.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-07-01-bezier-in-clojure.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-07-12-bezier-in-clojurescript.md collection=posts&gt;]}</name><email>mmz.source@gmail.com</email></author><category term="clojure" /><category term="bézier" /><category term="functional" /><category term="incanter" /><summary type="html">For reasons I might explain in another post, I was reading about Bézier curves on wikipedia the other day. Especially the paragraph on “Constructing Bézier curves” made me understand intuitively how these curves are constructed. I wondered if clojure could help me easily visualise some of these curves so I fired up a REPL (Read-Eval-Print-Loop) to investigate.</summary></entry><entry><title type="html">Coding a VPC in Terraform</title><link href="https://040code.github.io//2017/06/18/terraform-aws-vpc/" rel="alternate" type="text/html" title="Coding a VPC in Terraform" /><published>2017-06-18T00:00:00+00:00</published><updated>2017-06-18T00:00:00+00:00</updated><id>https://040code.github.io//2017/06/18/terraform-aws-vpc</id><content type="html" xml:base="https://040code.github.io//2017/06/18/terraform-aws-vpc/">&lt;p&gt;One of the common uses network setups in AWS is called &lt;a href=&quot;http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Scenario2.html&quot;&gt;Scenario 2: VPC with Public and Private Subnets&lt;/a&gt;. This is a that defines a Virtual Private Cloud (VPC), public subnets and private subnets. Setting up this infrastructure can be done via the AWS console or via cloud formation scripting. However, I prefer the tool &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt; in which you can manage your infrastructure as code with a declarative language that supports building, changing and versioning your cloud in a modular way.&lt;/p&gt;

&lt;p&gt;In this article I will describe how you can create a VPC with a public and private subnet on AWS using terraform. I will describe the setup step by step and I will show how to encapsulate all logic to one re-usable module.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html&quot;&gt;Why we need subnets.&lt;/a&gt; When you create a VPC, it spans all the Availability Zones in the region. After creating a VPC, you can add one or more subnets in each Availability Zone. When you create a subnet, you specify the CIDR block for the subnet, which is a subset of the VPC CIDR block. Each subnet must reside entirely within one Availability Zone and cannot span zones. Availability Zones are distinct locations that are engineered to be isolated from failures in other Availability Zones. By launching instances in separate Availability Zones, you can protect your applications from the failure of a single location.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before you can start, you need an AWS account with sufficient rights (admin), and you should create a &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; to be able to access your account programmatically.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-your-system&quot;&gt;Setting up your system.&lt;/h2&gt;
&lt;p&gt;The easiest way to use terraform is via docker. In that case you do not need any locally isntalled tools. We simply create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;.aws&lt;/code&gt; where we put the AWS key and secret to athentication API calls, as shown below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AWS_ACCESS_KEY_ID=&amp;lt;KEY&amp;gt;
AWS_SECRET_ACCESS_KEY=&amp;lt;SECRET&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;creating-a-vpc-part-1&quot;&gt;Creating a VPC part 1&lt;/h2&gt;
&lt;p&gt;All code for part 1 is available on &lt;a href=&quot;https://github.com/040code/blog_terraform-aws-vpc&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default, terraform expects the configuration in a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;main.tf&lt;/code&gt;. Create the file and add the terraform provide for Amazon:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# main.tf
provider &quot;aws&quot; {
  region = &quot;eu-west-1&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We are now ready to, step-by-step, add the terraform resources to create the VPC setup. First, have a look on the VPC setup as shown in the picture below.
&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/nat-gateway-diagram.png&quot; alt=&quot;nat-gateway-diagram&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will start by creating the VPC itself: add the following snippet to your &lt;code class=&quot;highlighter-rouge&quot;&gt;main.tf&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;aws_vpc&quot; &quot;vpc&quot; {
  cidr_block           = &quot;10.0.0.0/16&quot;
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags {
    label = &quot;blog&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Before we make the change effective we run a &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt; to inspect the planned changes. You can install terraform locally or run the commands in a docker container. The docker command will export the AWS credentials to the container, mount the current directory to &lt;code class=&quot;highlighter-rouge&quot;&gt;/data&lt;/code&gt; in the container, and set &lt;code class=&quot;highlighter-rouge&quot;&gt;/data&lt;/code&gt; as working directory to ensure the container will execute the &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt; command on the directory that contains the terraform files.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it --env-file ./.aws  -v $(pwd):/data -w /data \
  hashicorp/terraform:0.9.8 plan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After executing the plan command, you should see output similar to:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ aws_vpc.vpc
    assign_generated_ipv6_cidr_block: &quot;false&quot;
    cidr_block:                       &quot;10.0.0.0/16&quot;
    default_network_acl_id:           &quot;&amp;lt;computed&amp;gt;&quot;
    default_route_table_id:           &quot;&amp;lt;computed&amp;gt;&quot;
    default_security_group_id:        &quot;&amp;lt;computed&amp;gt;&quot;
    dhcp_options_id:                  &quot;&amp;lt;computed&amp;gt;&quot;
    enable_classiclink:               &quot;&amp;lt;computed&amp;gt;&quot;
    enable_dns_hostnames:             &quot;true&quot;
    enable_dns_support:               &quot;true&quot;
    instance_tenancy:                 &quot;&amp;lt;computed&amp;gt;&quot;
    ipv6_association_id:              &quot;&amp;lt;computed&amp;gt;&quot;
    ipv6_cidr_block:                  &quot;&amp;lt;computed&amp;gt;&quot;
    main_route_table_id:              &quot;&amp;lt;computed&amp;gt;&quot;
    tags.%:                           &quot;1&quot;
    tags.label:                       &quot;blog&quot;


Plan: 1 to add, 0 to change, 0 to destroy.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This looks correct, so we can apply the change to create the VPC by running &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it --env-file ./.aws  -v $(pwd):/data -w /data \
  hashicorp/terraform:0.9.8 apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can go VPC via the AWS console, where you should now see a VPC in the list named &lt;code class=&quot;highlighter-rouge&quot;&gt;blog&lt;/code&gt;. Now we have the VPC, we create a public and private subnet by adding the following to the main.tf.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;aws_subnet&quot; &quot;public_subnet_a&quot; {
  vpc_id                  = &quot;${aws_vpc.vpc.id}&quot;
  cidr_block              = &quot;10.0.0.0/24&quot;
  availability_zone       = &quot;eu-west-1a&quot;
  map_public_ip_on_launch = false

  tags {
    Name = &quot;blog&quot;
  }
}

resource &quot;aws_subnet&quot; &quot;private_subnet_a&quot; {
  vpc_id                  = &quot;${aws_vpc.vpc.id}&quot;
  cidr_block              = &quot;10.0.1.0/24&quot;
  availability_zone       = &quot;eu-west-1a&quot;

  tags {
    Name = &quot;blog&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Run now &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt; again, it will show that the resources will be added, one for each subnet. Apply the change using &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; and inspect your changes again via the VPC section in the AWS console.&lt;/p&gt;

&lt;p&gt;Next, we connect the public subnet via an &lt;em&gt;internet gateway&lt;/em&gt;. Create a routing table and an internet gateway. And a &lt;em&gt;aws_route_table_association&lt;/em&gt; to create an association between a subnet and routing table. Update your &lt;code class=&quot;highlighter-rouge&quot;&gt;main.tf&lt;/code&gt; with the snippet below, and run a plan and apply.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;aws_internet_gateway&quot; &quot;internet_gateway&quot; {
  vpc_id = &quot;${aws_vpc.vpc.id}&quot;
}

resource &quot;aws_route_table&quot; &quot;public_routetable&quot; {
  vpc_id = &quot;${aws_vpc.vpc.id}&quot;

  route {
    cidr_block = &quot;0.0.0.0/0&quot;
    gateway_id = &quot;${aws_internet_gateway.internet_gateway.id}&quot;
  }

  tags {
    label = &quot;blog&quot;
  }
}

resource &quot;aws_route_table_association&quot; &quot;public_subnet_a&quot; {
  subnet_id      = &quot;${aws_subnet.public_subnet_a.id}&quot;
  route_table_id = &quot;${aws_route_table.public_routetable.id}&quot;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are now able to deploy an application to the public subnet and make it accessible via a security group. However, it is not yet possible to route traffic to the private subnet or let instances on the private subnet connect to internet. To do so, we add a NAT gateway and connect the gateway via a route table to the private subnet. The NAT gateway requires an elastic IP, which we will create first. Add the next terraform snippet to your &lt;code class=&quot;highlighter-rouge&quot;&gt;main.tf&lt;/code&gt; and run a &lt;code class=&quot;highlighter-rouge&quot;&gt;plan&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt; to inspect and make the changes effective.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;aws_eip&quot; &quot;nat&quot; {
  vpc = true
}

resource &quot;aws_nat_gateway&quot; &quot;nat&quot; {
  allocation_id = &quot;${aws_eip.nat.id}&quot;
  subnet_id     = &quot;${aws_subnet.public_subnet_a.id}&quot;
}

resource &quot;aws_route_table&quot; &quot;private_routetable&quot; {
  vpc_id = &quot;${aws_vpc.vpc.id}&quot;

  route {
    cidr_block     = &quot;0.0.0.0/0&quot;
    nat_gateway_id = &quot;${aws_nat_gateway.nat.id}&quot;
  }

  tags {
    label = &quot;blog&quot;
  }
}

resource &quot;aws_route_table_association&quot; &quot;private_subnet_a&quot; {
  subnet_id      = &quot;${aws_subnet.private_subnet_a.id}&quot;
  route_table_id = &quot;${aws_route_table.private_routetable.id}&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Setting up the VPC with subnets is quite verbose, and imagine then when you must support more availability zones, the code will almost double per zone. So we refactor it to a generic module to support the multiple subnets that are available in a zone.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-vpc-part-2&quot;&gt;Creating a VPC part 2&lt;/h2&gt;
&lt;p&gt;I have rewritten the code showed above to a generic module. With this model, it is easy to create a VPC with all availability zones per zone, and private subnets can be enabled on demand.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.terraform.io/docs/modules/usage.html&quot;&gt;Modules in terraform&lt;/a&gt; are self-contained packages of gerraform configurations that are managed as a group. Modules are used to create reusable components, improve organization, and to treat pieces of infrastructure as a black box.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I will not describe all code in the module again but only will pay attention to the significant changes I made. In the code above the zone, availability zone where hard coded. This will not work in a generic module. A common way to solve this in terraform is by creating a map where a zone is mapped to a list of availability zondes. By passing the zone to the moudle, the module can find out which availability zones there are. A default map is available in the module but can be ovewritten as follow:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;availability_zones = {
  eu-west-1 = [&quot;eu-west-1a&quot;, &quot;eu-west-1b&quot;, &quot;eu-west-1c&quot;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The cdir block in the code show above was hard coded, but terraform contains a function to calculate the cdir block. In the module I use the terraform &lt;a href=&quot;https://www.terraform.io/docs/configuration/interpolation.html#cidrsubnet-iprange-newbits-netnum-&quot;&gt;function&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;cidrsubnet()&lt;/code&gt; to calculate the cdir block.&lt;/p&gt;

&lt;p&gt;Now only one problem needs to be solved in order to create a generic module: how can we create a AWS resource for each element in a list? Do we create subnet or route table association for each availability zone? Or how can we avoid creating a private subnet at all? The solution is to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; variable in a module to iterate over the list of availability zones, which is available on my &lt;a href=&quot;https://github.com/npalm/tf-aws-vpc.git&quot;&gt;github&lt;/a&gt;. We can now create a VPC similar to the one above with just a few line of code. Add the following lines to your terraform script to create a VPC.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module &quot;vpc&quot; {
  source = &quot;git::https://github.com/npalm/tf-aws-vpc.git&quot;

  key        = &quot;blog&quot;
  aws_region = &quot;eu-west-1&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It is possible to overwrite module variables with default to get more control, see the ezample below:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module &quot;vpc&quot; {
  source = &quot;git::https://github.com/npalm/tf-aws-vpc.git&quot;

  key        = &quot;blog&quot;
  aws_region = &quot;eu-west-1&quot;

  create_private_hosted_zone = &quot;false&quot;
  create_private_subnets     = &quot;false&quot;
  cidr_block = &quot;10.0.0.0/16&quot;

  // example to override default availability_zones
  availability_zones = {
    eu-west-1 = [&quot;eu-west-1a&quot;, &quot;eu-west-1c&quot;]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Niek&quot;, &quot;last_name&quot;=&gt;&quot;Palm&quot;, &quot;github&quot;=&gt;&quot;npalm&quot;, &quot;twitter&quot;=&gt;&quot;niekos77&quot;, &quot;linkedin&quot;=&gt;&quot;niekpalm&quot;, &quot;permalink&quot;=&gt;&quot;/author/niek/&quot;, &quot;header-img&quot;=&gt;&quot;img/about.jpg&quot;, &quot;avatar&quot;=&gt;&quot;niek.jpg&quot;, &quot;email&quot;=&gt;&quot;dev.npalm@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;I am developing for more than a decade software, mainly based on open source stacks. Currently I am having a full stack focus with my strengths on the backend related services, cloud and continuous delivery. Technologies that me keep busy now a days are: AWS, Terraform, Spring Cloud, React, React Native, Continuous Deliver, Docker, Elastic Search and much more. \n\n But cool technologies are not my only passions. I love to just crab by backpack and go around. Creating some nice meals and exploring the creative area of a cook is one of my favourite hobbies. Drinking a great craft beer is something that I love too. And from time to time the body needs some real exercise so I like to have a run or do a hike.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-04-20-discovery-agent.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-04-21-gitlab-perodic-build.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-07-docker-multi-stage-builds.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-20-nextbuild-graphql.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-06-18-terraform-aws-vpc.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-06-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-08-fsf-fontend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-19-talk-immutable-infrastructure.md collection=posts&gt;]}</name><email>dev.npalm@gmail.com</email></author><category term="aws" /><category term="terraform" /><summary type="html">One of the common uses network setups in AWS is called Scenario 2: VPC with Public and Private Subnets. This is a that defines a Virtual Private Cloud (VPC), public subnets and private subnets. Setting up this infrastructure can be done via the AWS console or via cloud formation scripting. However, I prefer the tool Terraform in which you can manage your infrastructure as code with a declarative language that supports building, changing and versioning your cloud in a modular way.</summary></entry><entry><title type="html">GraphQL</title><link href="https://040code.github.io//2017/05/20/nextbuild-graphql/" rel="alternate" type="text/html" title="GraphQL" /><published>2017-05-20T23:50:00+00:00</published><updated>2017-05-20T23:50:00+00:00</updated><id>https://040code.github.io//2017/05/20/nextbuild-graphql</id><content type="html" xml:base="https://040code.github.io//2017/05/20/nextbuild-graphql/">&lt;p&gt;A short post to share the slides and examples I used in my talk at the &lt;a href=&quot;http://nextbuild.nl/&quot;&gt;Nextbuild&lt;/a&gt; conference on May the 20th in Eindhoven.&lt;/p&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;
&lt;p&gt;Below the slides that I for the talk, the slides are available as well on &lt;a href=&quot;https://npalm.github.io/graphql-slides-20170520/&quot;&gt;GitHub&lt;/a&gt;. You can easy navigate through the slides with the spacebar.&lt;/p&gt;

&lt;div style=&quot;position:relative; width:100%; height:0px; padding-bottom:56.25%;&quot;&gt;
    &lt;iframe style=&quot;position:absolute; left:0; top:0; width:100%; height:100%&quot; src=&quot;https://npalm.github.io/graphql-slides-20170520/&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;To get started with GraphQL the best starting points are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://graphql.org&quot;&gt;GraphQL.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/chentsulin/awesome-graphql&quot;&gt;Awesome GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;
&lt;p&gt;During the talk, I demonstrated GraphQL via &lt;a href=&quot;https://www.graph.cool/&quot;&gt;graphcool&lt;/a&gt;, which is cloud service for creating a flexible GraphGL backend. I modelled a basic model of a Talk and Person with relation speakers and visitors on graphcool. Furthermore, I modelled two basic sample implementations of a GraphQL backend in Java and JavaScript that are available via GitHub. Those implementation are more limited than the online one, but both serve the following minimal queries.&lt;/p&gt;

&lt;p&gt;Query for the name and the title of the talks given by all persons:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  persons {
    name
    talks {
      title
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And secondly, a query for all titles of talks with their speaker’s names.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  talks {
    title
    speakers {
      name
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;javascript-sample&quot;&gt;JavaScript sample&lt;/h3&gt;
&lt;p&gt;The JavaScript &lt;a href=&quot;https://github.com/npalm/graphql-js-demo.git&quot;&gt;sample&lt;/a&gt; is based on &lt;a href=&quot;https://github.com/apollostack/apollo-starter-kit&quot;&gt;Apollo GraphQL tutorial kit&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/npalm/graphql-js-demo.git
cd graphql-js-demo
yarn &amp;amp;&amp;amp; yarn start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Instead of yarn, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install &amp;amp;&amp;amp; npm start&lt;/code&gt;. Once started, browse to &lt;a href=&quot;http://localhost:8080/graphiql&quot;&gt;http://localhost:8080/graphiql&lt;/a&gt; and play around with the GraphQL web interface. Implementing the JavaScript version was straightforward due to the many examples and good tutorials around.&lt;/p&gt;

&lt;h3 id=&quot;spring-boot-java-sample&quot;&gt;Spring Boot Java sample&lt;/h3&gt;
&lt;p&gt;The Spring Boot Java &lt;a href=&quot;https://github.com/npalm/graphql-java-demo.git&quot;&gt;sample&lt;/a&gt; is based on the Spring Boot Starter available for GraphQL. This starter uses a basic GraphQL java library as well the Java annotation library for GraphQL.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/npalm/graphql-java-demo.git
git checkout nextbuild
cd graphql-java-demo
docker build -t graphql-java-demo &amp;amp;&amp;amp; docker run -it --rm -p 8080:8080 graphql-java-demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, you can build and run via gradle. Once started, browse to &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt; to play around with the GraphQL web interface. The Java version implementation was not as easy as expected. The GraphQL Spring Boot starter dependencies requires the GrahpQL java annotation library, which seems to be broken after an update in the Java GraphQL base library. I am not sure if the annotation library is still supported. To get the GraphQL Spring Boot library working I have to add a mandatory mutation to the scheme. And downgrade the Java GraphQL, see &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle/depedencies.gradle&lt;/code&gt; to get the annotation library to work.&lt;/p&gt;

&lt;p&gt;Many languages already have support, so feel free to try out your favourite language. Currently the support on JavaScript looks like by far the best.&lt;/p&gt;

&lt;h2 id=&quot;updates&quot;&gt;Updates&lt;/h2&gt;

&lt;h3 id=&quot;refactored-java-implementation-june-20-2017&quot;&gt;Refactored Java implementation (June 20, 2017)&lt;/h3&gt;
&lt;p&gt;I have updated the Spring Boot implmentation, upgrade all libraries and removed the annotations for graphql resolving. The annoation are replaced &lt;a href=&quot;https://github.com/graphql-java/graphql-java-tools&quot;&gt;java-graphql-tools&lt;/a&gt;. Which looks a better way to ingrate graphql in a Java service. You will see the implementation will have a lot of similarities with the javascript one.&lt;/p&gt;

&lt;h3 id=&quot;developersnl-meetup-rotterdam-june-28-2017&quot;&gt;Developers.nl meetup Rotterdam (June 28, 2017)&lt;/h3&gt;
&lt;p&gt;On June, the 28th I have presented the GraphQL talk at the &lt;a href=&quot;https://www.meetup.com/Developers-nl-Meetup/events/240419508/&quot;&gt;developers.nl Meetup&lt;/a&gt; in Rotterdom. I have used a slightly minimal version for the slides, which can be found &lt;a href=&quot;https://npalm.github.io/graphql-slides-20170628/&quot;&gt;here&lt;/a&gt;. Comparing the to the presentaton on the nextbuild I have also walked through the code examples mentioned above.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Niek&quot;, &quot;last_name&quot;=&gt;&quot;Palm&quot;, &quot;github&quot;=&gt;&quot;npalm&quot;, &quot;twitter&quot;=&gt;&quot;niekos77&quot;, &quot;linkedin&quot;=&gt;&quot;niekpalm&quot;, &quot;permalink&quot;=&gt;&quot;/author/niek/&quot;, &quot;header-img&quot;=&gt;&quot;img/about.jpg&quot;, &quot;avatar&quot;=&gt;&quot;niek.jpg&quot;, &quot;email&quot;=&gt;&quot;dev.npalm@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;I am developing for more than a decade software, mainly based on open source stacks. Currently I am having a full stack focus with my strengths on the backend related services, cloud and continuous delivery. Technologies that me keep busy now a days are: AWS, Terraform, Spring Cloud, React, React Native, Continuous Deliver, Docker, Elastic Search and much more. \n\n But cool technologies are not my only passions. I love to just crab by backpack and go around. Creating some nice meals and exploring the creative area of a cook is one of my favourite hobbies. Drinking a great craft beer is something that I love too. And from time to time the body needs some real exercise so I like to have a run or do a hike.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-04-20-discovery-agent.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-04-21-gitlab-perodic-build.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-07-docker-multi-stage-builds.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-20-nextbuild-graphql.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-06-18-terraform-aws-vpc.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-06-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-08-fsf-fontend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-19-talk-immutable-infrastructure.md collection=posts&gt;]}</name><email>dev.npalm@gmail.com</email></author><category term="graphql" /><summary type="html">A short post to share the slides and examples I used in my talk at the Nextbuild conference on May the 20th in Eindhoven.</summary></entry><entry><title type="html">Docker Multi Stage Builds</title><link href="https://040code.github.io//2017/05/07/docker-multi-stage-builds/" rel="alternate" type="text/html" title="Docker Multi Stage Builds" /><published>2017-05-07T00:00:00+00:00</published><updated>2017-05-07T00:00:00+00:00</updated><id>https://040code.github.io//2017/05/07/docker-multi-stage-builds</id><content type="html" xml:base="https://040code.github.io//2017/05/07/docker-multi-stage-builds/">&lt;h1 id=&quot;the-problem&quot;&gt;The problem&lt;/h1&gt;
&lt;p&gt;Building an application requires typically multiple steps. First compiling the application, next testing it and finally shipping the artifact in a Docker image for execution. All these steps can be combined in one &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;, but typically you end up with a Docker image that contains all kinds of tools that are not necessary for running the application.&lt;/p&gt;

&lt;p&gt;We could try to get rid of all unneeded files in the image after build, but a more useful approach is to separate Docker images for building and running the application. However, this approach requires two separate Dockerfiles that needs to be maintained.&lt;/p&gt;

&lt;p&gt;Let’s have a look on a &lt;a href=&quot;https://github.com/040code/blog_docker-mulit-stage-build.git&quot;&gt;example&lt;/a&gt; for a simple Java micro service. The micro services require the JDK and Gradle to build. The JDK needs to be installed before the build and Gradle will be download by the build itself. We can build the micro service in the following way.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/040code/blog_docker-mulit-stage-build.git
cd notes-service
docker run -it --rm -v $(pwd):/build -w /build openjdk:8u121-jdk-alpine ./gradlew build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now the artifact is available, we can create a Docker runtime image. The application only needs the Java Runtime (JRE) to run. We create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; based JRE alpine image and add our application.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# file: Dockerfile (git checkout step-00)
FROM openjdk:8u121-jre-alpine
COPY build/libs/notes-service.jar /app/notes-service.jar

EXPOSE 8080
CMD java -jar /app/notes-service.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, we build the production image as follows:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t notes-service:00 .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we have created a clean Docker images that only containes the needed libraries to run the application. But would it not be nice if we can do this more straightforward? For example, in one Docker build.&lt;/p&gt;

&lt;h1 id=&quot;moving-on-to-a-multi-stage-build&quot;&gt;Moving on to a multi stage build&lt;/h1&gt;
&lt;p&gt;Docker 17.05.x brings a new feature; it is now possible to define a &lt;a href=&quot;https://docs.docker.com/engine/userguide/eng-image/multistage-build/&quot;&gt;multi stage builds&lt;/a&gt; in one Dockerfile. The Dockerfile can contain multiple FROM lines and each stage starts with a new FROM line and a fresh context. You can copy artifacts from stage to stage.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/docker-multi-stages-build.png&quot; alt=&quot;docker-multi-stages-build&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it is time to have a second look on the same example. Instead of passing the build arguments and mounting our sources, we will build our software using a single Dockerfile.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# file: Dockerfile (git checkout step-01)
FROM openjdk:8u121-jdk-alpine AS build

WORKDIR /build-env
ADD . /build-env
RUN ./gradlew build

CMD java -jar /build-env/build/notes-service.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And build it:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t notes-service:01 .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Nothing new here, we are now able to build our software in a container and ship an image, but the image contains all kinds of build stuff that we do not want in a runtime image. So, the next step is to solve this problem by getting rid of all the unwanted build tools.&lt;/p&gt;

&lt;p&gt;We update the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; and make a few modifications.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# file: Dockerfile (git checkout step-02)
FROM openjdk:8u121-jdk-alpine AS build                                               # (1)

WORKDIR /build-env
ADD . /build-env
RUN ./gradlew build

FROM openjdk:8u121-jre-alpine                                                        # (2)
COPY --from=build /build-env/build/libs/notes-service.jar /app/notes-service.jar     # (3)

EXPOSE 8080
CMD java -jar /app/notes-service.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; above we marked the first stage (1) as &lt;em&gt;build&lt;/em&gt; to refer later, if not specifying a name you can refer to the stage as 0. Next (2), we add the second stage which specifies the base image that we need to run our application. Finally (3), we copy the results from the build stage to the image for executing.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t notes-service:02 .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And now we can run via the following docker run command.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it --rm -p 8080 notes-service:2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Inspection of the tree images build will show that version 0 and 2 are equal in size, version 1 that contains all the build files and the JDK is almost three times bigger.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Docker’s new multi layer build feature can be quite useful when build pipeline without parallel builds will suite your needs. In that case, you can reduce your build to a single image. For projects that requires a more complex multi stage build, including parallel builds, this new Docker feature will not provide an added value.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Niek&quot;, &quot;last_name&quot;=&gt;&quot;Palm&quot;, &quot;github&quot;=&gt;&quot;npalm&quot;, &quot;twitter&quot;=&gt;&quot;niekos77&quot;, &quot;linkedin&quot;=&gt;&quot;niekpalm&quot;, &quot;permalink&quot;=&gt;&quot;/author/niek/&quot;, &quot;header-img&quot;=&gt;&quot;img/about.jpg&quot;, &quot;avatar&quot;=&gt;&quot;niek.jpg&quot;, &quot;email&quot;=&gt;&quot;dev.npalm@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;I am developing for more than a decade software, mainly based on open source stacks. Currently I am having a full stack focus with my strengths on the backend related services, cloud and continuous delivery. Technologies that me keep busy now a days are: AWS, Terraform, Spring Cloud, React, React Native, Continuous Deliver, Docker, Elastic Search and much more. \n\n But cool technologies are not my only passions. I love to just crab by backpack and go around. Creating some nice meals and exploring the creative area of a cook is one of my favourite hobbies. Drinking a great craft beer is something that I love too. And from time to time the body needs some real exercise so I like to have a run or do a hike.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-04-20-discovery-agent.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-04-21-gitlab-perodic-build.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-07-docker-multi-stage-builds.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-20-nextbuild-graphql.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-06-18-terraform-aws-vpc.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-06-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-08-fsf-fontend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-19-talk-immutable-infrastructure.md collection=posts&gt;]}</name><email>dev.npalm@gmail.com</email></author><category term="docker" /><summary type="html">The problem Building an application requires typically multiple steps. First compiling the application, next testing it and finally shipping the artifact in a Docker image for execution. All these steps can be combined in one Dockerfile, but typically you end up with a Docker image that contains all kinds of tools that are not necessary for running the application.</summary></entry><entry><title type="html">Periodic builds in GitLab</title><link href="https://040code.github.io//2017/04/21/gitlab-perodic-build/" rel="alternate" type="text/html" title="Periodic builds in GitLab" /><published>2017-04-21T12:21:00+00:00</published><updated>2017-04-21T12:21:00+00:00</updated><id>https://040code.github.io//2017/04/21/gitlab-perodic-build</id><content type="html" xml:base="https://040code.github.io//2017/04/21/gitlab-perodic-build/">&lt;p&gt;I am using GitLab CI now for more than a year and I really love the features in GitLab. GitLab provides a complete and powerful tool for day to day development. And of course, there are always feature that you miss. Until now there is no support for periodic builds, in the coming release the &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ce/issues/2989&quot;&gt;feature&lt;/a&gt; will be shipped as experimental feature and in the next one is should be general available. But in case you must deal for some reason with an older version, a work around is described below as I used last year.&lt;/p&gt;

&lt;p&gt;You could argue why you should need a feature as a periodic build. Ideally a build should be immutable and only trigger by a change in GIT, a commit. But the world is not always perfect, project build are sometime not of the quality that you are expect or tools are not that reliable as you hope. For example, dependencies resolving could break over the time, to avoid you find the problem once your boss is watching you when fixing a critical bug, a periodic build can alert you earlier. Another and much better reason to argue for the feature is that the GitLab build are so powerful that is handy to use them for a scenario based health check.&lt;/p&gt;

&lt;h2 id=&quot;the-build-trigger&quot;&gt;The build trigger&lt;/h2&gt;
&lt;p&gt;To setup a periodic build you first need to be able to trigger a build in some way. GitLab provides an &lt;a href=&quot;https://docs.gitlab.com/ce/ci/triggers/&quot;&gt;API&lt;/a&gt; to trigger a build. Setting up the trigger is simple and complete guided in GitLab, just execute the steps below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to your GitLab projects&lt;/li&gt;
  &lt;li&gt;Navigate to Settings -&amp;gt; CI/CD Pipelines&lt;/li&gt;
  &lt;li&gt;Scroll down to the trigger section and create a trigger&lt;/li&gt;
  &lt;li&gt;Make a note of the TOKEN and trigger URL. An curl example for trigger is shown as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/gitlabtrigger.png&quot; alt=&quot;GitLab trigger&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we test that we are able to trigger the build remotely be executing the &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; command below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -X POST \
     -F token=&amp;lt;TOKEN&amp;gt; \
     -F ref=&amp;lt;REF_NAME&amp;gt; \
     &amp;lt;URL&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Verify in GitLab the build is triggered&lt;/p&gt;

&lt;h2 id=&quot;periodic-trigger-the-build-in-a-docker-container&quot;&gt;Periodic trigger the build in a Docker container&lt;/h2&gt;
&lt;p&gt;The next step is to execute the trigger periodic. A standard way of running a job periodic is by defining crontab. We will use a docker container to execute the crontab so we can deploy it anywhere.&lt;/p&gt;

&lt;p&gt;I have createe a base docker image containing a script to trigger GitLab by executing a curl command as shown above. The crontab will be copied to the image &lt;code class=&quot;highlighter-rouge&quot;&gt;ONBUILD&lt;/code&gt;. In the crontab we point to the script that can be executed as follow:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;trigger-gitlab.sh -t &amp;lt;token&amp;gt; -r &amp;lt;ref&amp;gt; -u &amp;lt;gitlab_trigger_url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For the sources see &lt;a href=&quot;https://github.com/npalm/gitlab-periodic-trigger&quot;&gt;npalm/gitlab-periodic-trigger&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;p&gt;Now all peace’s are ready we only have to build our docker image and run it to trigger the build. First, we create a Dockerfile and only extend the base image &lt;code class=&quot;highlighter-rouge&quot;&gt;npalm/gitlab-periodic-trigger&lt;/code&gt;. Create a new directory, and add a Dockerfile with only the line:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM npalm/gitlab-periodic-trigger:1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This image expects a file &lt;code class=&quot;highlighter-rouge&quot;&gt;gitlabcrontab&lt;/code&gt; containing the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cron&quot;&gt;crontab&lt;/a&gt; and will copy it to the image once build. Create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;gitlabcrontab&lt;/code&gt;, and add one ore more triggers, an example is below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Example of job definition:
# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7)
# |  |  |  |  |
22 11 * * * trigger-gitlab.sh -t &amp;lt;token&amp;gt; -r &amp;lt;ref&amp;gt; -u &amp;lt;gitlab_trigger_url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we build the container &lt;code class=&quot;highlighter-rouge&quot;&gt;docker build -t periodic-trigger .&lt;/code&gt; and finally start the container &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -d periodic-trigger&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To enable the feature for your teams you could set up a build to build the docker image as described below and push it automated to an environment.&lt;/p&gt;</content><author><name>{&quot;first_name&quot;=&gt;&quot;Niek&quot;, &quot;last_name&quot;=&gt;&quot;Palm&quot;, &quot;github&quot;=&gt;&quot;npalm&quot;, &quot;twitter&quot;=&gt;&quot;niekos77&quot;, &quot;linkedin&quot;=&gt;&quot;niekpalm&quot;, &quot;permalink&quot;=&gt;&quot;/author/niek/&quot;, &quot;header-img&quot;=&gt;&quot;img/about.jpg&quot;, &quot;avatar&quot;=&gt;&quot;niek.jpg&quot;, &quot;email&quot;=&gt;&quot;dev.npalm@gmail.com&quot;, &quot;bio&quot;=&gt;&quot;I am developing for more than a decade software, mainly based on open source stacks. Currently I am having a full stack focus with my strengths on the backend related services, cloud and continuous delivery. Technologies that me keep busy now a days are: AWS, Terraform, Spring Cloud, React, React Native, Continuous Deliver, Docker, Elastic Search and much more. \n\n But cool technologies are not my only passions. I love to just crab by backpack and go around. Creating some nice meals and exploring the creative area of a cook is one of my favourite hobbies. Drinking a great craft beer is something that I love too. And from time to time the body needs some real exercise so I like to have a run or do a hike.&quot;, &quot;posts&quot;=&gt;[#&lt;Jekyll::Document _posts/2017-04-20-discovery-agent.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-04-21-gitlab-perodic-build.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-07-docker-multi-stage-builds.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-05-20-nextbuild-graphql.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-06-18-terraform-aws-vpc.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-06-fsf-backend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-08-fsf-fontend.md collection=posts&gt;, #&lt;Jekyll::Document _posts/2017-09-19-talk-immutable-infrastructure.md collection=posts&gt;]}</name><email>dev.npalm@gmail.com</email></author><category term="gitlab" /><category term="docker" /><summary type="html">I am using GitLab CI now for more than a year and I really love the features in GitLab. GitLab provides a complete and powerful tool for day to day development. And of course, there are always feature that you miss. Until now there is no support for periodic builds, in the coming release the feature will be shipped as experimental feature and in the next one is should be general available. But in case you must deal for some reason with an older version, a work around is described below as I used last year.</summary></entry></feed>